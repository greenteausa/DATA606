#!/usr/bin/env python
# coding: utf-8

# In[1]:


#Import all the necessary libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
import matplotlib.animation as animation
import plotly.express as px
import plotly.graph_objects as go
import seaborn as sns
import math
import os
from nltk.probability import FreqDist
from nltk.corpus import stopwords
from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator
from textblob import TextBlob
from tqdm import tqdm
from IPython.display import display_html, HTML
import chart_studio.plotly as py
import plotly.graph_objects as go
from plotly.tools import FigureFactory as FF
import time
import plotly.io as pio


# In[2]:


#Load the global confirmed cases by date datasets
case = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv'
df_case = pd.read_csv(case)
df_case.head()


# In[3]:


#Check the data type and null value numbers
df_case.info()


# In[4]:


#Check number NaN in Province/State

df_case["Province/State"].isna().sum()

#Since 70% of values are not available, and this information is not going to be used, this will be dropped.


# In[5]:


#Check how many countries are unique value

print("Number of Country Name is:", df_case["Country/Region"].nunique())
#There are only 188 unique countries, that means 78 are duplicate.


# In[6]:


#Print rows that have duplicate Country name

# Select duplicate rows except first occurrence based on all columns
duplicate_rows = df_case[df_case.duplicated(["Country/Region"])]
 
print("Duplicate Rows by Country/Region:")
print(duplicate_rows)


# In[7]:


#Drop a Province/State column

df_case = df_case.drop(['Province/State'], axis=1)


# In[8]:


#Combine rows with same country name

df_case = df_case.groupby(df_case['Country/Region']).aggregate('sum')
df_case.head()


# In[9]:


#Change Country/Region to Country and add Total_case column

df_case.index.names = ['Country']
df_case['Total_case'] = df_case.iloc[:,-1]
df_case.head()


# In[10]:


#Check the dataframe shape

df_case.shape
#Now all the country names are unique values


# In[11]:


#Reset index
df_case.reset_index(level=0, inplace=True)
df_case.head()


# In[12]:


#save this as csv

df_case.to_csv(r"C:\Users\yeaji\Documents\UMBC\Classes\Data606\total_Case.csv")


# In[13]:


#Make a choropleth map with the total confirmed cases

fig_1 = px.choropleth(df_case, locations = "Country",
                    color = np.log10(df_case['Total_case']), 
                    hover_name = "Country", 
                    hover_data = ["Total_case"],
                    color_continuous_scale = px.colors.sequential.Plasma, locationmode = "country names")
fig_1.update_geos(fitbounds = "locations", visible = True)
fig_1.update_layout(title_text = "COVID-19 Total Confirmed Cases Choropleth Map")
fig_1.update_coloraxes(colorbar_title = "Log10 Confirmed Cases",colorscale = "ice", reversescale=True)
fig_1.show()


# In[14]:


#Save the fig_1 as html
pio.write_html(fig_1, file='C:/Users/yeaji/Documents/UMBC/Classes/Data606/Figure/fig_1.html', auto_open=True)


# In[15]:


#Save the figure for P3
fig_1.write_image("C:/Users/yeaji/Documents/UMBC/Classes/Data606/Figure/fig_1.png")


# In[16]:


#Load the countries datasets

con = 'https://raw.githubusercontent.com/ines570/DATA606/master/Datasets/countries%20of%20the%20world.csv'
df_con = pd.read_csv(con, decimal=',')
df_con.head(-5)


# In[17]:


#Check the data type and null value numbers
df_con.info()


# In[18]:


df_con.describe()


# In[19]:


#Delete the trailing space 
df_con['Country'] = df_con['Country'].str.strip()
df_con['Region'] = df_con['Region'].str.strip()


# In[20]:


#Check how many countries are in country dataset

df_con.Country.nunique()
#So all country value is unique


# In[21]:


df_con.info()


# In[22]:


#Chekc which country is missing GDP

df_con["GDP ($ per capita)"].isna()
print(df_con.loc[[223]])


# In[23]:


#Fill Wetern Sahara GDP in 2007, $908.9 million according to Wikipidea, divide that by population 273008 to get GDP per capita

df_con.loc[223, 'GDP ($ per capita)'] = 908900000/273008


# In[24]:


#Check how many Regions are in country dataset

df_con.Region.nunique()


# In[25]:


region = df_con.Region.unique().tolist()
print(region)


# In[26]:


#Find the countries that have different names in two datasets and fix it

country_case = df_case['Country'].tolist()
country_con = df_con['Country'].tolist()
print("Country names in df_case:", country_case)
print("Country names in df_con:", country_con)


# In[27]:


#Print different country names in two dataframes

country_diff = [list(set(country_case).difference(country_con))]
print("Different Country names in df_case:", country_diff)


# In[28]:


#Change Names in df_con to match names in df_case for country_diff

df_con = df_con.replace({'Country' : { 'Sao Tome & Principe':'Sao Tome and Principe','Congo, Repub. of the':'Congo (Brazzaville)',
                                           'Bahamas, The':'Bahamas', 'Macedonia':'North Macedonia', 'Cape Verde':'Cabo Verde', 
                                           'Trinidad & Tobago':'Trinidad and Tobago', 'Gambia, The':'Gambia', 'Czech Republic':'Czechia', 
                                           'Swaziland':'Eswatini', 'East Timor':'Timor-Leste', 'Antigua & Barbuda':'Antigua and Barbuda', 
                                           'Gaza Strip':'West Bank and Gaza', 'Bosnia & Herzegovina':'Bosnia and Herzegovina', 
                                           'Taiwan':'Taiwan*', 'United States':'US', 'Saint Kitts & Nevis':'Saint Kitts and Nevis', 
                                           'Congo, Dem. Rep.':'Congo (Kinshasa)' }})
#Holy See, Montenegro, Central African Republic, Kosovo are not in country_con


# In[29]:


#Merge df_case and df_con 
df_new = df_case.merge(df_con, on='Country', how='left')

df_new.head()


# In[30]:


#Print the rows with null value
line = pd.isnull(df_new['Population'])
df_new[line]


# In[31]:


#Fill the populations for Holy See, Montenegro, Central African Republic, Kosovo, MS Zaandam, Diamond Princess, South Sudan
#Source: 2018 population at World Bank or Google search
df_new.loc[df_new['Country'] == 'Montenegro', 'Population'] = 622359
df_new.loc[df_new['Country'] == 'Holy See', 'Population'] = 801
df_new.loc[df_new['Country'] == 'Central African Republic', 'Population'] = 4666000
df_new.loc[df_new['Country'] == 'Kosovo', 'Population'] = 1845000
df_new.loc[df_new['Country'] == 'Diamond Princess', 'Population'] = 3711
df_new.loc[df_new['Country'] == 'MS Zaandam', 'Population'] = 1829
df_new.loc[df_new['Country'] == 'South Sudan', 'Population'] = 10980000


# In[32]:


#Calculate prevalence rate (by 100000) and add to the column

df_new['Prevalence'] = df_new['Total_case'].div(df_new['Population'], axis=0)
df_new['Prevalence'] = df_new['Prevalence']*100000
df_new.head()


# In[33]:


#Make a choropleth map with the prevalence rate

fig_2 = px.choropleth(df_new, locations = "Country",
                    color = np.log10(df_new['Prevalence']), 
                    hover_name = "Country", 
                    hover_data = ["Prevalence"],
                    color_continuous_scale = px.colors.sequential.Plasma, locationmode = "country names")
fig_2.update_geos(fitbounds = "locations", visible = True)
fig_2.update_layout(title_text = "COVID-19 Prevalence Rate Choropleth Map")
fig_2.update_coloraxes(colorbar_title = "Log10 Prevalence Rates",colorscale = "deep")
fig_2.show()
#Chile is doing way worse with prevalence rate and India is doing way better with prevalence rate


# In[34]:


#Save the fig_2 as html
pio.write_html(fig_2, file='C:/Users/yeaji/Documents/UMBC/Classes/Data606/Figure/fig_2.html', auto_open=True)


# In[35]:


#Save the figure for P3
fig_2.write_image("C:/Users/yeaji/Documents/UMBC/Classes/Data606/Figure/fig_2.png")


# In[36]:


#Just merge total case into df_con to see any correlation
df_con_tc = df_con.copy()
df_con_tc['Total_case'] = df_case['Total_case']

df_con_tc.head()


# In[37]:


import sweetviz as sv
report = sv.analyze(df_con_tc)
report.show_html('report.html')


# In[38]:


Country_25 = ['US', 'Brazil', 'Russia', 'India', 'United Kingdom', 'Peru', 'Chile', 'Spain', 'Italy', 'Iran', 'France', 
              'Germany', 'Turkey', 'Mexico', 'South Africa', 'China', 'Sweden', 'Singapore', 'Korea, South', 'Slovenia',
              'New Zealand', 'Vietnam', 'Taiwan*', 'Cambodia', 'Laos']


df_con_25 = df_con_tc.loc[df_con_tc.Country.isin(Country_25)]
df_con_25.head()


# In[39]:


#Melt the dates to convert from columns to rows

column_list = df_case.columns.tolist()
date_columns = column_list[3:-1]

df_melt = df_case.melt(id_vars =['Country', 'Lat', 'Long'], value_vars = date_columns,  
        var_name ='Date', value_name ='Total_case')
df_melt['Date'] = pd.to_datetime(df_melt['Date'])
df_melt['Date'] = df_melt['Date'].dt.strftime('%m/%d/%Y')
df_melt = df_melt.sort_values(["Date", "Country"])
df_melt = df_melt.reset_index()
df_melt = df_melt.drop('index', 1)
df_melt.head(-10)


# In[40]:


df_melt.shape


# In[41]:


#Calculate Size column related to Total_case
spr_glob = df_melt.groupby(['Date', 'Country'])['Total_case'].max()
spr_glob = spr_glob.reset_index()
spr_glob['Size'] = spr_glob['Total_case'].pow(0.2)
spr_glob


# In[42]:


#Scatter plot of how virus spread in the globe

fig_3 = px.scatter_geo(spr_glob, locations="Country", locationmode='country names', 
                     color="Total_case", color_continuous_scale=px.colors.sequential.Viridis, size='Size', hover_name="Country", 
                     animation_frame="Date", 
                     title='COVID-19 Spread over time')
fig_3.update(layout_coloraxis_showscale=True)
fig_3.update_geos(
    resolution=110,
    showland=True, landcolor="DarkGrey",
    showocean=True, oceancolor="DimGrey",
    showlakes=True, lakecolor="DimGrey",
    showcountries=True, countrycolor="lightGrey"
)
fig_3.update_layout(height=700, margin={"r":0,"t":50,"l":0,"b":0}, title_text = "COVID-19 Spread Map", transition = {'duration': 0.1})
fig_3.show()


# In[43]:


#Save the figure as html
pio.write_html(fig_3, file='C:/Users/yeaji/Documents/UMBC/Classes/Data606/Figure/fig_3.html', auto_open=True)


# In[44]:


#Save the figure for P3
fig_3.write_image("C:/Users/yeaji/Documents/UMBC/Classes/Data606/Figure/fig_3.png")


# In[45]:


#Merge df_melt and df_con 
df_new_melt = df_melt.merge(df_con, on='Country', how='left')
df_new_melt['Prevalence'] = df_new_melt['Total_case'].div(df_new_melt['Population'], axis=0)
df_new_melt['Prevalence'] = df_new_melt['Prevalence']*100000
df_new_melt.head()


# In[46]:


df_new_melt.shape


# In[47]:


#Print the countries missing GDP
bool1 = pd.isnull(df_new_melt['GDP ($ per capita)'])

df_o = df_new_melt[bool1]
drop_country = df_o['Country'].unique()
print(drop_country)
#We will drop these countries since it is hard to fill in information


# In[48]:


#Drop the above countries

df_wo = df_new_melt[~(df_new_melt.Country.isin(['Central African Republic', 'Diamond Princess', 'Holy See', 
                                        'Kosovo', 'MS Zaandam', 'Montenegro', 'South Sudan']))]
df_wo.shape


# In[49]:


list(df_wo.columns) 


# In[50]:


# Animated graph of total_case, GDP, Region, and population

fig_4 = px.scatter(df_wo, y="GDP ($ per capita)", x="Total_case", color="Region", size="Population", size_max=30, 
           hover_name="Country", animation_frame ="Date", animation_group="Country", log_x=True, range_y=[0, 40000], 
           range_x=[1, 3000000])
fig_4.show()


# In[51]:


#Save the figure as html
pio.write_html(fig_4, file='C:/Users/yeaji/Documents/UMBC/Classes/Data606/Figure/fig_4.html', auto_open=True)


# In[52]:


#Save the figure for P3
fig_4.write_image("C:/Users/yeaji/Documents/UMBC/Classes/Data606/Figure/fig_4.png")


# In[53]:


#Load the mitigation datasets

mitig = 'https://raw.githubusercontent.com/OxCGRT/covid-policy-tracker/master/data/OxCGRT_latest.csv'
df_mitig = pd.read_csv(mitig)
df_mitig.head(-5)


# In[54]:


#Check the data type and null value numbers
df_mitig.info()
#M1_Wildcrd is 100% null so it will be dropped. 
#Flag columns have many null value, need to think of what to do


# In[55]:


#Grab containment and closure policies in 25 countries

df_mitig.rename(columns={'CountryName': 'Country'}, inplace=True)
df_mitig['Date'] = pd.to_datetime(df_mitig['Date'].astype(str), format='%Y%m%d')
df_mitig['Date'] = df_mitig['Date'].dt.strftime('%m/%d/%Y')
df_c = df_mitig.drop(df_mitig.columns[[1, 4, 6, 8, 10, 12, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 
                                       32, 33, 34, 35, 36, 37, 38, 39, 40, 41]], axis=1)
country_25 = ['United States', 'Brazil', 'Russia', 'India', 'United Kingdom', 'Peru', 'Chile', 'Spain', 'Italy', 'Iran', 'France', 
              'Germany', 'Turkey', 'Mexico', 'South Africa', 'China', 'Sweden', 'Singapore', 'South Korea', 'Slovenia',
              'New Zealand', 'Vietnam', 'Taiwan', 'Cambodia', 'Laos']

df_c = df_c.loc[df_c.Country.isin(country_25)]        .set_index(['Country', 'Date'])        .sort_index()
df_c.columns = df_c.columns.str.split('_').str[0]
display(df_c)


# In[87]:


#save this as csv

df_c.to_csv(r"C:\Users\yeaji\Documents\UMBC\Classes\Data606\25_mitigation.csv")


# In[56]:


df_c.info()


# In[57]:


#Make a new dataframe df_sort with 25 countries to grab mitigation start and end dates

df_sort = pd.DataFrame().append(country_25)
df_sort = df_sort.rename(columns = {0:'Country'})
df_sort


# In[58]:


#Grab starting dates and ending dates per mitigation level by country 
#and append to df_sort by mapping countries
columns = list(df_c) 
for i in columns:
    for x in range(1, 5):
        if (df_c[i] == x).any():
            df_sort[i+'_'+str(x)] =df_sort.Country.map(dict((df_c[i] == x).groupby('Country').idxmax(axis=1).tolist()))
        else:
            continue
df_sort   
#Need to fix if x doesn't exist in the i column, it should be blank instead of 01/01/2020 (else: continue doesn't work)
#axis=1 doesn't do anything


# In[59]:


#Convert 01/01/2020 to NaN since that is not valid

df_sort = df_sort.replace({'01/01/2020': np.nan})

df_sort


# In[60]:


#Grab economic & health system policies in 25 countries

df_eh = df_mitig.drop(df_mitig.columns[[1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 24, 29, 30, 31, 32, 33, 
                                        34, 35, 36, 37, 38, 39, 40, 41]], axis=1)
country_25 = ['United States', 'Brazil', 'Russia', 'India', 'United Kingdom', 'Peru', 'Chile', 'Spain', 'Italy', 'Iran', 'France', 
              'Germany', 'Turkey', 'Mexico', 'South Africa', 'China', 'Sweden', 'Singapore', 'South Korea', 'Slovenia',
              'New Zealand', 'Vietnam', 'Taiwan', 'Cambodia', 'Laos']

df_eh = df_eh.loc[df_eh.Country.isin(country_25)]        .set_index(['Country', 'Date'])        .sort_index()
df_eh.columns = df_eh.columns.str.split('_').str[0]
display(df_eh)


# In[93]:


#save this as csv

df_eh.to_csv(r"C:\Users\yeaji\Documents\UMBC\Classes\Data606\25_mitigation_eh.csv")


# In[61]:


#Grab starting dates per mitigation level by country and append to df_sort by mapping countries
columns = list(df_eh) 
for i in columns:
    for x in range(1, 5):
        if (df_eh[i] == x).any():
            df_sort[i+'_'+str(x)] =df_sort.Country.map(dict((df_eh[i] == x).groupby('Country').idxmax(axis=1).tolist()))

df_sort


# In[62]:


#Convert 01/01/2020 to NaN since that is not valid

df_sort = df_sort.replace({'01/01/2020': np.nan})

df_sort


# In[96]:


#save this as csv

df_sort.to_csv(r"C:\Users\yeaji\Documents\UMBC\Classes\Data606\mitigation.csv")


# In[63]:


#Check how many countries are in mitigation dataset

df_mitig.Country.nunique()


# In[64]:


#Change date format, and sort by date

df_mitig = df_mitig.sort_values(["Date", "Country"])

df_mitig.head(-5)


# In[65]:


#Find the countries that have different names in two datasets and fix it

country_melt = df_new_melt.Country.unique().tolist()
country_mit = df_mitig.Country.unique().tolist()
print("Country names in df_new_melt:", country_case)
print("Country names in df_mitig:", country_mit)


# In[66]:


#Print different country names in two dataframes

country_diff_2 = [list(set(country_melt).difference(country_mit))]
print("Different Country names in df_case:", country_diff_2)


# In[67]:


#Change Names in df_con to match names in df_case for country_diff

df_mitig = df_mitig.replace({'Country' : {'Kyrgyz Republic':'Kyrgyzstan','Congo':'Congo (Brazzaville)', 
                                          'Myanmar':'Burma', 'South Korea':'Korea, South', 'Czech Republic':'Czechia', 
                                          'Slovak Republic':'Slovakia', 'Taiwan':'Taiwan*', 'United States':'US', 
                                          'Democratic Republic of Congo':'Congo (Kinshasa)'}})
#Sao Tome and Principe, Saint Kitts and Nevis, Bahamas, Monaco, Malta, Guinea-Bissau, Saint Vincent and the Grenadines,
#North Macedonia, Guinea-Bissau, Antigua and Barbuda, Maldives, Armenia, Comoros, Saint Lucia, Equatorial Guinea, Cabo Verde, 
#Western Sahara,MS Zaandam, Grenada, Holy See, Diamond Princess, Liechtenstein, West Bank and Gaza, Montenegro are not in country_mit


# In[68]:


#Drop 23 countries/ teritories

df_wo_1 = df_new_melt[~(df_new_melt.Country.isin(['Saint Kitts and Nevis', 'Bahamas', 'Monaco', 'Malta', 
                                                'Sao Tome and Principe', 'Saint Vincent and the Grenadines', 
                                                'North Macedonia', 'Guinea-Bissau', 'Antigua and Barbuda', 'Maldives', 
                                                'Armenia', 'Comoros', 'Saint Lucia', 'Equatorial Guinea', 'Cabo Verde', 
                                                'Western Sahara', 'MS Zaandam', 'Grenada', 'Holy See', 'Diamond Princess', 
                                                'Liechtenstein', 'West Bank and Gaza', 'Montenegro']))]
df_wo_1.shape


# In[69]:


#Merge df_wo_1 and df_mitig 
df_new_mitig = df_wo_1.merge(df_mitig, on=['Country', 'Date'], how='left')

df_new_mitig.head(-5)


# In[70]:


df_new_mitig.info()


# In[71]:


#Leave only 25 countries
Country_25 = ['US', 'Brazil', 'Russia', 'India', 'United Kingdom', 'Peru', 'Chile', 'Spain', 'Italy', 'Iran', 'France', 
              'Germany', 'Turkey', 'Mexico', 'South Africa', 'China', 'Sweden', 'Singapore', 'Korea, South', 'Slovenia',
              'New Zealand', 'Vietnam', 'Taiwan*', 'Cambodia', 'Laos']


df_new_mitig = df_new_mitig.loc[df_new_mitig.Country.isin(Country_25)]
df_new_mitig


# In[72]:


df_new_mitig.Country.unique()


# In[73]:


df_new_mitig.Country.nunique()


# In[74]:


# line chart with country and mitigation as drop down 

fig_5_all = go.Figure()

fig_5_all.add_trace(
    go.Scatter(x=df_new_mitig.loc[df_new_mitig['Country'] == 'US', 'Date'].tolist(),
               y=df_new_mitig.loc[df_new_mitig['Country'] == 'US', 'Total_case'].tolist(),
               name="US", line=dict(color="#ffc60a")))

fig_5_all.add_trace(
    go.Scatter(x=df_new_mitig.loc[df_new_mitig['Country'] == 'Brazil', 'Date'].tolist(),
               y=df_new_mitig.loc[df_new_mitig['Country'] == 'Brazil', 'Total_case'].tolist(),
               name="Brazil", line=dict(color="#3366cc")))

fig_5_all.add_trace(
    go.Scatter(x=df_new_mitig.loc[df_new_mitig['Country'] == 'Russia', 'Date'].tolist(),
               y=df_new_mitig.loc[df_new_mitig['Country'] == 'Russia', 'Total_case'].tolist(),
               name="Russia", line=dict(color="#F06A6A")))

fig_5_all.add_trace(
    go.Scatter(x=df_new_mitig.loc[df_new_mitig['Country'] == 'India', 'Date'].tolist(),
               y=df_new_mitig.loc[df_new_mitig['Country'] == 'India', 'Total_case'].tolist(),
               name="India", line=dict(color="#33CFA5")))

fig_5_all.add_trace(
    go.Scatter(x=df_new_mitig.loc[df_new_mitig['Country'] == 'United Kingdom', 'Date'].tolist(),
               y=df_new_mitig.loc[df_new_mitig['Country'] == 'United Kingdom', 'Total_case'].tolist(),
               name="United Kingdom", line=dict(color="#F06A6A")))

fig_5_all.add_trace(
    go.Scatter(x=df_new_mitig.loc[df_new_mitig['Country'] == 'Peru', 'Date'].tolist(),
               y=df_new_mitig.loc[df_new_mitig['Country'] == 'Peru', 'Total_case'].tolist(),
               name="Peru", line=dict(color="#3366cc")))

fig_5_all.add_trace(
    go.Scatter(x=df_new_mitig.loc[df_new_mitig['Country'] == 'Chile', 'Date'].tolist(),
               y=df_new_mitig.loc[df_new_mitig['Country'] == 'Chile', 'Total_case'].tolist(),
               name="Chile", line=dict(color="#3366cc")))

fig_5_all.add_trace(
    go.Scatter(x=df_new_mitig.loc[df_new_mitig['Country'] == 'Spain', 'Date'].tolist(),
               y=df_new_mitig.loc[df_new_mitig['Country'] == 'Spain', 'Total_case'].tolist(),
               name="Spain", line=dict(color="#F06A6A")))

fig_5_all.add_trace(
    go.Scatter(x=df_new_mitig.loc[df_new_mitig['Country'] == 'Italy', 'Date'].tolist(),
               y=df_new_mitig.loc[df_new_mitig['Country'] == 'Italy', 'Total_case'].tolist(),
               name="Italy", line=dict(color="#F06A6A")))

fig_5_all.add_trace(
    go.Scatter(x=df_new_mitig.loc[df_new_mitig['Country'] == 'Iran', 'Date'].tolist(),
               y=df_new_mitig.loc[df_new_mitig['Country'] == 'Iran', 'Total_case'].tolist(),
               name="Iran", line=dict(color="#9acd32")))

fig_5_all.add_trace(
    go.Scatter(x=df_new_mitig.loc[df_new_mitig['Country'] == 'France', 'Date'].tolist(),
               y=df_new_mitig.loc[df_new_mitig['Country'] == 'France', 'Total_case'].tolist(),
               name="France", line=dict(color="#F06A6A")))

fig_5_all.add_trace(
    go.Scatter(x=df_new_mitig.loc[df_new_mitig['Country'] == 'Germany', 'Date'].tolist(),
               y=df_new_mitig.loc[df_new_mitig['Country'] == 'Germany', 'Total_case'].tolist(),
               name="Germany", line=dict(color="#F06A6A")))

fig_5_all.add_trace(
    go.Scatter(x=df_new_mitig.loc[df_new_mitig['Country'] == 'Turkey', 'Date'].tolist(),
               y=df_new_mitig.loc[df_new_mitig['Country'] == 'Turkey', 'Total_case'].tolist(),
               name="Turkey", line=dict(color="#9acd32")))

fig_5_all.add_trace(
    go.Scatter(x=df_new_mitig.loc[df_new_mitig['Country'] == 'Mexico', 'Date'].tolist(),
               y=df_new_mitig.loc[df_new_mitig['Country'] == 'Mexico', 'Total_case'].tolist(),
               name="Mexico", line=dict(color="#3366cc")))

fig_5_all.add_trace(
    go.Scatter(x=df_new_mitig.loc[df_new_mitig['Country'] == 'South Africa', 'Date'].tolist(),
               y=df_new_mitig.loc[df_new_mitig['Country'] == 'South Africa', 'Total_case'].tolist(),
               name="South Africa", line=dict(color="#0FDCF7")))

fig_5_all.add_trace(
    go.Scatter(x=df_new_mitig.loc[df_new_mitig['Country'] == 'China', 'Date'].tolist(),
               y=df_new_mitig.loc[df_new_mitig['Country'] == 'China', 'Total_case'].tolist(),
               name="China", line=dict(color="#33CFA5")))

fig_5_all.add_trace(
    go.Scatter(x=df_new_mitig.loc[df_new_mitig['Country'] == 'Sweden', 'Date'].tolist(),
               y=df_new_mitig.loc[df_new_mitig['Country'] == 'Sweden', 'Total_case'].tolist(),
               name="Sweden", line=dict(color="#F06A6A")))

fig_5_all.add_trace(
    go.Scatter(x=df_new_mitig.loc[df_new_mitig['Country'] == 'Singapore', 'Date'].tolist(),
               y=df_new_mitig.loc[df_new_mitig['Country'] == 'Singapore', 'Total_case'].tolist(),
               name="Singapore", line=dict(color="#33CFA5")))

fig_5_all.add_trace(
    go.Scatter(x=df_new_mitig.loc[df_new_mitig['Country'] == 'Korea, South', 'Date'].tolist(),
               y=df_new_mitig.loc[df_new_mitig['Country'] == 'Korea, South', 'Total_case'].tolist(),
               name="Korea, South", line=dict(color="#33CFA5")))

fig_5_all.add_trace(
    go.Scatter(x=df_new_mitig.loc[df_new_mitig['Country'] == 'Slovenia', 'Date'].tolist(),
               y=df_new_mitig.loc[df_new_mitig['Country'] == 'Slovenia', 'Total_case'].tolist(),
               name="Slovenia", line=dict(color="#F06A6A")))

fig_5_all.add_trace(
    go.Scatter(x=df_new_mitig.loc[df_new_mitig['Country'] == 'New Zealand', 'Date'].tolist(),
               y=df_new_mitig.loc[df_new_mitig['Country'] == 'New Zealand', 'Total_case'].tolist(),
               name="New Zealand", line=dict(color="#FF00FF")))

fig_5_all.add_trace(
    go.Scatter(x=df_new_mitig.loc[df_new_mitig['Country'] == 'Taiwan*', 'Date'].tolist(),
               y=df_new_mitig.loc[df_new_mitig['Country'] == 'Taiwan*', 'Total_case'].tolist(),
               name="Taiwan*", line=dict(color="#33CFA5")))

fig_5_all.add_trace(
    go.Scatter(x=df_new_mitig.loc[df_new_mitig['Country'] == 'Vietnam', 'Date'].tolist(),
               y=df_new_mitig.loc[df_new_mitig['Country'] == 'Vietnam', 'Total_case'].tolist(),
               name="Vietnam", line=dict(color="#33CFA5")))

fig_5_all.add_trace(
    go.Scatter(x=df_new_mitig.loc[df_new_mitig['Country'] == 'Cambodia', 'Date'].tolist(),
               y=df_new_mitig.loc[df_new_mitig['Country'] == 'Cambodia', 'Total_case'].tolist(),
               name="Cambodia", line=dict(color="#33CFA5")))

fig_5_all.add_trace(
    go.Scatter(x=df_new_mitig.loc[df_new_mitig['Country'] == 'Laos', 'Date'].tolist(),
               y=df_new_mitig.loc[df_new_mitig['Country'] == 'Laos', 'Total_case'].tolist(),
               name="Laos", line=dict(color="#33CFA5")))

fig_5_all.update_layout(
    updatemenus=[
        dict(
            active=0,
            buttons=list([
                dict(label="All Countries",
                     method="update",
                     args=[{"visible": [True, True, True, True, True, True, True, True, True, True, True, True, True,
                                        True, True, True, True, True, True, True, True, True, True, True, True]},
                           {"title": "COVID-19 Trend with Mitigations in 25 countries", "annotations": []}]),                
                dict(label="US",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, False, False, False, False, False, False, False, False,
                                        False, False, False, False, False, False, False, False, False, False, False, False]},
                           {"title": "COVID-19 Trend with Mitigations in US", "annotations": []}]),
                dict(label="Brazil",
                     method="update",
                     args=[{"visible": [False, True, False, False, False, False, False, False, False, False, False, False, False,
                                        False, False, False, False, False, False, False, False, False, False, False, False]},
                           {"title": "COVID-19 Trend with Mitigations in Brazil", "annotations": []}]),
                dict(label="Russia",
                     method="update",
                     args=[{"visible": [False, False, True, False, False, False, False, False, False, False, False, False, False,
                                        False, False, False, False, False, False, False, False, False, False, False, False]},
                           {"title": "COVID-19 Trend with Mitigations in Russia", "annotations": []}]),
                dict(label="India",
                     method="update",
                     args=[{"visible": [False, False, False, True, False, False, False, False, False, False, False, False, False,
                                        False, False, False, False, False, False, False, False, False, False, False, False]},
                           {"title": "COVID-19 Trend with Mitigations in India", "annotations": []}]),
                dict(label="United Kingdom",
                     method="update",
                     args=[{"visible": [False, False, False, False, True, False, False, False, False, False, False, False, False,
                                        False, False, False, False, False, False, False, False, False, False, False, False]},
                           {"title": "COVID-19 Trend with Mitigations in United Kingdom", "annotations": []}]),
                dict(label="Peru",
                     method="update",
                     args=[{"visible": [False, False, False, False, False, True, False, False, False, False, False, False, False,
                                        False, False, False, False, False, False, False, False, False, False, False, False]},
                           {"title": "COVID-19 Trend with Mitigations in Peru", "annotations": []}]),
                dict(label="Chile",
                     method="update",
                     args=[{"visible": [False, False, False, False, False, False, True, False, False, False, False, False, False,
                                        False, False, False, False, False, False, False, False, False, False, False, False]},
                           {"title": "COVID-19 Trend with Mitigations in Chile", "annotations": []}]),
                dict(label="Spain",
                     method="update",
                     args=[{"visible": [False, False, False, False, False, False, False, True, False, False, False, False, False,
                                        False, False, False, False, False, False, False, False, False, False, False, False]},
                           {"title": "COVID-19 Trend with Mitigations in Spain", "annotations": []}]),
                dict(label="Italy",
                     method="update",
                     args=[{"visible": [False, False, False, False, False, False, False, False, True, False, False, False, False,
                                        False, False, False, False, False, False, False, False, False, False, False, False]},
                           {"title": "COVID-19 Trend with Mitigations in Italy", "annotations": []}]),
                dict(label="Iran",
                     method="update",
                     args=[{"visible": [False, False, False, False, False, False, False, False, False, True, False, False, False,
                                        False, False, False, False, False, False, False, False, False, False, False, False]},
                           {"title": "COVID-19 Trend with Mitigations in Iran", "annotations": []}]),
                dict(label="France",
                     method="update",
                     args=[{"visible": [False, False, False, False, False, False, False, False, False, False, True, False, False,
                                        False, False, False, False, False, False, False, False, False, False, False, False]},
                           {"title": "COVID-19 Trend with Mitigations in France", "annotations": []}]),             
                dict(label="Germany",
                     method="update",
                     args=[{"visible": [False, False, False, False, False, False, False, False, False, False, False, True, False,
                                        False, False, False, False, False, False, False, False, False, False, False, False]},
                           {"title": "COVID-19 Trend with Mitigations in Germany", "annotations": []}]),
                dict(label="Turkey",
                     method="update",
                     args=[{"visible": [False, False, False, False, False, False, False, False, False, False, False, False, True,
                                        False, False, False, False, False, False, False, False, False, False, False, False]},
                           {"title": "COVID-19 Trend with Mitigations in Turkey", "annotations": []}]),
                dict(label="Mexico",
                     method="update",
                     args=[{"visible": [False, False, False, False, False, False, False, False, False, False, False, False, False,
                                        True, False, False, False, False, False, False, False, False, False, False, False]},
                           {"title": "COVID-19 Trend with Mitigations in Mexico", "annotations": []}]),
                dict(label="South Africa",
                     method="update",
                     args=[{"visible": [False, False, False, False, False, False, False, False, False, False, False, False, False, 
                                        False, True, False, False, False, False, False, False, False, False, False, False]},
                           {"title": "COVID-19 Trend with Mitigations in South Africa", "annotations": []}]),
                dict(label="China",
                     method="update",
                     args=[{"visible": [False, False, False, False, False, False, False, False, False, False, False, False, False, 
                                        False, False, True, False, False, False, False, False, False, False, False, False]},
                           {"title": "COVID-19 Trend with Mitigations in China", "annotations": []}]),
                dict(label="Sweden",
                     method="update",
                     args=[{"visible": [False, False, False, False, False, False, False, False, False, False, False, False, False, 
                                        False, False, False, True, False, False, False, False, False, False, False, False]},
                           {"title": "COVID-19 Trend with Mitigations in Sweden", "annotations": []}]),
                dict(label="Singapore",
                     method="update",
                     args=[{"visible": [False, False, False, False, False, False, False, False, False, False, False, False, False,  
                                        False, False, False, False, True, False, False, False, False, False, False, False]},
                           {"title": "COVID-19 Trend with Mitigations in Singapore", "annotations": []}]),
                dict(label="Korea, South",
                     method="update",
                     args=[{"visible": [False, False, False, False, False, False, False, False, False, False, False, False, False, 
                                        False, False, False, False, False, True, False, False, False, False, False, False]},
                           {"title": "COVID-19 Trend with Mitigations in Korea, South", "annotations": []}]),
                dict(label="Slovenia",
                     method="update",
                     args=[{"visible": [False, False, False, False, False, False, False, False, False, False, False, False, False, 
                                        False, False, False, False, False, False, True, False, False, False, False, False]},
                           {"title": "COVID-19 Trend with Mitigations in Slovenia", "annotations": []}]),
                dict(label="New Zealand",
                     method="update",
                     args=[{"visible": [False, False, False, False, False, False, False, False, False, False, False, False, False, 
                                        False, False, False, False, False, False, False, True, False, False, False, False]},
                           {"title": "COVID-19 Trend with Mitigations in New Zealand", "annotations": []}]),
                dict(label="Taiwan*",
                     method="update",
                     args=[{"visible": [False, False, False, False, False, False, False, False, False, False, False, False, False, 
                                        False, False, False, False, False, False, False, False, True, False, False, False]},
                           {"title": "COVID-19 Trend with Mitigations in Taiwan*", "annotations": []}]),
                dict(label="Vietnam",
                     method="update",
                     args=[{"visible": [False, False, False, False, False, False, False, False, False, False, False, False, False, 
                                        False, False, False, False, False, False, False, False, False, True, False, False]},
                           {"title": "COVID-19 Trend with Mitigations in Vietnam", "annotations": []}]),
                dict(label="Cambodia",
                     method="update",
                     args=[{"visible": [False, False, False, False, False, False, False, False, False, False, False, False, False, 
                                        False, False, False, False, False, False, False, False, False, False, True, False]},
                           {"title": "COVID-19 Trend with Mitigations in Cambodia", "annotations": []}]),
                dict(label="Laos",
                     method="update",
                     args=[{"visible": [False, False, False, False, False, False, False, False, False, False, False, False, False, 
                                        False, False, False, False, False, False, False, False, False, False, False, True]},
                           {"title": "COVID-19 Trend with Mitigations in Laos", "annotations": []}]),
            ]),
        )
    ])



fig_5_all.update_layout(
    annotations=[
        dict(text="Country", x=-0.25, xref="paper", y=1.06, yref="paper", align="left", showarrow=False)],
    title_text="COVID-19 Total Confirmed Cases Trend in 25 Countries", xaxis =dict(showticklabels = True,
      tickangle = 45)
)

fig_5_all.show()


# In[75]:


#Save the figure as html
pio.write_html(fig_5_all, file='C:/Users/yeaji/Documents/UMBC/Classes/Data606/Figure/fig_5_all.html', auto_open=True)


# In[76]:


#Save as png
fig_5_all.write_image("C:/Users/yeaji/Documents/UMBC/Classes/Data606/Figure/fig_5_all.png")


# In[77]:


#US total case with mitigation dates

fig_5_US = go.Figure()

fig_5_US.add_trace(
    go.Scatter(x=df_new_mitig.loc[df_new_mitig['Country'] == 'US', 'Date'].tolist(),
               y=df_new_mitig.loc[df_new_mitig['Country'] == 'US', 'Total_case'].tolist(),
               name="US", line=dict(color="#ffc60a")))


C1 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/05/2020', y0=0,
           x1='03/05/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dash'))]
C2 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/19/2020', y0=0,
           x1='03/19/2020', y1=1,
           line=dict(color="Crimson", dash= 'dash')), 
      dict(type="line",
           xref="x", yref="paper",
           x0='06/15/2020', y0=0,
           x1='06/15/2020', y1=1,
           line=dict(color="Crimson", dash= 'dashdot'))]
C3 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/12/2020', y0=0,
           x1='03/12/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/01/2020', y0=0,
           x1='03/01/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dot'))]
C4 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/12/2020', y0=0,
           x1='03/12/2020', y1=1,
           line=dict(color="RoyalBlue", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/11/2020', y0=0,
           x1='03/11/2020', y1=1,
           line=dict(color="RoyalBlue", dash= 'dot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/21/2020', y0=0,
           x1='03/21/2020', y1=1,
           line=dict(color="RoyalBlue"))]
C5 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/17/2020', y0=0,
           x1='03/17/2020', y1=1,
           line=dict(color="LightSeaGreen", dash= 'dot'))]
C6 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/15/2020', y0=0,
           x1='03/15/2020', y1=1,
           line=dict(color="MediumPurple", dash= 'dashdot'))]
C7 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/19/2020', y0=0,
           x1='03/19/2020', y1=1,
           line=dict(color="LightSkyBlue", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/14/2020', y0=0,
           x1='03/14/2020', y1=1,
           line=dict(color="LightSkyBlue", dash= 'dot'))]
C8 = [dict(type="line",
           xref="x", yref="paper",
           x0='02/02/2020', y0=0,
           x1='02/02/2020', y1=1,
           line=dict(color="Yellowgreen", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/02/2020', y0=0,
           x1='03/02/2020', y1=1,
           line=dict(color="Yellowgreen", dash= 'dash'))]
E1 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/27/2020', y0=0,
           x1='03/27/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dashdot'))]
E2 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/27/2020', y0=0,
           x1='03/27/2020', y1=1,
           line=dict(color="Crimson", dash= 'dot'))]
H1 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/16/2020', y0=0,
           x1='03/16/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dashdot'))]
H2 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/14/2020', y0=0,
           x1='03/14/2020', y1=1,
           line=dict(color="Crimson", dash= 'dash')), 
      dict(type="line",
           xref="x", yref="paper",
           x0='03/04/2020', y0=0,
           x1='03/04/2020', y1=1,
           line=dict(color="Crimson", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='02/28/2020', y0=0,
           x1='02/28/2020', y1=1,
           line=dict(color="Crimson", dash= 'dot'))]
H3 = [dict(type="line",
           xref="x", yref="paper",
           x0='01/21/2020', y0=0,
           x1='01/21/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dot'))]

fig_5_US.update_layout(
    updatemenus=[
        dict(buttons=list([
            dict(label="None",
                 method="relayout",
                 args=["shapes", []]),
            dict(label="Close school",
                 method="relayout",
                 args=["shapes", C1]),
            dict(label="Close workplace",
                 method="relayout",
                 args=["shapes", C2]),
            dict(label="Cancel public events",
                 method="relayout",
                 args=["shapes", C3]),
            dict(label="Restrict gatherings",
                 method="relayout",
                 args=["shapes", C4]),
            dict(label="Close public transport",
                 method="relayout",
                 args=["shapes", C5]),
            dict(label="Stay at home order",
                 method="relayout",
                 args=["shapes", C6]),
            dict(label="Restrict internal move",
                 method="relayout",
                 args=["shapes", C7]),
            dict(label="Control int. travel",
                 method="relayout",
                 args=["shapes", C8]),
            dict(label="Income support",
                 method="relayout",
                 args=["shapes", E1]),
            dict(label="Debt/contract relief",
                 method="relayout",
                 args=["shapes", E2]),
            dict(label="Public info. campaigns",
                 method="relayout",
                 args=["shapes", H1]),
            dict(label="Testing policy",
                 method="relayout",
                 args=["shapes", H2]),
            dict(label="Contact tracing",
                 method="relayout",
                 args=["shapes", H3]),
            dict(label="All",
                 method="relayout",
                 args=["shapes", C1 + C2 + C3 + C4 + C5 + C6 + C7 + C8 + E1 + E2 + H1 + H2 + H3])
        ]),
        )
    ]
)

fig_5_US.update_layout(
    annotations=[
        dict(text="Mitigation Type", x=-0.30, xref="paper", y=1.06, yref="paper",
                             align="left", showarrow=False)],
    title_text="US COVID-19 Trend with Mitigation Dates", showlegend=False,
    xaxis =dict(showticklabels = True, tickangle = 45)
)

fig_5_US.show()


# In[78]:


#Save the figure as html
pio.write_html(fig_5_US, file='C:/Users/yeaji/Documents/UMBC/Classes/Data606/Figure/fig_5_US.html', auto_open=True)


# In[79]:


#Save as png 
fig_5_US.write_image("C:/Users/yeaji/Documents/UMBC/Classes/Data606/Figure/fig_5_US.png")


# In[80]:


#New Zealand total case with mitigation dates

fig_5_NZ = go.Figure()

fig_5_NZ.add_trace(
    go.Scatter(x=df_new_mitig.loc[df_new_mitig['Country'] == 'New Zealand', 'Date'].tolist(),
               y=df_new_mitig.loc[df_new_mitig['Country'] == 'New Zealand', 'Total_case'].tolist(),
               name="New Zealand", mode = 'lines', line=dict(color="#FF00FF")))


C1 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/24/2020', y0=0,
           x1='03/24/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dash')),
      dict(type="line",
           xref="x", yref="paper",
           x0='04/29/2020', y0=0,
           x1='04/29/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dashdot'))]
C2 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/25/2020', y0=0,
           x1='03/25/2020', y1=1,
           line=dict(color="Crimson", dash= 'dash')), 
      dict(type="line",
           xref="x", yref="paper",
           x0='03/23/2020', y0=0,
           x1='03/23/2020', y1=1,
           line=dict(color="Crimson", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/21/2020', y0=0,
           x1='03/21/2020', y1=1,
           line=dict(color="Crimson", dash= 'dot'))]
C3 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/16/2020', y0=0,
           x1='03/16/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='05/14/2020', y0=0,
           x1='05/14/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dot'))]
C4 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/16/2020', y0=0,
           x1='03/16/2020', y1=1,
           line=dict(color="RoyalBlue", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/21/2020', y0=0,
           x1='03/21/2020', y1=1,
           line=dict(color="RoyalBlue", dash= 'dash')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/23/2020', y0=0,
           x1='03/23/2020', y1=1,
           line=dict(color="RoyalBlue"))]
C5 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/23/2020', y0=0,
           x1='03/23/2020', y1=1,
           line=dict(color="LightSeaGreen", dash= 'dot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/26/2020', y0=0,
           x1='03/26/2020', y1=1,
           line=dict(color="LightSeaGreen", dash= 'dashdot'))]
C6 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/23/2020', y0=0,
           x1='03/23/2020', y1=1,
           line=dict(color="MediumPurple", dash= 'dashdot')),
     dict(type="line",
           xref="x", yref="paper",
           x0='03/21/2020', y0=0,
           x1='03/21/2020', y1=1,
           line=dict(color="MediumPurple", dash= 'dot'))]
C7 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/23/2020', y0=0,
           x1='03/23/2020', y1=1,
           line=dict(color="LightSkyBlue", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/21/2020', y0=0,
           x1='03/21/2020', y1=1,
           line=dict(color="LightSkyBlue", dash= 'dot'))]
C8 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/20/2020', y0=0,
           x1='03/20/2020', y1=1,
           line=dict(color="Yellowgreen")),
      dict(type="line",
           xref="x", yref="paper",
           x0='02/02/2020', y0=0,
           x1='02/02/2020', y1=1,
           line=dict(color="Yellowgreen", dash= 'dash'))]
E1 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/17/2020', y0=0,
           x1='03/17/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dashdot'))]
E2 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/24/2020', y0=0,
           x1='03/24/2020', y1=1,
           line=dict(color="Crimson", dash= 'dot'))]
H1 = [dict(type="line",
           xref="x", yref="paper",
           x0='01/22/2020', y0=0,
           x1='01/22/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dashdot'))]
H2 = [dict(type="line",
           xref="x", yref="paper",
           x0='04/01/2020', y0=0,
           x1='04/01/2020', y1=1,
           line=dict(color="Crimson", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='02/28/2020', y0=0,
           x1='02/28/2020', y1=1,
           line=dict(color="Crimson", dash= 'dot'))]
H3 = [dict(type="line",
           xref="x", yref="paper",
           x0='02/28/2020', y0=0,
           x1='02/28/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dashdot'))]

fig_5_NZ.update_layout(
    updatemenus=[
        dict(buttons=list([
            dict(label="None",
                 method="relayout",
                 args=["shapes", []]),
            dict(label="Close school",
                 method="relayout",
                 args=["shapes", C1]),
            dict(label="Close workplace",
                 method="relayout",
                 args=["shapes", C2]),
            dict(label="Cancel public events",
                 method="relayout",
                 args=["shapes", C3]),
            dict(label="Restrict gatherings",
                 method="relayout",
                 args=["shapes", C4]),
            dict(label="Close public transport",
                 method="relayout",
                 args=["shapes", C5]),
            dict(label="Stay at home order",
                 method="relayout",
                 args=["shapes", C6]),
            dict(label="Restrict internal move",
                 method="relayout",
                 args=["shapes", C7]),
            dict(label="Control int. travel",
                 method="relayout",
                 args=["shapes", C8]),
            dict(label="Income support",
                 method="relayout",
                 args=["shapes", E1]),
            dict(label="Debt/contract relief",
                 method="relayout",
                 args=["shapes", E2]),
            dict(label="Public info. campaigns",
                 method="relayout",
                 args=["shapes", H1]),
            dict(label="Testing policy",
                 method="relayout",
                 args=["shapes", H2]),
            dict(label="Contact tracing",
                 method="relayout",
                 args=["shapes", H3]),
            dict(label="All",
                 method="relayout",
                 args=["shapes", C1 + C2 + C3 + C4 + C5 + C6 + C7 + C8 + E1 + E2 + H1 + H2 + H3])
        ]),
        )
    ]
)

fig_5_NZ.update_layout(
    annotations=[
        dict(text="Mitigation Type", x=-0.30, xref="paper", y=1.06, yref="paper",
                             align="left", showarrow=False)],
    title_text="New Zealand COVID-19 Trend with Mitigation Dates", showlegend=False,
    xaxis =dict(showticklabels = True, tickangle = 45)
)

fig_5_NZ.show()


# In[81]:


#Save the figure as html
pio.write_html(fig_5_NZ, file='C:/Users/yeaji/Documents/UMBC/Classes/Data606/Figure/fig_5_NZ.html', auto_open=True)


# In[82]:


#Korea, South case with mitigation dates

fig_5_SK = go.Figure()

fig_5_SK.add_trace(
    go.Scatter(x=df_new_mitig.loc[df_new_mitig['Country'] == 'Korea, South', 'Date'].tolist(),
               y=df_new_mitig.loc[df_new_mitig['Country'] == 'Korea, South', 'Total_case'].tolist(),
               name="Korea, South", line=dict(color="#33CFA5")))


C1 = [dict(type="line",
           xref="x", yref="paper",
           x0='02/06/2020', y0=0,
           x1='02/06/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dash')),
      dict(type="line",
           xref="x", yref="paper",
           x0='02/03/2020', y0=0,
           x1='02/03/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dashdot'))]
C2 = [dict(type="line",
           xref="x", yref="paper",
           x0='04/06/2020', y0=0,
           x1='04/06/2020', y1=1,
           line=dict(color="Crimson", dash= 'dash')), 
      dict(type="line",
           xref="x", yref="paper",
           x0='03/22/2020', y0=0,
           x1='03/22/2020', y1=1,
           line=dict(color="Crimson", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='02/24/2020', y0=0,
           x1='02/24/2020', y1=1,
           line=dict(color="Crimson", dash= 'dot'))]
C3 = [dict(type="line",
           xref="x", yref="paper",
           x0='02/21/2020', y0=0,
           x1='02/21/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='01/31/2020', y0=0,
           x1='01/31/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dot'))]
C4 = [dict(type="line",
           xref="x", yref="paper",
           x0='02/21/2020', y0=0,
           x1='02/21/2020', y1=1,
           line=dict(color="RoyalBlue", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/22/2020', y0=0,
           x1='03/22/2020', y1=1,
           line=dict(color="RoyalBlue", dash= 'dash')),
      dict(type="line",
           xref="x", yref="paper",
           x0='04/04/2020', y0=0,
           x1='04/04/2020', y1=1,
           line=dict(color="RoyalBlue"))]
C6 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/21/2020', y0=0,
           x1='03/21/2020', y1=1,
           line=dict(color="MediumPurple", dash= 'dashdot')),
     dict(type="line",
           xref="x", yref="paper",
           x0='02/23/2020', y0=0,
           x1='02/23/2020', y1=1,
           line=dict(color="MediumPurple", dash= 'dot'))]
C7 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/21/2020', y0=0,
           x1='03/21/2020', y1=1,
           line=dict(color="LightSkyBlue", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='02/23/2020', y0=0,
           x1='02/23/2020', y1=1,
           line=dict(color="LightSkyBlue", dash= 'dot'))]
C8 = [dict(type="line",
           xref="x", yref="paper",
           x0='02/04/2020', y0=0,
           x1='02/04/2020', y1=1,
           line=dict(color="Yellowgreen", dash= 'dash'))]
E1 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/30/2020', y0=0,
           x1='03/30/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dot'))]
E2 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/17/2020', y0=0,
           x1='03/17/2020', y1=1,
           line=dict(color="Crimson", dash= 'dot'))]
H1 = [dict(type="line",
           xref="x", yref="paper",
           x0='02/01/2020', y0=0,
           x1='02/01/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dashdot'))]
H2 = [dict(type="line",
           xref="x", yref="paper",
           x0='02/07/2020', y0=0,
           x1='02/07/2020', y1=1,
           line=dict(color="Crimson", dash= 'dash')), 
      dict(type="line",
           xref="x", yref="paper",
           x0='01/21/2020', y0=0,
           x1='01/21/2020', y1=1,
           line=dict(color="Crimson", dash= 'dot'))]
H3 = [dict(type="line",
           xref="x", yref="paper",
           x0='01/29/2020', y0=0,
           x1='01/29/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='02/11/2020', y0=0,
           x1='02/11/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dashdot'))]


fig_5_SK.update_layout(
    updatemenus=[
        dict(buttons=list([
            dict(label="None",
                 method="relayout",
                 args=["shapes", []]),
            dict(label="Close school",
                 method="relayout",
                 args=["shapes", C1]),
            dict(label="Close workplace",
                 method="relayout",
                 args=["shapes", C2]),
            dict(label="Cancel public events",
                 method="relayout",
                 args=["shapes", C3]),
            dict(label="Restrict gatherings",
                 method="relayout",
                 args=["shapes", C4]),
            dict(label="Stay at home order",
                 method="relayout",
                 args=["shapes", C6]),
            dict(label="Restrict internal move",
                 method="relayout",
                 args=["shapes", C7]),
            dict(label="Control int. travel",
                 method="relayout",
                 args=["shapes", C8]),
            dict(label="Income support",
                 method="relayout",
                 args=["shapes", E1]),
            dict(label="Debt/contract relief",
                 method="relayout",
                 args=["shapes", E2]),
            dict(label="Public info. campaigns",
                 method="relayout",
                 args=["shapes", H1]),
            dict(label="Testing policy",
                 method="relayout",
                 args=["shapes", H2]),
            dict(label="Contact tracing",
                 method="relayout",
                 args=["shapes", H3]),
            dict(label="All",
                 method="relayout",
                 args=["shapes", C1 + C2 + C3 + C4 + C6 + C7 + C8 + E1 + E2 + H1 + H2 + H3])
        ]),
        )
    ]
)

fig_5_SK.update_layout(
    annotations=[
        dict(text="Mitigation Type", x=-0.30, xref="paper", y=1.06, yref="paper",
                             align="left", showarrow=False)],
    title_text="South Korea COVID-19 Trend with Mitigation Dates", showlegend=False,
    xaxis =dict(showticklabels = True, tickangle = 45)
)

fig_5_SK.show()


# In[83]:


#Save the figure as html
pio.write_html(fig_5_SK, file='C:/Users/yeaji/Documents/UMBC/Classes/Data606/Figure/fig_5_SK.html', auto_open=True)


# In[84]:


#Brazil case with mitigation dates

fig_5_BR = go.Figure()

fig_5_BR.add_trace(
    go.Scatter(x=df_new_mitig.loc[df_new_mitig['Country'] == 'Brazil', 'Date'].tolist(),
               y=df_new_mitig.loc[df_new_mitig['Country'] == 'Brazil', 'Total_case'].tolist(),
               name="Brazil", line=dict(color="#3366cc")))

C1 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/12/2020', y0=0,
           x1='03/12/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dash'))]
C2 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/17/2020', y0=0,
           x1='03/17/2020', y1=1,
           line=dict(color="Crimson", dash= 'dash')), 
      dict(type="line",
           xref="x", yref="paper",
           x0='06/01/2020', y0=0,
           x1='06/01/2020', y1=1,
           line=dict(color="Crimson", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/13/2020', y0=0,
           x1='03/13/2020', y1=1,
           line=dict(color="Crimson", dash= 'dot'))]
C3 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/12/2020', y0=0,
           x1='03/12/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dashdot'))]
C4 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/14/2020', y0=0,
           x1='03/14/2020', y1=1,
           line=dict(color="RoyalBlue", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/18/2020', y0=0,
           x1='03/18/2020', y1=1,
           line=dict(color="RoyalBlue", dash= 'dash')),
      dict(type="line",
           xref="x", yref="paper",
           x0='04/26/2020', y0=0,
           x1='04/26/2020', y1=1,
           line=dict(color="RoyalBlue"))]
C5 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/19/2020', y0=0,
           x1='03/19/2020', y1=1,
           line=dict(color="LightSeaGreen", dash= 'dot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/21/2020', y0=0,
           x1='03/21/2020', y1=1,
           line=dict(color="LightSeaGreen", dash= 'dashdot'))]
C6 = [dict(type="line",
           xref="x", yref="paper",
           x0='05/05/2020', y0=0,
           x1='05/05/2020', y1=1,
           line=dict(color="MediumPurple", dash= 'dashdot')),
     dict(type="line",
           xref="x", yref="paper",
           x0='03/13/2020', y0=0,
           x1='03/13/2020', y1=1,
           line=dict(color="MediumPurple", dash= 'dot'))]
C7 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/17/2020', y0=0,
           x1='03/17/2020', y1=1,
           line=dict(color="LightSkyBlue", dash= 'dashdot'))]
C8 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/19/2020', y0=0,
           x1='03/19/2020', y1=1,
           line=dict(color="Yellowgreen", dash= 'dash')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/13/2020', y0=0,
           x1='03/13/2020', y1=1,
           line=dict(color="Yellowgreen", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/27/2020', y0=0,
           x1='03/27/2020', y1=1,
           line=dict(color="Yellowgreen"))]
E1 = [dict(type="line",
           xref="x", yref="paper",
           x0='04/02/2020', y0=0,
           x1='04/02/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dot'))]
E2 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/17/2020', y0=0,
           x1='03/17/2020', y1=1,
           line=dict(color="Crimson", dash= 'dot'))]
H1 = [dict(type="line",
           xref="x", yref="paper",
           x0='01/29/2020', y0=0,
           x1='01/29/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/02/2020', y0=0,
           x1='03/02/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dashdot'))]
H2 = [dict(type="line",
           xref="x", yref="paper",
           x0='05/25/2020', y0=0,
           x1='05/25/2020', y1=1,
           line=dict(color="Crimson", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='01/23/2020', y0=0,
           x1='01/23/2020', y1=1,
           line=dict(color="Crimson", dash= 'dot'))]

fig_5_BR.update_layout(
    updatemenus=[
        dict(buttons=list([
            dict(label="None",
                 method="relayout",
                 args=["shapes", []]),
            dict(label="Close school",
                 method="relayout",
                 args=["shapes", C1]),
            dict(label="Close workplace",
                 method="relayout",
                 args=["shapes", C2]),
            dict(label="Cancel public events",
                 method="relayout",
                 args=["shapes", C3]),
            dict(label="Restrict gatherings",
                 method="relayout",
                 args=["shapes", C4]),
            dict(label="Close public transport",
                 method="relayout",
                 args=["shapes", C5]),
            dict(label="Stay at home order",
                 method="relayout",
                 args=["shapes", C6]),
            dict(label="Restrict internal move",
                 method="relayout",
                 args=["shapes", C7]),
            dict(label="Control int. travel",
                 method="relayout",
                 args=["shapes", C8]),
            dict(label="Income support",
                 method="relayout",
                 args=["shapes", E1]),
            dict(label="Debt/contract relief",
                 method="relayout",
                 args=["shapes", E2]),
            dict(label="Public info. campaigns",
                 method="relayout",
                 args=["shapes", H1]),
            dict(label="Testing policy",
                 method="relayout",
                 args=["shapes", H2]),
            dict(label="All",
                 method="relayout",
                 args=["shapes", C1 + C2 + C3 + C4 + C5 + C6 + C7 + C8 + E1 + E2 + H1 + H2])

        ]),
        )
    ]
)

fig_5_BR.update_layout(
    annotations=[
        dict(text="Mitigation Type", x=-0.30, xref="paper", y=1.06, yref="paper",
                             align="left", showarrow=False)],
    title_text="Brazil COVID-19 Trend with Mitigation Dates", showlegend=False,
    xaxis =dict(showticklabels = True, tickangle = 45)
)

fig_5_BR.show()


# In[85]:


#Save the figure as html
pio.write_html(fig_5_BR, file='C:/Users/yeaji/Documents/UMBC/Classes/Data606/Figure/fig_5_BR.html', auto_open=True)


# In[86]:


#Russia case with mitigation dates

fig_5_RU = go.Figure()

fig_5_RU.add_trace(
    go.Scatter(x=df_new_mitig.loc[df_new_mitig['Country'] == 'Russia', 'Date'].tolist(),
               y=df_new_mitig.loc[df_new_mitig['Country'] == 'Russia', 'Total_case'].tolist(),
               name="Russia", line=dict(color="#F06A6A")))


C1 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/21/2020', y0=0,
           x1='03/21/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dash')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/19/2020', y0=0,
           x1='03/19/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/14/2020', y0=0,
           x1='03/14/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dot'))]
C2 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/30/2020', y0=0,
           x1='03/30/2020', y1=1,
           line=dict(color="Crimson", dash= 'dash')), 
      dict(type="line",
           xref="x", yref="paper",
           x0='03/17/2020', y0=0,
           x1='03/17/2020', y1=1,
           line=dict(color="Crimson", dash= 'dashdot'))]
C3 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/10/2020', y0=0,
           x1='03/10/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dashdot'))]
C4 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/10/2020', y0=0,
           x1='03/10/2020', y1=1,
           line=dict(color="RoyalBlue", dash= 'dot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/16/2020', y0=0,
           x1='03/16/2020', y1=1,
           line=dict(color="RoyalBlue", dash= 'dash')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/30/2020', y0=0,
           x1='03/30/2020', y1=1,
           line=dict(color="RoyalBlue"))]
C5 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/30/2020', y0=0,
           x1='03/30/2020', y1=1,
           line=dict(color="LightSeaGreen", dash= 'dot'))]
C6 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/05/2020', y0=0,
           x1='03/05/2020', y1=1,
           line=dict(color="MediumPurple", dash= 'dashdot')),
     dict(type="line",
           xref="x", yref="paper",
           x0='03/30/2020', y0=0,
           x1='03/30/2020', y1=1,
           line=dict(color="MediumPurple", dash= 'dash'))]
C7 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/05/2020', y0=0,
           x1='03/05/2020', y1=1,
           line=dict(color="LightSkyBlue", dash= 'dashdot'))]
C8 = [dict(type="line",
           xref="x", yref="paper",
           x0='01/30/2020', y0=0,
           x1='01/30/2020', y1=1,
           line=dict(color="Yellowgreen", dash= 'dash')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/30/2020', y0=0,
           x1='03/30/2020', y1=1,
           line=dict(color="Yellowgreen"))]
E2 = [dict(type="line",
           xref="x", yref="paper",
           x0='04/01/2020', y0=0,
           x1='04/01/2020', y1=1,
           line=dict(color="Crimson", dash= 'dashdot'))]
H1 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/16/2020', y0=0,
           x1='03/16/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dashdot'))]
H2 = [dict(type="line",
           xref="x", yref="paper",
           x0='04/06/2020', y0=0,
           x1='04/06/2020', y1=1,
           line=dict(color="Crimson", dash= 'dash')), 
      dict(type="line",
           xref="x", yref="paper",
           x0='01/31/2020', y0=0,
           x1='01/31/2020', y1=1,
           line=dict(color="Crimson", dash= 'dot'))]
H3 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/05/2020', y0=0,
           x1='03/05/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dashdot'))]

fig_5_RU.update_layout(
    updatemenus=[
        dict(buttons=list([
            dict(label="None",
                 method="relayout",
                 args=["shapes", []]),
            dict(label="Close school",
                 method="relayout",
                 args=["shapes", C1]),
            dict(label="Close workplace",
                 method="relayout",
                 args=["shapes", C2]),
            dict(label="Cancel public events",
                 method="relayout",
                 args=["shapes", C3]),
            dict(label="Restrict gatherings",
                 method="relayout",
                 args=["shapes", C4]),
            dict(label="Close public transport",
                 method="relayout",
                 args=["shapes", C5]),
            dict(label="Stay at home order",
                 method="relayout",
                 args=["shapes", C6]),
            dict(label="Restrict internal move",
                 method="relayout",
                 args=["shapes", C7]),
            dict(label="Control int. travel",
                 method="relayout",
                 args=["shapes", C8]),
            dict(label="Debt/contract relief",
                 method="relayout",
                 args=["shapes", E2]),
            dict(label="Public info. campaigns",
                 method="relayout",
                 args=["shapes", H1]),
            dict(label="Testing policy",
                 method="relayout",
                 args=["shapes", H2]),
            dict(label="Contact tracing",
                 method="relayout",
                 args=["shapes", H3]),
            dict(label="All",
                 method="relayout",
                 args=["shapes", C1 + C2 + C3 + C4 + C5 + C6 + C7 + C8 + E2 + H1 + H2 + H3])
        ]),
        )
    ]
)

fig_5_RU.update_layout(
    annotations=[
        dict(text="Mitigation Type", x=-0.30, xref="paper", y=1.06, yref="paper",
                             align="left", showarrow=False)],
    title_text="Russia COVID-19 Trend with Mitigation Dates", showlegend=False,
    xaxis =dict(showticklabels = True, tickangle = 45)
)

fig_5_RU.show()


# In[87]:


#Save the figure as html
pio.write_html(fig_5_RU, file='C:/Users/yeaji/Documents/UMBC/Classes/Data606/Figure/fig_5_RU.html', auto_open=True)


# In[88]:


#India case with mitigation dates

fig_5_IN = go.Figure()

fig_5_IN.add_trace(
    go.Scatter(x=df_new_mitig.loc[df_new_mitig['Country'] == 'India', 'Date'].tolist(),
               y=df_new_mitig.loc[df_new_mitig['Country'] == 'India', 'Total_case'].tolist(),
               name="India", line=dict(color="#33CFA5")))


C1 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/13/2020', y0=0,
           x1='03/13/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dash')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/04/2020', y0=0,
           x1='03/04/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dashdot'))]
C2 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/21/2020', y0=0,
           x1='03/21/2020', y1=1,
           line=dict(color="Crimson", dash= 'dash')), 
      dict(type="line",
           xref="x", yref="paper",
           x0='04/20/2020', y0=0,
           x1='04/20/2020', y1=1,
           line=dict(color="Crimson", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/16/2020', y0=0,
           x1='03/16/2020', y1=1,
           line=dict(color="Crimson", dash= 'dot'))]
C3 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/14/2020', y0=0,
           x1='03/14/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/05/2020', y0=0,
           x1='03/05/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dot'))]
C4 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/19/2020', y0=0,
           x1='03/19/2020', y1=1,
           line=dict(color="RoyalBlue"))]
C5 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/20/2020', y0=0,
           x1='03/20/2020', y1=1,
           line=dict(color="LightSeaGreen", dash= 'dashdot'))]
C6 = [dict(type="line",
           xref="x", yref="paper",
           x0='05/04/2020', y0=0,
           x1='05/04/2020', y1=1,
           line=dict(color="MediumPurple", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/22/2020', y0=0,
           x1='03/22/2020', y1=1,
           line=dict(color="MediumPurple", dash= 'dash')),
      dict(type="line",
           xref="x", yref="paper",
           x0='01/26/2020', y0=0,
           x1='01/26/2020', y1=1,
           line=dict(color="MediumPurple", dash= 'dot'))]
C7 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/20/2020', y0=0,
           x1='03/20/2020', y1=1,
           line=dict(color="LightSkyBlue", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/16/2020', y0=0,
           x1='03/16/2020', y1=1,
           line=dict(color="LightSkyBlue", dash= 'dot'))]
C8 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/15/2020', y0=0,
           x1='03/15/2020', y1=1,
           line=dict(color="Yellowgreen", dash= 'dash')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/13/2020', y0=0,
           x1='03/13/2020', y1=1,
           line=dict(color="Yellowgreen", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='01/26/2020', y0=0,
           x1='01/26/2020', y1=1,
           line=dict(color="Yellowgreen", dash= 'dot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/22/2020', y0=0,
           x1='03/22/2020', y1=1,
           line=dict(color="Yellowgreen"))]
E1 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/20/2020', y0=0,
           x1='03/20/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dot'))]
E2 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/01/2020', y0=0,
           x1='03/01/2020', y1=1,
           line=dict(color="Crimson", dash= 'dashdot'))]
H1 = [dict(type="line",
           xref="x", yref="paper",
           x0='01/25/2020', y0=0,
           x1='01/25/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/05/2020', y0=0,
           x1='03/05/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dashdot'))]
H2 = [dict(type="line",
           xref="x", yref="paper",
           x0='04/09/2020', y0=0,
           x1='04/09/2020', y1=1,
           line=dict(color="Crimson", dash= 'dash')), 
      dict(type="line",
           xref="x", yref="paper",
           x0='01/25/2020', y0=0,
           x1='01/25/2020', y1=1,
           line=dict(color="Crimson", dash= 'dot'))]
H3 = [dict(type="line",
           xref="x", yref="paper",
           x0='01/26/2020', y0=0,
           x1='01/26/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='01/31/2020', y0=0,
           x1='01/31/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dashdot'))]

fig_5_IN.update_layout(
    updatemenus=[
        dict(buttons=list([
            dict(label="None",
                 method="relayout",
                 args=["shapes", []]),
            dict(label="Close school",
                 method="relayout",
                 args=["shapes", C1]),
            dict(label="Close workplace",
                 method="relayout",
                 args=["shapes", C2]),
            dict(label="Cancel public events",
                 method="relayout",
                 args=["shapes", C3]),
            dict(label="Restrict gatherings",
                 method="relayout",
                 args=["shapes", C4]),
            dict(label="Close public transport",
                 method="relayout",
                 args=["shapes", C5]),
            dict(label="Stay at home order",
                 method="relayout",
                 args=["shapes", C6]),
            dict(label="Restrict internal move",
                 method="relayout",
                 args=["shapes", C7]),
            dict(label="Control int. travel",
                 method="relayout",
                 args=["shapes", C8]),
            dict(label="Income support",
                 method="relayout",
                 args=["shapes", E1]),
            dict(label="Debt/contract relief",
                 method="relayout",
                 args=["shapes", E2]),
            dict(label="Public info. campaigns",
                 method="relayout",
                 args=["shapes", H1]),
            dict(label="Testing policy",
                 method="relayout",
                 args=["shapes", H2]),
            dict(label="Contact tracing",
                 method="relayout",
                 args=["shapes", H3]),
            dict(label="All",
                 method="relayout",
                 args=["shapes", C1 + C2 + C3 + C4 + C5 + C6 + C7 + C8 + E1 + E2 + H1 + H2 + H3])
        ]),
        )
    ]
)

fig_5_IN.update_layout(
    annotations=[
        dict(text="Mitigation Type", x=-0.30, xref="paper", y=1.06, yref="paper",
                             align="left", showarrow=False)],
    title_text="India COVID-19 Trend with Mitigation Dates", showlegend=False,
    xaxis =dict(showticklabels = True, tickangle = 45)
)

fig_5_IN.show()


# In[89]:


#Save the figure as html
pio.write_html(fig_5_IN, file='C:/Users/yeaji/Documents/UMBC/Classes/Data606/Figure/fig_5_IN.html', auto_open=True)


# In[90]:


#United Kingdom case with mitigation dates

fig_5_UK = go.Figure()

fig_5_UK.add_trace(
    go.Scatter(x=df_new_mitig.loc[df_new_mitig['Country'] == 'United Kingdom', 'Date'].tolist(),
               y=df_new_mitig.loc[df_new_mitig['Country'] == 'United Kingdom', 'Total_case'].tolist(),
               name="United Kingdom", line=dict(color="#F06A6A")))


C1 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/23/2020', y0=0,
           x1='03/23/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dash'))]
C2 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/16/2020', y0=0,
           x1='03/16/2020', y1=1,
           line=dict(color="Crimson", dash= 'dot')), 
      dict(type="line",
           xref="x", yref="paper",
           x0='03/21/2020', y0=0,
           x1='03/21/2020', y1=1,
           line=dict(color="Crimson", dash= 'dashdot'))]
C3 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/21/2020', y0=0,
           x1='03/21/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/17/2020', y0=0,
           x1='03/17/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dot'))]
C4 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/23/2020', y0=0,
           x1='03/23/2020', y1=1,
           line=dict(color="RoyalBlue"))]
C5 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/26/2020', y0=0,
           x1='03/26/2020', y1=1,
           line=dict(color="LightSeaGreen", dash= 'dot'))]
C6 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/23/2020', y0=0,
           x1='03/23/2020', y1=1,
           line=dict(color="MediumPurple", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='05/13/2020', y0=0,
           x1='05/13/2020', y1=1,
           line=dict(color="MediumPurple", dash= 'dot'))]
C7 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/23/2020', y0=0,
           x1='03/23/2020', y1=1,
           line=dict(color="LightSkyBlue", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/22/2020', y0=0,
           x1='03/22/2020', y1=1,
           line=dict(color="LightSkyBlue", dash= 'dot'))]
C8 = [dict(type="line",
           xref="x", yref="paper",
           x0='06/08/2020', y0=0,
           x1='06/08/2020', y1=1,
           line=dict(color="Yellowgreen", dash= 'dashdot'))]
E1 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/20/2020', y0=0,
           x1='03/20/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dashdot'))]
E2 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/17/2020', y0=0,
           x1='03/17/2020', y1=1,
           line=dict(color="Crimson", dash= 'dot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/19/2020', y0=0,
           x1='03/19/2020', y1=1,
           line=dict(color="Crimson", dash= 'dashdot'))]
H1 = [dict(type="line",
           xref="x", yref="paper",
           x0='02/02/2020', y0=0,
           x1='02/02/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dashdot'))]
H2 = [dict(type="line",
           xref="x", yref="paper",
           x0='05/18/2020', y0=0,
           x1='05/18/2020', y1=1,
           line=dict(color="Crimson", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='01/20/2020', y0=0,
           x1='01/20/2020', y1=1,
           line=dict(color="Crimson", dash= 'dot'))]
H3 = [dict(type="line",
           xref="x", yref="paper",
           x0='05/27/2020', y0=0,
           x1='05/27/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='01/31/2020', y0=0,
           x1='01/31/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dashdot'))]

fig_5_UK.update_layout(
    updatemenus=[
        dict(buttons=list([
            dict(label="None",
                 method="relayout",
                 args=["shapes", []]),
            dict(label="Close school",
                 method="relayout",
                 args=["shapes", C1]),
            dict(label="Close workplace",
                 method="relayout",
                 args=["shapes", C2]),
            dict(label="Cancel public events",
                 method="relayout",
                 args=["shapes", C3]),
            dict(label="Restrict gatherings",
                 method="relayout",
                 args=["shapes", C4]),
            dict(label="Close public transport",
                 method="relayout",
                 args=["shapes", C5]),
            dict(label="Stay at home order",
                 method="relayout",
                 args=["shapes", C6]),
            dict(label="Restrict internal move",
                 method="relayout",
                 args=["shapes", C7]),
            dict(label="Control int. travel",
                 method="relayout",
                 args=["shapes", C8]),
            dict(label="Income support",
                 method="relayout",
                 args=["shapes", E1]),
            dict(label="Debt/contract relief",
                 method="relayout",
                 args=["shapes", E2]),
            dict(label="Public info. campaigns",
                 method="relayout",
                 args=["shapes", H1]),
            dict(label="Testing policy",
                 method="relayout",
                 args=["shapes", H2]),
            dict(label="Contact tracing",
                 method="relayout",
                 args=["shapes", H3]),
            dict(label="All",
                 method="relayout",
                 args=["shapes", C1 + C2 + C3 + C4 + C5 + C6 + C7 + C8 + E1 + E2 + H1 + H2 + H3])
        ]),
        )
    ]
)

fig_5_UK.update_layout(
    annotations=[
        dict(text="Mitigation Type", x=-0.30, xref="paper", y=1.06, yref="paper",
                             align="left", showarrow=False)],
    title_text="United Kingdom COVID-19 Trend with Mitigation Dates", showlegend=False,
    xaxis =dict(showticklabels = True, tickangle = 45)
)

fig_5_UK.show()


# In[91]:


#Save the figure as html
pio.write_html(fig_5_UK, file='C:/Users/yeaji/Documents/UMBC/Classes/Data606/Figure/fig_5_UK.html', auto_open=True)


# In[92]:


#Peru case with mitigation dates

fig_5_PE = go.Figure()

fig_5_PE.add_trace(
    go.Scatter(x=df_new_mitig.loc[df_new_mitig['Country'] == 'Peru', 'Date'].tolist(),
               y=df_new_mitig.loc[df_new_mitig['Country'] == 'Peru', 'Total_case'].tolist(),
               name="Peru", line=dict(color="#3366cc")))


C1 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/12/2020', y0=0,
           x1='03/12/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dash'))]
C2 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/16/2020', y0=0,
           x1='03/16/2020', y1=1,
           line=dict(color="Crimson", dash= 'dash')), 
      dict(type="line",
           xref="x", yref="paper",
           x0='05/01/2020', y0=0,
           x1='05/01/2020', y1=1,
           line=dict(color="Crimson", dash= 'dashdot'))]
C3 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/12/2020', y0=0,
           x1='03/12/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dashdot'))]
C4 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/12/2020', y0=0,
           x1='03/12/2020', y1=1,
           line=dict(color="RoyalBlue", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/15/2020', y0=0,
           x1='03/15/2020', y1=1,
           line=dict(color="RoyalBlue"))]
C5 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/15/2020', y0=0,
           x1='03/15/2020', y1=1,
           line=dict(color="LightSeaGreen", dash= 'dot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='05/01/2020', y0=0,
           x1='05/01/2020', y1=1,
           line=dict(color="LightSeaGreen", dash= 'dashdot'))]
C6 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/15/2020', y0=0,
           x1='03/15/2020', y1=1,
           line=dict(color="MediumPurple", dash= 'dashdot')),
     dict(type="line",
           xref="x", yref="paper",
           x0='03/18/2020', y0=0,
           x1='03/18/2020', y1=1,
           line=dict(color="MediumPurple", dash= 'dash'))]
C7 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/15/2020', y0=0,
           x1='03/15/2020', y1=1,
           line=dict(color="LightSkyBlue", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/14/2020', y0=0,
           x1='03/14/2020', y1=1,
           line=dict(color="LightSkyBlue", dash= 'dot'))]
C8 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/06/2020', y0=0,
           x1='03/06/2020', y1=1,
           line=dict(color="Yellowgreen", dash= 'dot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/11/2020', y0=0,
           x1='03/11/2020', y1=1,
           line=dict(color="Yellowgreen", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/16/2020', y0=0,
           x1='03/16/2020', y1=1,
           line=dict(color="Yellowgreen"))]
E1 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/16/2020', y0=0,
           x1='03/16/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dot'))]
E2 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/18/2020', y0=0,
           x1='03/18/2020', y1=1,
           line=dict(color="Crimson", dash= 'dashdot'))]
H1 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/05/2020', y0=0,
           x1='03/05/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dashdot'))]
H2 = [dict(type="line",
           xref="x", yref="paper",
           x0='04/10/2020', y0=0,
           x1='04/10/2020', y1=1,
           line=dict(color="Crimson", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='01/31/2020', y0=0,
           x1='01/31/2020', y1=1,
           line=dict(color="Crimson", dash= 'dot'))]
H3 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/06/2020', y0=0,
           x1='03/06/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dot')),
     dict(type="line",
           xref="x", yref="paper",
           x0='06/09/2020', y0=0,
           x1='06/09/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dashdot'))]

fig_5_PE.update_layout(
    updatemenus=[
        dict(buttons=list([
            dict(label="None",
                 method="relayout",
                 args=["shapes", []]),
            dict(label="Close school",
                 method="relayout",
                 args=["shapes", C1]),
            dict(label="Close workplace",
                 method="relayout",
                 args=["shapes", C2]),
            dict(label="Cancel public events",
                 method="relayout",
                 args=["shapes", C3]),
            dict(label="Restrict gatherings",
                 method="relayout",
                 args=["shapes", C4]),
            dict(label="Close public transport",
                 method="relayout",
                 args=["shapes", C5]),
            dict(label="Stay at home order",
                 method="relayout",
                 args=["shapes", C6]),
            dict(label="Restrict internal move",
                 method="relayout",
                 args=["shapes", C7]),
            dict(label="Control int. travel",
                 method="relayout",
                 args=["shapes", C8]),
            dict(label="Income support",
                 method="relayout",
                 args=["shapes", E1]),
            dict(label="Debt/contract relief",
                 method="relayout",
                 args=["shapes", E2]),
            dict(label="Public info. campaigns",
                 method="relayout",
                 args=["shapes", H1]),
            dict(label="Testing policy",
                 method="relayout",
                 args=["shapes", H2]),
            dict(label="Contact tracing",
                 method="relayout",
                 args=["shapes", H3]),
            dict(label="All",
                 method="relayout",
                 args=["shapes", C1 + C2 + C3 + C4 + C5 + C6 + C7 + C8 + E1 + E2 + H1 + H2 + H3])
        ]),
        )
    ]
)

fig_5_PE.update_layout(
    annotations=[
        dict(text="Mitigation Type", x=-0.30, xref="paper", y=1.06, yref="paper",
                             align="left", showarrow=False)],
    title_text="Peru COVID-19 Trend with Mitigation Dates", showlegend=False,
    xaxis =dict(showticklabels = True, tickangle = 45)
)

fig_5_PE.show()


# In[93]:


#Save the figure as html
pio.write_html(fig_5_PE, file='C:/Users/yeaji/Documents/UMBC/Classes/Data606/Figure/fig_5_PE.html', auto_open=True)


# In[94]:


#Chile case with mitigation dates

fig_5_CHL = go.Figure()

fig_5_CHL.add_trace(
    go.Scatter(x=df_new_mitig.loc[df_new_mitig['Country'] == 'Chile', 'Date'].tolist(),
               y=df_new_mitig.loc[df_new_mitig['Country'] == 'Chile', 'Total_case'].tolist(),
               name="Chile", line=dict(color="#3366cc")))


C1 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/15/2020', y0=0,
           x1='03/15/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dash'))]
C2 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/16/2020', y0=0,
           x1='03/16/2020', y1=1,
           line=dict(color="Crimson", dash= 'dash')), 
      dict(type="line",
           xref="x", yref="paper",
           x0='03/21/2020', y0=0,
           x1='03/21/2020', y1=1,
           line=dict(color="Crimson", dash= 'dashdot'))]
C3 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/16/2020', y0=0,
           x1='03/16/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dashdot'))]
C4 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/16/2020', y0=0,
           x1='03/16/2020', y1=1,
           line=dict(color="RoyalBlue", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/25/2020', y0=0,
           x1='03/25/2020', y1=1,
           line=dict(color="RoyalBlue", dash= 'dash')),
      dict(type="line",
           xref="x", yref="paper",
           x0='05/15/2020', y0=0,
           x1='05/15/2020', y1=1,
           line=dict(color="RoyalBlue"))]
C6 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/25/2020', y0=0,
           x1='03/25/2020', y1=1,
           line=dict(color="MediumPurple", dash= 'dashdot')),
     dict(type="line",
           xref="x", yref="paper",
           x0='05/15/2020', y0=0,
           x1='05/15/2020', y1=1,
           line=dict(color="MediumPurple", dash= 'dash'))]
C7 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/25/2020', y0=0,
           x1='03/25/2020', y1=1,
           line=dict(color="LightSkyBlue", dash= 'dashdot'))]
C8 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/18/2020', y0=0,
           x1='03/18/2020', y1=1,
           line=dict(color="Yellowgreen", dash= 'dash'))]
E1 = [dict(type="line",
           xref="x", yref="paper",
           x0='04/02/2020', y0=0,
           x1='04/02/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='06/16/2020', y0=0,
           x1='06/16/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dashdot'))]
E2 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/27/2020', y0=0,
           x1='03/27/2020', y1=1,
           line=dict(color="Crimson", dash= 'dot'))]
H1 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/14/2020', y0=0,
           x1='03/14/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dashdot'))]
H2 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/26/2020', y0=0,
           x1='03/26/2020', y1=1,
           line=dict(color="Crimson", dash= 'dashdot'))]
H3 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/20/2020', y0=0,
           x1='03/20/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dashdot'))]

fig_5_CHL.update_layout(
    updatemenus=[
        dict(buttons=list([
            dict(label="None",
                 method="relayout",
                 args=["shapes", []]),
            dict(label="Close school",
                 method="relayout",
                 args=["shapes", C1]),
            dict(label="Close workplace",
                 method="relayout",
                 args=["shapes", C2]),
            dict(label="Cancel public events",
                 method="relayout",
                 args=["shapes", C3]),
            dict(label="Restrict gatherings",
                 method="relayout",
                 args=["shapes", C4]),
            dict(label="Stay at home order",
                 method="relayout",
                 args=["shapes", C6]),
            dict(label="Restrict internal move",
                 method="relayout",
                 args=["shapes", C7]),
            dict(label="Control int. travel",
                 method="relayout",
                 args=["shapes", C8]),
            dict(label="Income support",
                 method="relayout",
                 args=["shapes", E1]),
            dict(label="Debt/contract relief",
                 method="relayout",
                 args=["shapes", E2]),
            dict(label="Public info. campaigns",
                 method="relayout",
                 args=["shapes", H1]),
            dict(label="Testing policy",
                 method="relayout",
                 args=["shapes", H2]),
            dict(label="Contact tracing",
                 method="relayout",
                 args=["shapes", H3]),
            dict(label="All",
                 method="relayout",
                 args=["shapes", C1 + C2 + C3 + C4 + C6 + C7 + C8 + E1 + E2 + H1 + H2 + H3])
        ]),
        )
    ]
)

fig_5_CHL.update_layout(
    annotations=[
        dict(text="Mitigation Type", x=-0.30, xref="paper", y=1.06, yref="paper",
                             align="left", showarrow=False)],
    title_text="Chile COVID-19 Trend with Mitigation Dates", showlegend=False,
    xaxis =dict(showticklabels = True, tickangle = 45)
)

fig_5_CHL.show()


# In[95]:


#Save the figure as html
pio.write_html(fig_5_CHL, file='C:/Users/yeaji/Documents/UMBC/Classes/Data606/Figure/fig_5_CHL.html', auto_open=True)


# In[96]:


#Spain case with mitigation dates

fig_5_SP = go.Figure()

fig_5_SP.add_trace(
    go.Scatter(x=df_new_mitig.loc[df_new_mitig['Country'] == 'Spain', 'Date'].tolist(),
               y=df_new_mitig.loc[df_new_mitig['Country'] == 'Spain', 'Total_case'].tolist(),
               name="Spain", line=dict(color="#F06A6A")))


C1 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/09/2020', y0=0,
           x1='03/09/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dash'))]
C2 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/30/2020', y0=0,
           x1='03/30/2020', y1=1,
           line=dict(color="Crimson", dash= 'dash')), 
      dict(type="line",
           xref="x", yref="paper",
           x0='03/14/2020', y0=0,
           x1='03/14/2020', y1=1,
           line=dict(color="Crimson", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/09/2020', y0=0,
           x1='03/09/2020', y1=1,
           line=dict(color="Crimson", dash= 'dot'))]
C3 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/10/2020', y0=0,
           x1='03/10/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dashdot'))]
C4 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/10/2020', y0=0,
           x1='03/10/2020', y1=1,
           line=dict(color="RoyalBlue", dash= 'dot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='06/21/2020', y0=0,
           x1='06/21/2020', y1=1,
           line=dict(color="RoyalBlue", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='06/01/2020', y0=0,
           x1='06/01/2020', y1=1,
           line=dict(color="RoyalBlue", dash= 'dash')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/30/2020', y0=0,
           x1='03/30/2020', y1=1,
           line=dict(color="RoyalBlue"))]
C5 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/14/2020', y0=0,
           x1='03/14/2020', y1=1,
           line=dict(color="LightSeaGreen", dash= 'dot'))]
C6 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/14/2020', y0=0,
           x1='03/14/2020', y1=1,
           line=dict(color="MediumPurple", dash= 'dashdot')),
     dict(type="line",
           xref="x", yref="paper",
           x0='05/27/2020', y0=0,
           x1='05/27/2020', y1=1,
           line=dict(color="MediumPurple", dash= 'dot'))]
C7 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/09/2020', y0=0,
           x1='03/09/2020', y1=1,
           line=dict(color="LightSkyBlue", dash= 'dot'))]
C8 = [dict(type="line",
           xref="x", yref="paper",
           x0='06/21/2020', y0=0,
           x1='06/21/2020', y1=1,
           line=dict(color="Yellowgreen", dash= 'dot')),
     dict(type="line",
           xref="x", yref="paper",
           x0='03/10/2020', y0=0,
           x1='03/10/2020', y1=1,
           line=dict(color="Yellowgreen", dash= 'dash')),
     dict(type="line",
           xref="x", yref="paper",
           x0='03/17/2020', y0=0,
           x1='03/17/2020', y1=1,
           line=dict(color="Yellowgreen"))]
E1 = [dict(type="line",
           xref="x", yref="paper",
           x0='05/04/2020', y0=0,
           x1='05/04/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/18/2020', y0=0,
           x1='03/18/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dashdot'))]
E2 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/17/2020', y0=0,
           x1='03/17/2020', y1=1,
           line=dict(color="Crimson", dash= 'dot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/31/2020', y0=0,
           x1='03/31/2020', y1=1,
           line=dict(color="Crimson", dash= 'dashdot'))]
H1 = [dict(type="line",
           xref="x", yref="paper",
           x0='01/31/2020', y0=0,
           x1='01/31/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dashdot'))]
H2 = [dict(type="line",
           xref="x", yref="paper",
           x0='04/05/2020', y0=0,
           x1='04/05/2020', y1=1,
           line=dict(color="Crimson", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='01/24/2020', y0=0,
           x1='01/24/2020', y1=1,
           line=dict(color="Crimson", dash= 'dot'))]
H3 = [dict(type="line",
           xref="x", yref="paper",
           x0='02/24/2020', y0=0,
           x1='02/24/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='01/31/2020', y0=0,
           x1='01/31/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dashdot'))]

fig_5_SP.update_layout(
    updatemenus=[
        dict(buttons=list([
            dict(label="None",
                 method="relayout",
                 args=["shapes", []]),
            dict(label="Close school",
                 method="relayout",
                 args=["shapes", C1]),
            dict(label="Close workplace",
                 method="relayout",
                 args=["shapes", C2]),
            dict(label="Cancel public events",
                 method="relayout",
                 args=["shapes", C3]),
            dict(label="Restrict gatherings",
                 method="relayout",
                 args=["shapes", C4]),
            dict(label="Close public transport",
                 method="relayout",
                 args=["shapes", C5]),
            dict(label="Stay at home order",
                 method="relayout",
                 args=["shapes", C6]),
            dict(label="Restrict internal move",
                 method="relayout",
                 args=["shapes", C7]),
            dict(label="Control int. travel",
                 method="relayout",
                 args=["shapes", C8]),
            dict(label="Income support",
                 method="relayout",
                 args=["shapes", E1]),
            dict(label="Debt/contract relief",
                 method="relayout",
                 args=["shapes", E2]),
            dict(label="Public info. campaigns",
                 method="relayout",
                 args=["shapes", H1]),
            dict(label="Testing policy",
                 method="relayout",
                 args=["shapes", H2]),
            dict(label="Contact tracing",
                 method="relayout",
                 args=["shapes", H3]),
            dict(label="All",
                 method="relayout",
                 args=["shapes", C1 + C2 + C3 + C4 + C5 + C6 + C7 + C8 + E1 + E2 + H1 + H2 + H3])
        ]),
        )
    ]
)

fig_5_SP.update_layout(
    annotations=[
        dict(text="Mitigation Type", x=-0.30, xref="paper", y=1.06, yref="paper",
                             align="left", showarrow=False)],
    title_text="Spain COVID-19 Trend with Mitigation Dates", showlegend=False,
    xaxis =dict(showticklabels = True, tickangle = 45)
)

fig_5_SP.show()


# In[97]:


#Save the figure as html
pio.write_html(fig_5_SP, file='C:/Users/yeaji/Documents/UMBC/Classes/Data606/Figure/fig_5_SP.html', auto_open=True)


# In[98]:


#Italy case with mitigation dates

fig_5_IT = go.Figure()

fig_5_IT.add_trace(
    go.Scatter(x=df_new_mitig.loc[df_new_mitig['Country'] == 'Italy', 'Date'].tolist(),
               y=df_new_mitig.loc[df_new_mitig['Country'] == 'Italy', 'Total_case'].tolist(),
               name="Italy", line=dict(color="#F06A6A")))

C1 = [dict(type="line",
           xref="x", yref="paper",
           x0='02/23/2020', y0=0,
           x1='02/23/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dash')),
      dict(type="line",
           xref="x", yref="paper",
           x0='02/03/2020', y0=0,
           x1='02/03/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dashdot'))]
C2 = [dict(type="line",
           xref="x", yref="paper",
           x0='02/22/2020', y0=0,
           x1='02/22/2020', y1=1,
           line=dict(color="Crimson", dash= 'dash')), 
      dict(type="line",
           xref="x", yref="paper",
           x0='05/16/2020', y0=0,
           x1='05/16/2020', y1=1,
           line=dict(color="Crimson", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='05/04/2020', y0=0,
           x1='05/04/2020', y1=1,
           line=dict(color="Crimson", dash= 'dot'))]
C3 = [dict(type="line",
           xref="x", yref="paper",
           x0='02/23/2020', y0=0,
           x1='02/23/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dashdot'))]
C4 = [dict(type="line",
           xref="x", yref="paper",
           x0='06/15/2020', y0=0,
           x1='06/15/2020', y1=1,
           line=dict(color="RoyalBlue", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='02/23/2020', y0=0,
           x1='02/23/2020', y1=1,
           line=dict(color="RoyalBlue"))]
C5 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/11/2020', y0=0,
           x1='03/11/2020', y1=1,
           line=dict(color="LightSeaGreen", dash= 'dot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='04/12/2020', y0=0,
           x1='04/12/2020', y1=1,
           line=dict(color="LightSeaGreen", dash= 'dashdot'))]
C6 = [dict(type="line",
           xref="x", yref="paper",
           x0='02/23/2020', y0=0,
           x1='02/23/2020', y1=1,
           line=dict(color="MediumPurple", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/20/2020', y0=0,
           x1='03/20/2020', y1=1,
           line=dict(color="MediumPurple", dash= 'dash')),
      dict(type="line",
           xref="x", yref="paper",
           x0='05/04/2020', y0=0,
           x1='05/04/2020', y1=1,
           line=dict(color="MediumPurple", dash= 'dot'))]
C7 = [dict(type="line",
           xref="x", yref="paper",
           x0='02/21/2020', y0=0,
           x1='02/21/2020', y1=1,
           line=dict(color="LightSkyBlue", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='05/04/2020', y0=0,
           x1='05/04/2020', y1=1,
           line=dict(color="LightSkyBlue", dash= 'dot'))]
C8 = [dict(type="line",
           xref="x", yref="paper",
           x0='01/30/2020', y0=0,
           x1='01/30/2020', y1=1,
           line=dict(color="Yellowgreen", dash= 'dash')),
      dict(type="line",
           xref="x", yref="paper",
           x0='01/23/2020', y0=0,
           x1='01/23/2020', y1=1,
           line=dict(color="Yellowgreen", dash= 'dot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='05/04/2020', y0=0,
           x1='05/04/2020', y1=1,
           line=dict(color="Yellowgreen", dash= 'dashdot'))]
E1 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/17/2020', y0=0,
           x1='03/17/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dot'))]
E2 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/17/2020', y0=0,
           x1='03/17/2020', y1=1,
           line=dict(color="Crimson", dash= 'dot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='06/02/2020', y0=0,
           x1='06/02/2020', y1=1,
           line=dict(color="Crimson", dash= 'dashdot'))]
H1 = [dict(type="line",
           xref="x", yref="paper",
           x0='01/31/2020', y0=0,
           x1='01/31/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dashdot'))]
H2 = [dict(type="line",
           xref="x", yref="paper",
           x0='02/26/2020', y0=0,
           x1='02/26/2020', y1=1,
           line=dict(color="Crimson", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='01/31/2020', y0=0,
           x1='01/31/2020', y1=1,
           line=dict(color="Crimson", dash= 'dot'))]
H3 = [dict(type="line",
           xref="x", yref="paper",
           x0='01/31/2020', y0=0,
           x1='01/31/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dashdot'))]

fig_5_IT.update_layout(
    updatemenus=[
        dict(buttons=list([
            dict(label="None",
                 method="relayout",
                 args=["shapes", []]),
            dict(label="Close school",
                 method="relayout",
                 args=["shapes", C1]),
            dict(label="Close workplace",
                 method="relayout",
                 args=["shapes", C2]),
            dict(label="Cancel public events",
                 method="relayout",
                 args=["shapes", C3]),
            dict(label="Restrict gatherings",
                 method="relayout",
                 args=["shapes", C4]),
            dict(label="Close public transport",
                 method="relayout",
                 args=["shapes", C5]),
            dict(label="Stay at home order",
                 method="relayout",
                 args=["shapes", C6]),
            dict(label="Restrict internal move",
                 method="relayout",
                 args=["shapes", C7]),
            dict(label="Control int. travel",
                 method="relayout",
                 args=["shapes", C8]),
            dict(label="Income support",
                 method="relayout",
                 args=["shapes", E1]),
            dict(label="Debt/contract relief",
                 method="relayout",
                 args=["shapes", E2]),
            dict(label="Public info. campaigns",
                 method="relayout",
                 args=["shapes", H1]),
            dict(label="Testing policy",
                 method="relayout",
                 args=["shapes", H2]),
            dict(label="Contact tracing",
                 method="relayout",
                 args=["shapes", H3]),
            dict(label="All",
                 method="relayout",
                 args=["shapes", C1 + C2 + C3 + C4 + C5 + C6 + C7 + C8 + E1 + E2 + H1 + H2 + H3])

        ]),
        )
    ]
)

fig_5_IT.update_layout(
    annotations=[
        dict(text="Mitigation Type", x=-0.30, xref="paper", y=1.06, yref="paper",
                             align="left", showarrow=False)],
    title_text="Italy COVID-19 Trend with Mitigation Dates", showlegend=False,
    xaxis =dict(showticklabels = True, tickangle = 45)
)

fig_5_IT.show()


# In[99]:


#Save the figure as html
pio.write_html(fig_5_IT, file='C:/Users/yeaji/Documents/UMBC/Classes/Data606/Figure/fig_5_IT.html', auto_open=True)


# In[100]:


#Iran case with mitigation dates

fig_5_IR = go.Figure()

fig_5_IR.add_trace(
    go.Scatter(x=df_new_mitig.loc[df_new_mitig['Country'] == 'Iran', 'Date'].tolist(),
               y=df_new_mitig.loc[df_new_mitig['Country'] == 'Iran', 'Total_case'].tolist(),
               name="Iran", line=dict(color="#9acd32")))


C1 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/05/2020', y0=0,
           x1='03/05/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dash')),
      dict(type="line",
           xref="x", yref="paper",
           x0='05/16/2020', y0=0,
           x1='05/16/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dashdot'))]
C2 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/22/2020', y0=0,
           x1='03/22/2020', y1=1,
           line=dict(color="Crimson", dash= 'dash')), 
      dict(type="line",
           xref="x", yref="paper",
           x0='04/11/2020', y0=0,
           x1='04/11/2020', y1=1,
           line=dict(color="Crimson", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='02/26/2020', y0=0,
           x1='02/26/2020', y1=1,
           line=dict(color="Crimson", dash= 'dot'))]
C3 = [dict(type="line",
           xref="x", yref="paper",
           x0='02/22/2020', y0=0,
           x1='02/22/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='02/20/2020', y0=0,
           x1='02/20/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dot'))]
C4 = [dict(type="line",
           xref="x", yref="paper",
           x0='04/19/2020', y0=0,
           x1='04/19/2020', y1=1,
           line=dict(color="RoyalBlue", dash= 'dot'))]
C5 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/27/2020', y0=0,
           x1='03/27/2020', y1=1,
           line=dict(color="LightSeaGreen", dash= 'dashdot'))]
C6 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/19/2020', y0=0,
           x1='03/19/2020', y1=1,
           line=dict(color="MediumPurple", dash= 'dot'))]
C7 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/05/2020', y0=0,
           x1='03/05/2020', y1=1,
           line=dict(color="LightSkyBlue", dash= 'dashdot'))]
E1 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/16/2020', y0=0,
           x1='03/16/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dot'))]
E2 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/15/2020', y0=0,
           x1='03/15/2020', y1=1,
           line=dict(color="Crimson", dash= 'dashdot'))]
H1 = [dict(type="line",
           xref="x", yref="paper",
           x0='02/26/2020', y0=0,
           x1='02/26/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/16/2020', y0=0,
           x1='03/16/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dashdot'))]
H2 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/16/2020', y0=0,
           x1='03/16/2020', y1=1,
           line=dict(color="Crimson", dash= 'dashdot'))]
H3 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/16/2020', y0=0,
           x1='03/16/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dashdot'))]

fig_5_IR.update_layout(
    updatemenus=[
        dict(buttons=list([
            dict(label="None",
                 method="relayout",
                 args=["shapes", []]),
            dict(label="Close school",
                 method="relayout",
                 args=["shapes", C1]),
            dict(label="Close workplace",
                 method="relayout",
                 args=["shapes", C2]),
            dict(label="Cancel public events",
                 method="relayout",
                 args=["shapes", C3]),
            dict(label="Restrict gatherings",
                 method="relayout",
                 args=["shapes", C4]),
            dict(label="Close public transport",
                 method="relayout",
                 args=["shapes", C5]),
            dict(label="Stay at home order",
                 method="relayout",
                 args=["shapes", C6]),
            dict(label="Restrict internal move",
                 method="relayout",
                 args=["shapes", C7]),
            dict(label="Income support",
                 method="relayout",
                 args=["shapes", E1]),
            dict(label="Debt/contract relief",
                 method="relayout",
                 args=["shapes", E2]),
            dict(label="Public info. campaigns",
                 method="relayout",
                 args=["shapes", H1]),
            dict(label="Testing policy",
                 method="relayout",
                 args=["shapes", H2]),
            dict(label="Contact tracing",
                 method="relayout",
                 args=["shapes", H3]),
            dict(label="All",
                 method="relayout",
                 args=["shapes", C1 + C2 + C3 + C4 + C5 + C6 + C7 + E1 + E2 + H1 + H2 + H3])

        ]),
        )
    ]
)

fig_5_IR.update_layout(
    annotations=[
        dict(text="Mitigation Type", x=-0.30, xref="paper", y=1.06, yref="paper",
                             align="left", showarrow=False)],
    title_text="Iran COVID-19 Trend with Mitigation Dates", showlegend=False,
    xaxis =dict(showticklabels = True, tickangle = 45)
)

fig_5_IR.show()


# In[101]:


#Save the figure as html
pio.write_html(fig_5_IR, file='C:/Users/yeaji/Documents/UMBC/Classes/Data606/Figure/fig_5_IR.html', auto_open=True)


# In[102]:


#France case with mitigation dates

fig_5_FR = go.Figure()

fig_5_FR.add_trace(
    go.Scatter(x=df_new_mitig.loc[df_new_mitig['Country'] == 'France', 'Date'].tolist(),
               y=df_new_mitig.loc[df_new_mitig['Country'] == 'France', 'Total_case'].tolist(),
               name="France", line=dict(color="#F06A6A")))

C1 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/02/2020', y0=0,
           x1='03/02/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dash')),
      dict(type="line",
           xref="x", yref="paper",
           x0='05/11/2020', y0=0,
           x1='05/11/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dashdot'))]
C2 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/17/2020', y0=0,
           x1='03/17/2020', y1=1,
           line=dict(color="Crimson", dash= 'dash')), 
      dict(type="line",
           xref="x", yref="paper",
           x0='05/11/2020', y0=0,
           x1='05/11/2020', y1=1,
           line=dict(color="Crimson", dash= 'dashdot'))]
C3 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/13/2020', y0=0,
           x1='03/13/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dashdot'))]
C4 = [dict(type="line",
           xref="x", yref="paper",
           x0='02/29/2020', y0=0,
           x1='02/29/2020', y1=1,
           line=dict(color="RoyalBlue", dash= 'dot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/13/2020', y0=0,
           x1='03/13/2020', y1=1,
           line=dict(color="RoyalBlue", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='05/11/2020', y0=0,
           x1='05/11/2020', y1=1,
           line=dict(color="RoyalBlue", dash= 'dash')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/17/2020', y0=0,
           x1='03/17/2020', y1=1,
           line=dict(color="RoyalBlue"))]
C5 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/16/2020', y0=0,
           x1='03/16/2020', y1=1,
           line=dict(color="LightSeaGreen", dash= 'dot'))]
C6 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/17/2020', y0=0,
           x1='03/17/2020', y1=1,
           line=dict(color="MediumPurple", dash= 'dashdot')),
     dict(type="line",
           xref="x", yref="paper",
           x0='05/11/2020', y0=0,
           x1='05/11/2020', y1=1,
           line=dict(color="MediumPurple", dash= 'dot'))]
C7 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/14/2020', y0=0,
           x1='03/14/2020', y1=1,
           line=dict(color="LightSkyBlue", dash= 'dot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/17/2020', y0=0,
           x1='03/17/2020', y1=1,
           line=dict(color="LightSkyBlue", dash= 'dashdot'))]
C8 = [dict(type="line",
           xref="x", yref="paper",
           x0='01/23/2020', y0=0,
           x1='01/23/2020', y1=1,
           line=dict(color="Yellowgreen", dash= 'dot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='01/31/2020', y0=0,
           x1='01/31/2020', y1=1,
           line=dict(color="Yellowgreen", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='06/02/2020', y0=0,
           x1='06/02/2020', y1=1,
           line=dict(color="Yellowgreen", dash= 'dash')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/17/2020', y0=0,
           x1='03/17/2020', y1=1,
           line=dict(color="Yellowgreen"))]
E1 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/16/2020', y0=0,
           x1='03/16/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dashdot'))]
E2 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/16/2020', y0=0,
           x1='03/16/2020', y1=1,
           line=dict(color="Crimson", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='05/26/2020', y0=0,
           x1='05/26/2020', y1=1,
           line=dict(color="Crimson", dash= 'dot'))]
H1 = [dict(type="line",
           xref="x", yref="paper",
           x0='01/24/2020', y0=0,
           x1='01/24/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dashdot'))]
H2 = [dict(type="line",
           xref="x", yref="paper",
           x0='02/25/2020', y0=0,
           x1='02/25/2020', y1=1,
           line=dict(color="Crimson", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/17/2020', y0=0,
           x1='03/17/2020', y1=1,
           line=dict(color="Crimson", dash= 'dot'))]
H3 = [dict(type="line",
           xref="x", yref="paper",
           x0='02/26/2020', y0=0,
           x1='02/26/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='05/11/2020', y0=0,
           x1='05/11/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dashdot'))]

fig_5_FR.update_layout(
    updatemenus=[
        dict(buttons=list([
            dict(label="None",
                 method="relayout",
                 args=["shapes", []]),
            dict(label="Close school",
                 method="relayout",
                 args=["shapes", C1]),
            dict(label="Close workplace",
                 method="relayout",
                 args=["shapes", C2]),
            dict(label="Cancel public events",
                 method="relayout",
                 args=["shapes", C3]),
            dict(label="Restrict gatherings",
                 method="relayout",
                 args=["shapes", C4]),
            dict(label="Close public transport",
                 method="relayout",
                 args=["shapes", C5]),
            dict(label="Stay at home order",
                 method="relayout",
                 args=["shapes", C6]),
            dict(label="Restrict internal move",
                 method="relayout",
                 args=["shapes", C7]),
            dict(label="Control int. travel",
                 method="relayout",
                 args=["shapes", C8]),
            dict(label="Income support",
                 method="relayout",
                 args=["shapes", E1]),
            dict(label="Debt/contract relief",
                 method="relayout",
                 args=["shapes", E2]),
            dict(label="Public info. campaigns",
                 method="relayout",
                 args=["shapes", H1]),
            dict(label="Testing policy",
                 method="relayout",
                 args=["shapes", H2]),
            dict(label="Contact tracing",
                 method="relayout",
                 args=["shapes", H3]),
            dict(label="All",
                 method="relayout",
                 args=["shapes", C1 + C2 + C3 + C4 + C5 + C6 + C7 + C8 + E1 + E2 + H1 + H2 + H3])
        ]),
        )
    ]
)

fig_5_FR.update_layout(
    annotations=[
        dict(text="Mitigation Type", x=-0.30, xref="paper", y=1.06, yref="paper",
                             align="left", showarrow=False)],
    title_text="France COVID-19 Trend with Mitigation Dates", showlegend=False,
    xaxis =dict(showticklabels = True, tickangle = 45)
)

fig_5_FR.show()


# In[103]:


#Save the figure as html
pio.write_html(fig_5_FR, file='C:/Users/yeaji/Documents/UMBC/Classes/Data606/Figure/fig_5_FR.html', auto_open=True)


# In[104]:


#Germany case with mitigation dates

fig_5_GE = go.Figure()

fig_5_GE.add_trace(
    go.Scatter(x=df_new_mitig.loc[df_new_mitig['Country'] == 'Germany', 'Date'].tolist(),
               y=df_new_mitig.loc[df_new_mitig['Country'] == 'Germany', 'Total_case'].tolist(),
               name="Germany", line=dict(color="#F06A6A")))

C1 = [dict(type="line",
           xref="x", yref="paper",
           x0='02/26/2020', y0=0,
           x1='02/26/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/16/2020', y0=0,
           x1='03/16/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dash'))]
C2 = [dict(type="line",
           xref="x", yref="paper",
           x0='05/08/2020', y0=0,
           x1='05/08/2020', y1=1,
           line=dict(color="Crimson", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/22/2020', y0=0,
           x1='03/22/2020', y1=1,
           line=dict(color="Crimson", dash= 'dot'))]
C3 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/10/2020', y0=0,
           x1='03/10/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='02/29/2020', y0=0,
           x1='02/29/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dot'))]
C4 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/10/2020', y0=0,
           x1='03/10/2020', y1=1,
           line=dict(color="RoyalBlue", dash= 'dot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='05/25/2020', y0=0,
           x1='05/25/2020', y1=1,
           line=dict(color="RoyalBlue", dash= 'dash')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/21/2020', y0=0,
           x1='03/21/2020', y1=1,
           line=dict(color="RoyalBlue"))]
C6 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/21/2020', y0=0,
           x1='03/21/2020', y1=1,
           line=dict(color="MediumPurple", dash= 'dashdot')),
     dict(type="line",
           xref="x", yref="paper",
           x0='03/09/2020', y0=0,
           x1='03/09/2020', y1=1,
           line=dict(color="MediumPurple", dash= 'dot'))]
C7 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/18/2020', y0=0,
           x1='03/18/2020', y1=1,
           line=dict(color="LightSkyBlue", dash= 'dot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/19/2020', y0=0,
           x1='03/19/2020', y1=1,
           line=dict(color="LightSkyBlue", dash= 'dashdot'))]
C8 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/16/2020', y0=0,
           x1='03/16/2020', y1=1,
           line=dict(color="Yellowgreen", dash= 'dash')),
      dict(type="line",
           xref="x", yref="paper",
           x0='02/28/2020', y0=0,
           x1='02/28/2020', y1=1,
           line=dict(color="Yellowgreen", dash= 'dot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/18/2020', y0=0,
           x1='03/18/2020', y1=1,
           line=dict(color="Yellowgreen"))]
E1 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/16/2020', y0=0,
           x1='03/16/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dashdot'))]
E2 = [dict(type="line",
           xref="x", yref="paper",
           x0='05/19/2020', y0=0,
           x1='05/19/2020', y1=1,
           line=dict(color="Crimson", dash= 'dot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/23/2020', y0=0,
           x1='03/23/2020', y1=1,
           line=dict(color="Crimson", dash= 'dashdot'))]
H1 = [dict(type="line",
           xref="x", yref="paper",
           x0='01/24/2020', y0=0,
           x1='01/24/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='02/12/2020', y0=0,
           x1='02/12/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dashdot'))]
H2 = [dict(type="line",
           xref="x", yref="paper",
           x0='04/29/2020', y0=0,
           x1='04/29/2020', y1=1,
           line=dict(color="Crimson", dash= 'dash')), 
      dict(type="line",
           xref="x", yref="paper",
           x0='01/27/2020', y0=0,
           x1='01/27/2020', y1=1,
           line=dict(color="Crimson", dash= 'dot'))]
H3 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/18/2020', y0=0,
           x1='03/18/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='01/22/2020', y0=0,
           x1='01/22/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dashdot'))]

fig_5_GE.update_layout(
    updatemenus=[
        dict(buttons=list([
            dict(label="None",
                 method="relayout",
                 args=["shapes", []]),
            dict(label="Close school",
                 method="relayout",
                 args=["shapes", C1]),
            dict(label="Close workplace",
                 method="relayout",
                 args=["shapes", C2]),
            dict(label="Cancel public events",
                 method="relayout",
                 args=["shapes", C3]),
            dict(label="Restrict gatherings",
                 method="relayout",
                 args=["shapes", C4]),
            dict(label="Stay at home order",
                 method="relayout",
                 args=["shapes", C6]),
            dict(label="Restrict internal move",
                 method="relayout",
                 args=["shapes", C7]),
            dict(label="Control int. travel",
                 method="relayout",
                 args=["shapes", C8]),
            dict(label="Income support",
                 method="relayout",
                 args=["shapes", E1]),
            dict(label="Debt/contract relief",
                 method="relayout",
                 args=["shapes", E2]),
            dict(label="Public info. campaigns",
                 method="relayout",
                 args=["shapes", H1]),
            dict(label="Testing policy",
                 method="relayout",
                 args=["shapes", H2]),
            dict(label="Contact tracing",
                 method="relayout",
                 args=["shapes", H3]),
            dict(label="All",
                 method="relayout",
                 args=["shapes", C1 + C2 + C3 + C4 + C6 + C7 + C8 + E1 + E2 + H1 + H2 + H3])
        ]),
        )
    ]
)

fig_5_GE.update_layout(
    annotations=[
        dict(text="Mitigation Type", x=-0.30, xref="paper", y=1.06, yref="paper",
                             align="left", showarrow=False)],
    title_text="Germany COVID-19 Trend with Mitigation Dates", showlegend=False,
    xaxis =dict(showticklabels = True, tickangle = 45)
)

fig_5_GE.show()


# In[105]:


#Save the figure as html
pio.write_html(fig_5_GE, file='C:/Users/yeaji/Documents/UMBC/Classes/Data606/Figure/fig_5_GE.html', auto_open=True)


# In[106]:


#Turkey case with mitigation dates

fig_5_TU = go.Figure()

fig_5_TU.add_trace(
    go.Scatter(x=df_new_mitig.loc[df_new_mitig['Country'] == 'Turkey', 'Date'].tolist(),
               y=df_new_mitig.loc[df_new_mitig['Country'] == 'Turkey', 'Total_case'].tolist(),
               name="Turkey", line=dict(color="#9acd32")))

C1 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/16/2020', y0=0,
           x1='03/16/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dash'))]
C2 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/16/2020', y0=0,
           x1='03/16/2020', y1=1,
           line=dict(color="Crimson", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='06/01/2020', y0=0,
           x1='06/01/2020', y1=1,
           line=dict(color="Crimson", dash= 'dot'))]
C3 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/16/2020', y0=0,
           x1='03/16/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dashdot'))]
C5 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/24/2020', y0=0,
           x1='03/24/2020', y1=1,
           line=dict(color="LightSeaGreen", dash= 'dot'))]
C6 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/21/2020', y0=0,
           x1='03/21/2020', y1=1,
           line=dict(color="MediumPurple", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='04/11/2020', y0=0,
           x1='04/11/2020', y1=1,
           line=dict(color="MediumPurple", dash= 'dash')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/09/2020', y0=0,
           x1='03/09/2020', y1=1,
           line=dict(color="MediumPurple", dash= 'dot'))]
C7 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/28/2020', y0=0,
           x1='03/28/2020', y1=1,
           line=dict(color="LightSkyBlue", dash= 'dashdot')),
     dict(type="line",
           xref="x", yref="paper",
           x0='03/18/2020', y0=0,
           x1='03/18/2020', y1=1,
           line=dict(color="LightSkyBlue", dash= 'dot'))]
C8 = [dict(type="line",
           xref="x", yref="paper",
           x0='02/05/2020', y0=0,
           x1='02/05/2020', y1=1,
           line=dict(color="Yellowgreen", dash= 'dash')),
      dict(type="line",
           xref="x", yref="paper",
           x0='01/24/2020', y0=0,
           x1='01/24/2020', y1=1,
           line=dict(color="Yellowgreen", dash= 'dot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/27/2020', y0=0,
           x1='03/27/2020', y1=1,
           line=dict(color="Yellowgreen"))]
E1 = [dict(type="line",
           xref="x", yref="paper",
           x0='04/07/2020', y0=0,
           x1='04/07/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dashdot'))]
E2 = [dict(type="line",
           xref="x", yref="paper",
           x0='04/12/2020', y0=0,
           x1='04/12/2020', y1=1,
           line=dict(color="Crimson", dash= 'dot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='06/01/2020', y0=0,
           x1='06/01/2020', y1=1,
           line=dict(color="Crimson", dash= 'dashdot'))]
H1 = [dict(type="line",
           xref="x", yref="paper",
           x0='02/07/2020', y0=0,
           x1='02/07/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dashdot'))]
H2 = [dict(type="line",
           xref="x", yref="paper",
           x0='01/14/2020', y0=0,
           x1='01/14/2020', y1=1,
           line=dict(color="Crimson", dash= 'dashdot'))]
H3 = [dict(type="line",
           xref="x", yref="paper",
           x0='01/14/2020', y0=0,
           x1='01/14/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='04/19/2020', y0=0,
           x1='04/19/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dashdot'))]

fig_5_TU.update_layout(
    updatemenus=[
        dict(buttons=list([
            dict(label="None",
                 method="relayout",
                 args=["shapes", []]),
            dict(label="Close school",
                 method="relayout",
                 args=["shapes", C1]),
            dict(label="Close workplace",
                 method="relayout",
                 args=["shapes", C2]),
            dict(label="Cancel public events",
                 method="relayout",
                 args=["shapes", C3]),
            dict(label="Close public transport",
                 method="relayout",
                 args=["shapes", C5]),
            dict(label="Stay at home order",
                 method="relayout",
                 args=["shapes", C6]),
            dict(label="Restrict internal move",
                 method="relayout",
                 args=["shapes", C7]),
            dict(label="Control int. travel",
                 method="relayout",
                 args=["shapes", C8]),
            dict(label="Income support",
                 method="relayout",
                 args=["shapes", E1]),
            dict(label="Debt/contract relief",
                 method="relayout",
                 args=["shapes", E2]),
            dict(label="Public info. campaigns",
                 method="relayout",
                 args=["shapes", H1]),
            dict(label="Testing policy",
                 method="relayout",
                 args=["shapes", H2]),
            dict(label="Contact tracing",
                 method="relayout",
                 args=["shapes", H3]),
            dict(label="All",
                 method="relayout",
                 args=["shapes", C1 + C2 + C3 + C5 + C6 + C7 + C8 + E1 + E2 + H1 + H2 + H3])
        ]),
        )
    ]
)

fig_5_TU.update_layout(
    annotations=[
        dict(text="Mitigation Type", x=-0.30, xref="paper", y=1.06, yref="paper",
                             align="left", showarrow=False)],
    title_text="Turkey COVID-19 Trend with Mitigation Dates", showlegend=False,
    xaxis =dict(showticklabels = True, tickangle = 45)
)

fig_5_TU.show()


# In[107]:


#Save the figure as html
pio.write_html(fig_5_TU, file='C:/Users/yeaji/Documents/UMBC/Classes/Data606/Figure/fig_5_TU.html', auto_open=True)


# In[108]:


#Mexico case with mitigation dates

fig_5_ME = go.Figure()

fig_5_ME.add_trace(
    go.Scatter(x=df_new_mitig.loc[df_new_mitig['Country'] == 'Mexico', 'Date'].tolist(),
               y=df_new_mitig.loc[df_new_mitig['Country'] == 'Mexico', 'Total_case'].tolist(),
               name="Mexico", line=dict(color="#3366cc")))


C1 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/23/2020', y0=0,
           x1='03/23/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dash'))]
C2 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/26/2020', y0=0,
           x1='03/26/2020', y1=1,
           line=dict(color="Crimson", dash= 'dash')), 
      dict(type="line",
           xref="x", yref="paper",
           x0='06/01/2020', y0=0,
           x1='06/01/2020', y1=1,
           line=dict(color="Crimson", dash= 'dashdot'))]
C3 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/24/2020', y0=0,
           x1='03/24/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dashdot'))]
C4 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/24/2020', y0=0,
           x1='03/24/2020', y1=1,
           line=dict(color="RoyalBlue", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/30/2020', y0=0,
           x1='03/30/2020', y1=1,
           line=dict(color="RoyalBlue", dash= 'dash'))]
C5 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/30/2020', y0=0,
           x1='03/30/2020', y1=1,
           line=dict(color="LightSeaGreen", dash= 'dot'))]
C6 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/30/2020', y0=0,
           x1='03/30/2020', y1=1,
           line=dict(color="MediumPurple", dash= 'dashdot'))]
C7 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/30/2020', y0=0,
           x1='03/30/2020', y1=1,
           line=dict(color="LightSkyBlue", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/24/2020', y0=0,
           x1='03/24/2020', y1=1,
           line=dict(color="LightSkyBlue", dash= 'dot'))]
C8 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/21/2020', y0=0,
           x1='03/21/2020', y1=1,
           line=dict(color="Yellowgreen", dash= 'dash')),
      dict(type="line",
           xref="x", yref="paper",
           x0='02/28/2020', y0=0,
           x1='02/28/2020', y1=1,
           line=dict(color="Yellowgreen", dash= 'dot'))]
H1 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/24/2020', y0=0,
           x1='03/24/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dashdot'))]
H2 = [dict(type="line",
           xref="x", yref="paper",
           x0='04/06/2020', y0=0,
           x1='04/06/2020', y1=1,
           line=dict(color="Crimson", dash= 'dot'))]
H3 = [dict(type="line",
           xref="x", yref="paper",
           x0='02/28/2020', y0=0,
           x1='02/28/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dot'))]

fig_5_ME.update_layout(
    updatemenus=[
        dict(buttons=list([
            dict(label="None",
                 method="relayout",
                 args=["shapes", []]),
            dict(label="Close school",
                 method="relayout",
                 args=["shapes", C1]),
            dict(label="Close workplace",
                 method="relayout",
                 args=["shapes", C2]),
            dict(label="Cancel public events",
                 method="relayout",
                 args=["shapes", C3]),
            dict(label="Restrict gatherings",
                 method="relayout",
                 args=["shapes", C4]),
            dict(label="Close public transport",
                 method="relayout",
                 args=["shapes", C5]),
            dict(label="Stay at home order",
                 method="relayout",
                 args=["shapes", C6]),
            dict(label="Restrict internal move",
                 method="relayout",
                 args=["shapes", C7]),
            dict(label="Control int. travel",
                 method="relayout",
                 args=["shapes", C8]),
            dict(label="Public info. campaigns",
                 method="relayout",
                 args=["shapes", H1]),
            dict(label="Testing policy",
                 method="relayout",
                 args=["shapes", H2]),
            dict(label="Contact tracing",
                 method="relayout",
                 args=["shapes", H3]),
            dict(label="All",
                 method="relayout",
                 args=["shapes", C1 + C2 + C3 + C4 + C5 + C6 + C7 + C8 + H1 + H2 + H3])
        ]),
        )
    ]
)

fig_5_ME.update_layout(
    annotations=[
        dict(text="Mitigation Type", x=-0.30, xref="paper", y=1.06, yref="paper",
                             align="left", showarrow=False)],
    title_text="Mexico COVID-19 Trend with Mitigation Dates", showlegend=False,
    xaxis =dict(showticklabels = True, tickangle = 45)
)

fig_5_ME.show()


# In[109]:


#Save the figure as html
pio.write_html(fig_5_ME, file='C:/Users/yeaji/Documents/UMBC/Classes/Data606/Figure/fig_5_ME.html', auto_open=True)


# In[110]:


#South Africa case with mitigation dates

fig_5_SA = go.Figure()

fig_5_SA.add_trace(
    go.Scatter(x=df_new_mitig.loc[df_new_mitig['Country'] == 'South Africa', 'Date'].tolist(),
               y=df_new_mitig.loc[df_new_mitig['Country'] == 'South Africa', 'Total_case'].tolist(),
               name="South Africa", line=dict(color="#0FDCF7")))

C1 = [dict(type="line",
           xref="x", yref="paper",
           x0='06/08/2020', y0=0,
           x1='06/08/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/18/2020', y0=0,
           x1='03/18/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dash'))]
C2 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/26/2020', y0=0,
           x1='03/26/2020', y1=1,
           line=dict(color="Crimson", dash= 'dash')), 
      dict(type="line",
           xref="x", yref="paper",
           x0='05/01/2020', y0=0,
           x1='05/01/2020', y1=1,
           line=dict(color="Crimson", dash= 'dashdot'))]
C3 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/16/2020', y0=0,
           x1='03/16/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dashdot'))]
C4 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/16/2020', y0=0,
           x1='03/16/2020', y1=1,
           line=dict(color="RoyalBlue", dash= 'dash'))]
C5 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/26/2020', y0=0,
           x1='03/26/2020', y1=1,
           line=dict(color="LightSeaGreen", dash= 'dot'))]
C6 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/26/2020', y0=0,
           x1='03/26/2020', y1=1,
           line=dict(color="MediumPurple", dash= 'dashdot')),
     dict(type="line",
           xref="x", yref="paper",
           x0='06/01/2020', y0=0,
           x1='06/01/2020', y1=1,
           line=dict(color="MediumPurple", dash= 'dot'))]
C7 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/15/2020', y0=0,
           x1='03/15/2020', y1=1,
           line=dict(color="LightSkyBlue", dash= 'dot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/26/2020', y0=0,
           x1='03/26/2020', y1=1,
           line=dict(color="LightSkyBlue", dash= 'dashdot'))]
C8 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/18/2020', y0=0,
           x1='03/18/2020', y1=1,
           line=dict(color="Yellowgreen", dash= 'dash')),
      dict(type="line",
           xref="x", yref="paper",
           x0='01/23/2020', y0=0,
           x1='01/23/2020', y1=1,
           line=dict(color="Yellowgreen", dash= 'dot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/26/2020', y0=0,
           x1='03/26/2020', y1=1,
           line=dict(color="Yellowgreen"))]
E1 = [dict(type="line",
           xref="x", yref="paper",
           x0='04/21/2020', y0=0,
           x1='04/21/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dot'))]
E2 = [dict(type="line",
           xref="x", yref="paper",
           x0='05/29/2020', y0=0,
           x1='05/29/2020', y1=1,
           line=dict(color="Crimson", dash= 'dashdot'))]
H1 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/05/2020', y0=0,
           x1='03/05/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dashdot'))]
H2 = [dict(type="line",
           xref="x", yref="paper",
           x0='05/01/2020', y0=0,
           x1='05/01/2020', y1=1,
           line=dict(color="Crimson", dash= 'dash')), 
      dict(type="line",
           xref="x", yref="paper",
           x0='03/28/2020', y0=0,
           x1='03/28/2020', y1=1,
           line=dict(color="Crimson", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/07/2020', y0=0,
           x1='03/07/2020', y1=1,
           line=dict(color="Crimson", dash= 'dot'))]
H3 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/07/2020', y0=0,
           x1='03/07/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dashdot'))]

fig_5_SA.update_layout(
    updatemenus=[
        dict(buttons=list([
            dict(label="None",
                 method="relayout",
                 args=["shapes", []]),
            dict(label="Close school",
                 method="relayout",
                 args=["shapes", C1]),
            dict(label="Close workplace",
                 method="relayout",
                 args=["shapes", C2]),
            dict(label="Cancel public events",
                 method="relayout",
                 args=["shapes", C3]),
            dict(label="Restrict gatherings",
                 method="relayout",
                 args=["shapes", C4]),
            dict(label="Close public transport",
                 method="relayout",
                 args=["shapes", C5]),
            dict(label="Stay at home order",
                 method="relayout",
                 args=["shapes", C6]),
            dict(label="Restrict internal move",
                 method="relayout",
                 args=["shapes", C7]),
            dict(label="Control int. travel",
                 method="relayout",
                 args=["shapes", C8]),
            dict(label="Income support",
                 method="relayout",
                 args=["shapes", E1]),
            dict(label="Debt/contract relief",
                 method="relayout",
                 args=["shapes", E2]),
            dict(label="Public info. campaigns",
                 method="relayout",
                 args=["shapes", H1]),
            dict(label="Testing policy",
                 method="relayout",
                 args=["shapes", H2]),
            dict(label="Contact tracing",
                 method="relayout",
                 args=["shapes", H3]),
            dict(label="All",
                 method="relayout",
                 args=["shapes", C1 + C2 + C3 + C4 + C5 + C6 + C7 + C8 + E1 + E2 + H1 + H2 + H3])
        ]),
        )
    ]
)

fig_5_SA.update_layout(
    annotations=[
        dict(text="Mitigation Type", x=-0.30, xref="paper", y=1.06, yref="paper",
                             align="left", showarrow=False)],
    title_text="South Africa COVID-19 Trend with Mitigation Dates", showlegend=False,
    xaxis =dict(showticklabels = True, tickangle = 45)
)

fig_5_SA.show()


# In[111]:


#Save the figure as html
pio.write_html(fig_5_SA, file='C:/Users/yeaji/Documents/UMBC/Classes/Data606/Figure/fig_5_SA.html', auto_open=True)


# In[112]:


#China case with mitigation dates

fig_5_CHN = go.Figure()

fig_5_CHN.add_trace(
    go.Scatter(x=df_new_mitig.loc[df_new_mitig['Country'] == 'China', 'Date'].tolist(),
               y=df_new_mitig.loc[df_new_mitig['Country'] == 'China', 'Total_case'].tolist(),
               name="China", line=dict(color="#33CFA5")))

C1 = [dict(type="line",
           xref="x", yref="paper",
           x0='06/03/2020', y0=0,
           x1='06/03/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='01/26/2020', y0=0,
           x1='01/26/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dash'))]
C2 = [dict(type="line",
           xref="x", yref="paper",
           x0='01/26/2020', y0=0,
           x1='01/26/2020', y1=1,
           line=dict(color="Crimson", dash= 'dash')), 
      dict(type="line",
           xref="x", yref="paper",
           x0='04/03/2020', y0=0,
           x1='04/03/2020', y1=1,
           line=dict(color="Crimson", dash= 'dashdot'))]
C3 = [dict(type="line",
           xref="x", yref="paper",
           x0='01/22/2020', y0=0,
           x1='01/22/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dashdot'))]
C4 = [dict(type="line",
           xref="x", yref="paper",
           x0='01/22/2020', y0=0,
           x1='01/22/2020', y1=1,
           line=dict(color="RoyalBlue"))]
C5 = [dict(type="line",
           xref="x", yref="paper",
           x0='01/23/2020', y0=0,
           x1='01/23/2020', y1=1,
           line=dict(color="LightSeaGreen", dash= 'dashdot'))]
C6 = [dict(type="line",
           xref="x", yref="paper",
           x0='02/01/2020', y0=0,
           x1='02/01/2020', y1=1,
           line=dict(color="MediumPurple", dash= 'dash')),
     dict(type="line",
           xref="x", yref="paper",
           x0='01/23/2020', y0=0,
           x1='01/23/2020', y1=1,
           line=dict(color="MediumPurple", dash= 'dot'))]
C7 = [dict(type="line",
           xref="x", yref="paper",
           x0='04/08/2020', y0=0,
           x1='04/08/2020', y1=1,
           line=dict(color="LightSkyBlue", dash= 'dot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='01/23/2020', y0=0,
           x1='01/23/2020', y1=1,
           line=dict(color="LightSkyBlue", dash= 'dashdot'))]
C8 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/26/2020', y0=0,
           x1='03/26/2020', y1=1,
           line=dict(color="Yellowgreen", dash= 'dash')),
      dict(type="line",
           xref="x", yref="paper",
           x0='02/25/2020', y0=0,
           x1='02/25/2020', y1=1,
           line=dict(color="Yellowgreen", dash= 'dashdot'))]
E1 = [dict(type="line",
           xref="x", yref="paper",
           x0='04/11/2020', y0=0,
           x1='04/11/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dot'))]
E2 = [dict(type="line",
           xref="x", yref="paper",
           x0='05/21/2020', y0=0,
           x1='05/21/2020', y1=1,
           line=dict(color="Crimson", dash= 'dot'))]
H1 = [dict(type="line",
           xref="x", yref="paper",
           x0='01/05/2020', y0=0,
           x1='01/05/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='01/15/2020', y0=0,
           x1='01/15/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dashdot'))]
H2 = [dict(type="line",
           xref="x", yref="paper",
           x0='02/16/2020', y0=0,
           x1='02/16/2020', y1=1,
           line=dict(color="Crimson", dash= 'dashdot')), 
      dict(type="line",
           xref="x", yref="paper",
           x0='03/31/2020', y0=0,
           x1='03/31/2020', y1=1,
           line=dict(color="Crimson", dash= 'dash'))]
H3 = [dict(type="line",
           xref="x", yref="paper",
           x0='01/05/2020', y0=0,
           x1='01/05/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dashdot'))]

fig_5_CHN.update_layout(
    updatemenus=[
        dict(buttons=list([
            dict(label="None",
                 method="relayout",
                 args=["shapes", []]),
            dict(label="Close school",
                 method="relayout",
                 args=["shapes", C1]),
            dict(label="Close workplace",
                 method="relayout",
                 args=["shapes", C2]),
            dict(label="Cancel public events",
                 method="relayout",
                 args=["shapes", C3]),
            dict(label="Restrict gatherings",
                 method="relayout",
                 args=["shapes", C4]),
            dict(label="Close public transport",
                 method="relayout",
                 args=["shapes", C5]),
            dict(label="Stay at home order",
                 method="relayout",
                 args=["shapes", C6]),
            dict(label="Restrict internal move",
                 method="relayout",
                 args=["shapes", C7]),
            dict(label="Control int. travel",
                 method="relayout",
                 args=["shapes", C8]),
            dict(label="Income support",
                 method="relayout",
                 args=["shapes", E1]),
            dict(label="Debt/contract relief",
                 method="relayout",
                 args=["shapes", E2]),
            dict(label="Public info. campaigns",
                 method="relayout",
                 args=["shapes", H1]),
            dict(label="Testing policy",
                 method="relayout",
                 args=["shapes", H2]),
            dict(label="Contact tracing",
                 method="relayout",
                 args=["shapes", H3]),
            dict(label="All",
                 method="relayout",
                 args=["shapes", C1 + C2 + C3 + C4 + C5 + C6 + C7 + C8 + E1 + E2 + H1 + H2 + H3])
        ]),
        )
    ]
)

fig_5_CHN.update_layout(
    annotations=[
        dict(text="Mitigation Type", x=-0.30, xref="paper", y=1.06, yref="paper",
                             align="left", showarrow=False)],
    title_text="China COVID-19 Trend with Mitigation Dates", showlegend=False,
    xaxis =dict(showticklabels = True, tickangle = 45)
)

fig_5_CHN.show()


# In[113]:


#Save the figure as html
pio.write_html(fig_5_CHN, file='C:/Users/yeaji/Documents/UMBC/Classes/Data606/Figure/fig_5_CHN.html', auto_open=True)


# In[114]:


#Sweden case with mitigation dates

fig_5_SW = go.Figure()

fig_5_SW.add_trace(
    go.Scatter(x=df_new_mitig.loc[df_new_mitig['Country'] == 'Sweden', 'Date'].tolist(),
               y=df_new_mitig.loc[df_new_mitig['Country'] == 'Sweden', 'Total_case'].tolist(),
               name="Sweden", line=dict(color="#F06A6A")))

C1 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/18/2020', y0=0,
           x1='03/18/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dot'))]
C2 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/25/2020', y0=0,
           x1='03/25/2020', y1=1,
           line=dict(color="Crimson", dash= 'dot'))]
C3 = [dict(type="line",
           xref="x", yref="paper",
           x0='04/01/2020', y0=0,
           x1='04/01/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dot'))]
C4 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/12/2020', y0=0,
           x1='03/12/2020', y1=1,
           line=dict(color="RoyalBlue", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/29/2020', y0=0,
           x1='03/29/2020', y1=1,
           line=dict(color="RoyalBlue", dash= 'dash'))]
C5 = [dict(type="line",
           xref="x", yref="paper",
           x0='06/08/2020', y0=0,
           x1='06/08/2020', y1=1,
           line=dict(color="LightSeaGreen", dash= 'dot'))]
C7 = [dict(type="line",
           xref="x", yref="paper",
           x0='04/04/2020', y0=0,
           x1='04/04/2020', y1=1,
           line=dict(color="LightSkyBlue", dash= 'dot'))]
C8 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/19/2020', y0=0,
           x1='03/19/2020', y1=1,
           line=dict(color="Yellowgreen", dash= 'dash'))]
E1 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/11/2020', y0=0,
           x1='03/11/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dashdot'))]
E2 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/16/2020', y0=0,
           x1='03/16/2020', y1=1,
           line=dict(color="Crimson", dash= 'dot'))]
H1 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/09/2020', y0=0,
           x1='03/09/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dashdot'))]
H2 = [dict(type="line",
           xref="x", yref="paper",
           x0='06/04/2020', y0=0,
           x1='06/04/2020', y1=1,
           line=dict(color="Crimson", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='01/31/2020', y0=0,
           x1='01/31/2020', y1=1,
           line=dict(color="Crimson", dash= 'dot'))]
H3 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/23/2020', y0=0,
           x1='03/23/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='01/31/2020', y0=0,
           x1='01/31/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dashdot'))]

fig_5_SW.update_layout(
    updatemenus=[
        dict(buttons=list([
            dict(label="None",
                 method="relayout",
                 args=["shapes", []]),
            dict(label="Close school",
                 method="relayout",
                 args=["shapes", C1]),
            dict(label="Close workplace",
                 method="relayout",
                 args=["shapes", C2]),
            dict(label="Cancel public events",
                 method="relayout",
                 args=["shapes", C3]),
            dict(label="Restrict gatherings",
                 method="relayout",
                 args=["shapes", C4]),
            dict(label="Close public transport",
                 method="relayout",
                 args=["shapes", C5]),
            dict(label="Restrict internal move",
                 method="relayout",
                 args=["shapes", C7]),
            dict(label="Control int. travel",
                 method="relayout",
                 args=["shapes", C8]),
            dict(label="Income support",
                 method="relayout",
                 args=["shapes", E1]),
            dict(label="Debt/contract relief",
                 method="relayout",
                 args=["shapes", E2]),
            dict(label="Public info. campaigns",
                 method="relayout",
                 args=["shapes", H1]),
            dict(label="Testing policy",
                 method="relayout",
                 args=["shapes", H2]),
            dict(label="Contact tracing",
                 method="relayout",
                 args=["shapes", H3]),
            dict(label="All",
                 method="relayout",
                 args=["shapes", C1 + C2 + C3 + C4 + C5 + C7 + C8 + E1 + E2 + H1 + H2 + H3])
        ]),
        )
    ]
)

fig_5_SW.update_layout(
    annotations=[
        dict(text="Mitigation Type", x=-0.30, xref="paper", y=1.06, yref="paper",
                             align="left", showarrow=False)],
    title_text="Sweden COVID-19 Trend with Mitigation Dates", showlegend=False,
    xaxis =dict(showticklabels = True, tickangle = 45)
)

fig_5_SW.show()


# In[115]:


#Save the figure as html
pio.write_html(fig_5_SW, file='C:/Users/yeaji/Documents/UMBC/Classes/Data606/Figure/fig_5_SW.html', auto_open=True)


# In[116]:


#Singapore case with mitigation dates

fig_5_SI = go.Figure()

fig_5_SI.add_trace(
    go.Scatter(x=df_new_mitig.loc[df_new_mitig['Country'] == 'Singapore', 'Date'].tolist(),
               y=df_new_mitig.loc[df_new_mitig['Country'] == 'Singapore', 'Total_case'].tolist(),
               name="Singapore", line=dict(color="#33CFA5")))

C1 = [dict(type="line",
           xref="x", yref="paper",
           x0='06/02/2020', y0=0,
           x1='06/02/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='04/08/2020', y0=0,
           x1='04/08/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dash'))]
C2 = [dict(type="line",
           xref="x", yref="paper",
           x0='04/07/2020', y0=0,
           x1='04/07/2020', y1=1,
           line=dict(color="Crimson", dash= 'dash')), 
      dict(type="line",
           xref="x", yref="paper",
           x0='05/12/2020', y0=0,
           x1='05/12/2020', y1=1,
           line=dict(color="Crimson", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='06/19/2020', y0=0,
           x1='06/19/2020', y1=1,
           line=dict(color="Crimson", dash= 'dot'))]
C3 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/13/2020', y0=0,
           x1='03/13/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='02/07/2020', y0=0,
           x1='02/07/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dot'))]
C4 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/13/2020', y0=0,
           x1='03/13/2020', y1=1,
           line=dict(color="RoyalBlue", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/27/2020', y0=0,
           x1='03/27/2020', y1=1,
           line=dict(color="RoyalBlue", dash= 'dash')),
      dict(type="line",
           xref="x", yref="paper",
           x0='04/08/2020', y0=0,
           x1='04/08/2020', y1=1,
           line=dict(color="RoyalBlue"))]
C5 = [dict(type="line",
           xref="x", yref="paper",
           x0='04/14/2020', y0=0,
           x1='04/14/2020', y1=1,
           line=dict(color="LightSeaGreen", dash= 'dot'))]
C6 = [dict(type="line",
           xref="x", yref="paper",
           x0='04/08/2020', y0=0,
           x1='04/08/2020', y1=1,
           line=dict(color="MediumPurple", dash= 'dashdot')),
     dict(type="line",
           xref="x", yref="paper",
           x0='04/03/2020', y0=0,
           x1='04/03/2020', y1=1,
           line=dict(color="MediumPurple", dash= 'dot'))]
C7 = [dict(type="line",
           xref="x", yref="paper",
           x0='04/03/2020', y0=0,
           x1='04/03/2020', y1=1,
           line=dict(color="LightSkyBlue", dash= 'dot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='04/08/2020', y0=0,
           x1='04/08/2020', y1=1,
           line=dict(color="LightSkyBlue", dash= 'dashdot'))]
C8 = [dict(type="line",
           xref="x", yref="paper",
           x0='01/23/2020', y0=0,
           x1='01/23/2020', y1=1,
           line=dict(color="Yellowgreen", dash= 'dash')),
      dict(type="line",
           xref="x", yref="paper",
           x0='04/10/2020', y0=0,
           x1='04/10/2020', y1=1,
           line=dict(color="Yellowgreen", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='01/02/2020', y0=0,
           x1='01/02/2020', y1=1,
           line=dict(color="Yellowgreen", dash= 'dot'))]
E1 = [dict(type="line",
           xref="x", yref="paper",
           x0='04/01/2020', y0=0,
           x1='04/01/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dot'))]
E2 = [dict(type="line",
           xref="x", yref="paper",
           x0='04/20/2020', y0=0,
           x1='04/20/2020', y1=1,
           line=dict(color="Crimson", dash= 'dashdot'))]
H1 = [dict(type="line",
           xref="x", yref="paper",
           x0='01/02/2020', y0=0,
           x1='01/02/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dashdot'))]
H2 = [dict(type="line",
           xref="x", yref="paper",
           x0='01/23/2020', y0=0,
           x1='01/23/2020', y1=1,
           line=dict(color="Crimson", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='01/02/2020', y0=0,
           x1='01/02/2020', y1=1,
           line=dict(color="Crimson", dash= 'dot'))]
H3 = [dict(type="line",
           xref="x", yref="paper",
           x0='01/20/2020', y0=0,
           x1='01/20/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dashdot'))]

fig_5_SI.update_layout(
    updatemenus=[
        dict(buttons=list([
            dict(label="None",
                 method="relayout",
                 args=["shapes", []]),
            dict(label="Close school",
                 method="relayout",
                 args=["shapes", C1]),
            dict(label="Close workplace",
                 method="relayout",
                 args=["shapes", C2]),
            dict(label="Cancel public events",
                 method="relayout",
                 args=["shapes", C3]),
            dict(label="Restrict gatherings",
                 method="relayout",
                 args=["shapes", C4]),
            dict(label="Close public transport",
                 method="relayout",
                 args=["shapes", C5]),
            dict(label="Stay at home order",
                 method="relayout",
                 args=["shapes", C6]),
            dict(label="Restrict internal move",
                 method="relayout",
                 args=["shapes", C7]),
            dict(label="Control int. travel",
                 method="relayout",
                 args=["shapes", C8]),
            dict(label="Income support",
                 method="relayout",
                 args=["shapes", E1]),
            dict(label="Debt/contract relief",
                 method="relayout",
                 args=["shapes", E2]),
            dict(label="Public info. campaigns",
                 method="relayout",
                 args=["shapes", H1]),
            dict(label="Testing policy",
                 method="relayout",
                 args=["shapes", H2]),
            dict(label="Contact tracing",
                 method="relayout",
                 args=["shapes", H3]),
            dict(label="All",
                 method="relayout",
                 args=["shapes", C1 + C2 + C3 + C4 + C5 + C6 + C7 + C8 + E1 + E2 + H1 + H2 + H3])
        ]),
        )
    ]
)

fig_5_SI.update_layout(
    annotations=[
        dict(text="Mitigation Type", x=-0.30, xref="paper", y=1.06, yref="paper",
                             align="left", showarrow=False)],
    title_text="Singapore COVID-19 Trend with Mitigation Dates", showlegend=False,
    xaxis =dict(showticklabels = True, tickangle = 45)
)

fig_5_SI.show()


# In[117]:


#Save the figure as html
pio.write_html(fig_5_SI, file='C:/Users/yeaji/Documents/UMBC/Classes/Data606/Figure/fig_5_SI.html', auto_open=True)


# In[118]:


#Slovenia case with mitigation dates

fig_5_SL = go.Figure()

fig_5_SL.add_trace(
    go.Scatter(x=df_new_mitig.loc[df_new_mitig['Country'] == 'Slovenia', 'Date'].tolist(),
               y=df_new_mitig.loc[df_new_mitig['Country'] == 'Slovenia', 'Total_case'].tolist(),
               name="Slovenia", line=dict(color="#F06A6A")))

C1 = [dict(type="line",
           xref="x", yref="paper",
           x0='05/18/2020', y0=0,
           x1='05/18/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/16/2020', y0=0,
           x1='03/16/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dash'))]
C2 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/20/2020', y0=0,
           x1='03/20/2020', y1=1,
           line=dict(color="Crimson", dash= 'dash')), 
      dict(type="line",
           xref="x", yref="paper",
           x0='04/20/2020', y0=0,
           x1='04/20/2020', y1=1,
           line=dict(color="Crimson", dash= 'dashdot'))]
C3 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/19/2020', y0=0,
           x1='03/19/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dashdot'))]
C4 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/07/2020', y0=0,
           x1='03/07/2020', y1=1,
           line=dict(color="RoyalBlue", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='05/14/2020', y0=0,
           x1='05/14/2020', y1=1,
           line=dict(color="RoyalBlue", dash= 'dash')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/19/2020', y0=0,
           x1='03/19/2020', y1=1,
           line=dict(color="RoyalBlue"))]
C5 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/16/2020', y0=0,
           x1='03/16/2020', y1=1,
           line=dict(color="LightSeaGreen", dash= 'dashdot'))]
C6 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/14/2020', y0=0,
           x1='03/14/2020', y1=1,
           line=dict(color="MediumPurple", dash= 'dot'))]
C7 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/30/2020', y0=0,
           x1='03/30/2020', y1=1,
           line=dict(color="LightSkyBlue", dash= 'dashdot'))]
C8 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/10/2020', y0=0,
           x1='03/10/2020', y1=1,
           line=dict(color="Yellowgreen", dash= 'dash')),
      dict(type="line",
           xref="x", yref="paper",
           x0='05/14/2020', y0=0,
           x1='05/14/2020', y1=1,
           line=dict(color="Yellowgreen", dash= 'dashdot'))]
E1 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/30/2020', y0=0,
           x1='03/30/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dot'))]
E2 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/19/2020', y0=0,
           x1='03/19/2020', y1=1,
           line=dict(color="Crimson", dash= 'dashdot'))]
H1 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/04/2020', y0=0,
           x1='03/04/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dashdot'))]
H2 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/04/2020', y0=0,
           x1='03/04/2020', y1=1,
           line=dict(color="Crimson", dash= 'dashdot'))]
H3 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/04/2020', y0=0,
           x1='03/04/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dashdot'))]

fig_5_SL.update_layout(
    updatemenus=[
        dict(buttons=list([
            dict(label="None",
                 method="relayout",
                 args=["shapes", []]),
            dict(label="Close school",
                 method="relayout",
                 args=["shapes", C1]),
            dict(label="Close workplace",
                 method="relayout",
                 args=["shapes", C2]),
            dict(label="Cancel public events",
                 method="relayout",
                 args=["shapes", C3]),
            dict(label="Restrict gatherings",
                 method="relayout",
                 args=["shapes", C4]),
            dict(label="Close public transport",
                 method="relayout",
                 args=["shapes", C5]),
            dict(label="Stay at home order",
                 method="relayout",
                 args=["shapes", C6]),
            dict(label="Restrict internal move",
                 method="relayout",
                 args=["shapes", C7]),
            dict(label="Control int. travel",
                 method="relayout",
                 args=["shapes", C8]),
            dict(label="Income support",
                 method="relayout",
                 args=["shapes", E1]),
            dict(label="Debt/contract relief",
                 method="relayout",
                 args=["shapes", E2]),
            dict(label="Public info. campaigns",
                 method="relayout",
                 args=["shapes", H1]),
            dict(label="Testing policy",
                 method="relayout",
                 args=["shapes", H2]),
            dict(label="Contact tracing",
                 method="relayout",
                 args=["shapes", H3]),
            dict(label="All",
                 method="relayout",
                 args=["shapes", C1 + C2 + C3 + C4 + C5 + C6 + C7 + C8 + E1 + E2 + H1 + H2 + H3])
        ]),
        )
    ]
)

fig_5_SL.update_layout(
    annotations=[
        dict(text="Mitigation Type", x=-0.30, xref="paper", y=1.06, yref="paper",
                             align="left", showarrow=False)],
    title_text="Slovenia COVID-19 Trend with Mitigation Dates", showlegend=False,
    xaxis =dict(showticklabels = True, tickangle = 45)
)

fig_5_SL.show()


# In[119]:


#Save the figure as html
pio.write_html(fig_5_SL, file='C:/Users/yeaji/Documents/UMBC/Classes/Data606/Figure/fig_5_SL.html', auto_open=True)


# In[120]:


#Taiwan case with mitigation dates

fig_5_TA = go.Figure()

fig_5_TA.add_trace(
    go.Scatter(x=df_new_mitig.loc[df_new_mitig['Country'] == 'Taiwan*', 'Date'].tolist(),
               y=df_new_mitig.loc[df_new_mitig['Country'] == 'Taiwan*', 'Total_case'].tolist(),
               name="Taiwan*", line=dict(color="#33CFA5")))


C1 = [dict(type="line",
           xref="x", yref="paper",
           x0='02/02/2020', y0=0,
           x1='02/02/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dash'))]
C3 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/05/2020', y0=0,
           x1='03/05/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dot'))]
C8 = [dict(type="line",
           xref="x", yref="paper",
           x0='01/23/2020', y0=0,
           x1='01/23/2020', y1=1,
           line=dict(color="Yellowgreen", dash= 'dash')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/19/2020', y0=0,
           x1='03/19/2020', y1=1,
           line=dict(color="Yellowgreen"))]
E1 = [dict(type="line",
           xref="x", yref="paper",
           x0='04/21/2020', y0=0,
           x1='04/21/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dot'))]
H1 = [dict(type="line",
           xref="x", yref="paper",
           x0='01/02/2020', y0=0,
           x1='01/02/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='01/20/2020', y0=0,
           x1='01/20/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dashdot'))]
H2 = [dict(type="line",
           xref="x", yref="paper",
           x0='05/23/2020', y0=0,
           x1='05/23/2020', y1=1,
           line=dict(color="Crimson", dash= 'dash')), 
      dict(type="line",
           xref="x", yref="paper",
           x0='02/16/2020', y0=0,
           x1='02/16/2020', y1=1,
           line=dict(color="Crimson", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='01/20/2020', y0=0,
           x1='01/20/2020', y1=1,
           line=dict(color="Crimson", dash= 'dot'))]
H3 = [dict(type="line",
           xref="x", yref="paper",
           x0='01/21/2020', y0=0,
           x1='01/21/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dashdot'))]

fig_5_TA.update_layout(
    updatemenus=[
        dict(buttons=list([
            dict(label="None",
                 method="relayout",
                 args=["shapes", []]),
            dict(label="Close school",
                 method="relayout",
                 args=["shapes", C1]),
            dict(label="Cancel public events",
                 method="relayout",
                 args=["shapes", C3]),
            dict(label="Control int. travel",
                 method="relayout",
                 args=["shapes", C8]),
            dict(label="Income support",
                 method="relayout",
                 args=["shapes", E1]),
            dict(label="Public info. campaigns",
                 method="relayout",
                 args=["shapes", H1]),
            dict(label="Testing policy",
                 method="relayout",
                 args=["shapes", H2]),
            dict(label="Contact tracing",
                 method="relayout",
                 args=["shapes", H3]),
            dict(label="All",
                 method="relayout",
                 args=["shapes", C1 + C3 + C8 + E1 + H1 + H2 + H3])
        ]),
        )
    ]
)

fig_5_TA.update_layout(
    annotations=[
        dict(text="Mitigation Type", x=-0.30, xref="paper", y=1.06, yref="paper",
                             align="left", showarrow=False)],
    title_text="Taiwan COVID-19 Trend with Mitigation Dates", showlegend=False,
    xaxis =dict(showticklabels = True, tickangle = 45)
)

fig_5_TA.show()


# In[121]:


#Save the figure as html
pio.write_html(fig_5_TA, file='C:/Users/yeaji/Documents/UMBC/Classes/Data606/Figure/fig_5_TA.html', auto_open=True)


# In[122]:


#Vietnam case with mitigation dates

fig_5_VI = go.Figure()


fig_5_VI.add_trace(
    go.Scatter(x=df_new_mitig.loc[df_new_mitig['Country'] == 'Vietnam', 'Date'].tolist(),
               y=df_new_mitig.loc[df_new_mitig['Country'] == 'Vietnam', 'Total_case'].tolist(),
               name="Vietnam", line=dict(color="#33CFA5")))


C1 = [dict(type="line",
           xref="x", yref="paper",
           x0='01/29/2020', y0=0,
           x1='01/29/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dash'))]
C2 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/27/2020', y0=0,
           x1='03/27/2020', y1=1,
           line=dict(color="Crimson", dash= 'dash')), 
      dict(type="line",
           xref="x", yref="paper",
           x0='03/25/2020', y0=0,
           x1='03/25/2020', y1=1,
           line=dict(color="Crimson", dash= 'dashdot'))]
C3 = [dict(type="line",
           xref="x", yref="paper",
           x0='06/16/2020', y0=0,
           x1='06/16/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='02/08/2020', y0=0,
           x1='02/08/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dashdot'))]
C4 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/26/2020', y0=0,
           x1='03/26/2020', y1=1,
           line=dict(color="RoyalBlue", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='04/22/2020', y0=0,
           x1='04/22/2020', y1=1,
           line=dict(color="RoyalBlue", dash= 'dash')),
      dict(type="line",
           xref="x", yref="paper",
           x0='04/01/2020', y0=0,
           x1='04/01/2020', y1=1,
           line=dict(color="RoyalBlue"))]
C5 = [dict(type="line",
           xref="x", yref="paper",
           x0='04/25/2020', y0=0,
           x1='04/25/2020', y1=1,
           line=dict(color="LightSeaGreen", dash= 'dot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/28/2020', y0=0,
           x1='03/28/2020', y1=1,
           line=dict(color="LightSeaGreen", dash= 'dashdot'))]
C6 = [dict(type="line",
           xref="x", yref="paper",
           x0='04/01/2020', y0=0,
           x1='04/01/2020', y1=1,
           line=dict(color="MediumPurple", dash= 'dashdot'))]
C7 = [dict(type="line",
           xref="x", yref="paper",
           x0='06/16/2020', y0=0,
           x1='06/16/2020', y1=1,
           line=dict(color="LightSkyBlue", dash= 'dot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='02/13/2020', y0=0,
           x1='02/13/2020', y1=1,
           line=dict(color="LightSkyBlue", dash= 'dashdot'))]
C8 = [dict(type="line",
           xref="x", yref="paper",
           x0='02/01/2020', y0=0,
           x1='02/01/2020', y1=1,
           line=dict(color="Yellowgreen", dash= 'dash')),
      dict(type="line",
           xref="x", yref="paper",
           x0='01/30/2020', y0=0,
           x1='01/30/2020', y1=1,
           line=dict(color="Yellowgreen", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='01/25/2020', y0=0,
           x1='01/25/2020', y1=1,
           line=dict(color="Yellowgreen", dash= 'dot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/22/2020', y0=0,
           x1='03/22/2020', y1=1,
           line=dict(color="Yellowgreen"))]
E1 = [dict(type="line",
           xref="x", yref="paper",
           x0='04/09/2020', y0=0,
           x1='04/09/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dot'))]
H1 = [dict(type="line",
           xref="x", yref="paper",
           x0='01/29/2020', y0=0,
           x1='01/29/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dashdot'))]
H2 = [dict(type="line",
           xref="x", yref="paper",
           x0='04/09/2020', y0=0,
           x1='04/09/2020', y1=1,
           line=dict(color="Crimson", dash= 'dash')), 
      dict(type="line",
           xref="x", yref="paper",
           x0='02/07/2020', y0=0,
           x1='02/07/2020', y1=1,
           line=dict(color="Crimson", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='01/27/2020', y0=0,
           x1='01/27/2020', y1=1,
           line=dict(color="Crimson", dash= 'dot'))]
H3 = [dict(type="line",
           xref="x", yref="paper",
           x0='02/07/2020', y0=0,
           x1='02/07/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/07/2020', y0=0,
           x1='03/07/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dashdot'))]

fig_5_VI.update_layout(
    updatemenus=[
        dict(buttons=list([
            dict(label="None",
                 method="relayout",
                 args=["shapes", []]),
            dict(label="Close school",
                 method="relayout",
                 args=["shapes", C1]),
            dict(label="Close workplace",
                 method="relayout",
                 args=["shapes", C2]),
            dict(label="Cancel public events",
                 method="relayout",
                 args=["shapes", C3]),
            dict(label="Restrict gatherings",
                 method="relayout",
                 args=["shapes", C4]),
            dict(label="Close public transport",
                 method="relayout",
                 args=["shapes", C5]),
            dict(label="Stay at home order",
                 method="relayout",
                 args=["shapes", C6]),
            dict(label="Restrict internal move",
                 method="relayout",
                 args=["shapes", C7]),
            dict(label="Control int. travel",
                 method="relayout",
                 args=["shapes", C8]),
            dict(label="Income support",
                 method="relayout",
                 args=["shapes", E1]),
            dict(label="Public info. campaigns",
                 method="relayout",
                 args=["shapes", H1]),
            dict(label="Testing policy",
                 method="relayout",
                 args=["shapes", H2]),
            dict(label="Contact tracing",
                 method="relayout",
                 args=["shapes", H3]),
            dict(label="All",
                 method="relayout",
                 args=["shapes", C1 + C2 + C3 + C4 + C5 + C6 + C7 + C8 + E1 + H1 + H2 + H3])
        ]),
        )
    ]
)

fig_5_VI.update_layout(
    annotations=[
        dict(text="Mitigation Type", x=-0.30, xref="paper", y=1.06, yref="paper",
                             align="left", showarrow=False)],
    title_text="Vietnam COVID-19 Trend with Mitigation Dates", showlegend=False,
    xaxis =dict(showticklabels = True, tickangle = 45)
)

fig_5_VI.show()


# In[123]:


#Save the figure as html
pio.write_html(fig_5_VI, file='C:/Users/yeaji/Documents/UMBC/Classes/Data606/Figure/fig_5_VI.html', auto_open=True)


# In[124]:


#Cambodia case with mitigation dates

fig_5_CA = go.Figure()

fig_5_CA.add_trace(
    go.Scatter(x=df_new_mitig.loc[df_new_mitig['Country'] == 'Cambodia', 'Date'].tolist(),
               y=df_new_mitig.loc[df_new_mitig['Country'] == 'Cambodia', 'Total_case'].tolist(),
               name="Cambodia", line=dict(color="#33CFA5")))

C1 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/07/2020', y0=0,
           x1='03/07/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dash'))]
C2 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/18/2020', y0=0,
           x1='03/18/2020', y1=1,
           line=dict(color="Crimson", dash= 'dashdot'))]
C3 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/18/2020', y0=0,
           x1='03/18/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dashdot'))]
C4 = [dict(type="line",
           xref="x", yref="paper",
           x0='06/01/2020', y0=0,
           x1='06/01/2020', y1=1,
           line=dict(color="RoyalBlue", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/17/2020', y0=0,
           x1='03/17/2020', y1=1,
           line=dict(color="RoyalBlue"))]
C7 = [dict(type="line",
           xref="x", yref="paper",
           x0='04/09/2020', y0=0,
           x1='04/09/2020', y1=1,
           line=dict(color="LightSkyBlue", dash= 'dashdot'))]
C8 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/13/2020', y0=0,
           x1='03/13/2020', y1=1,
           line=dict(color="Yellowgreen", dash= 'dash')),
      dict(type="line",
           xref="x", yref="paper",
           x0='04/08/2020', y0=0,
           x1='04/08/2020', y1=1,
           line=dict(color="Yellowgreen", dash= 'dashdot'))]
E2 = [dict(type="line",
           xref="x", yref="paper",
           x0='04/08/2020', y0=0,
           x1='04/08/2020', y1=1,
           line=dict(color="Crimson", dash= 'dot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='06/16/2020', y0=0,
           x1='06/16/2020', y1=1,
           line=dict(color="Crimson", dash= 'dashdot'))]
H1 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/26/2020', y0=0,
           x1='03/26/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dashdot'))]
H2 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/16/2020', y0=0,
           x1='03/16/2020', y1=1,
           line=dict(color="Crimson", dash= 'dashdot'))]
H3 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/16/2020', y0=0,
           x1='03/16/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dot'))]

fig_5_CA.update_layout(
    updatemenus=[
        dict(buttons=list([
            dict(label="None",
                 method="relayout",
                 args=["shapes", []]),
            dict(label="Close school",
                 method="relayout",
                 args=["shapes", C1]),
            dict(label="Close workplace",
                 method="relayout",
                 args=["shapes", C2]),
            dict(label="Cancel public events",
                 method="relayout",
                 args=["shapes", C3]),
            dict(label="Restrict gatherings",
                 method="relayout",
                 args=["shapes", C4]),
            dict(label="Restrict internal move",
                 method="relayout",
                 args=["shapes", C7]),
            dict(label="Control int. travel",
                 method="relayout",
                 args=["shapes", C8]),
            dict(label="Debt/contract relief",
                 method="relayout",
                 args=["shapes", E2]),
            dict(label="Public info. campaigns",
                 method="relayout",
                 args=["shapes", H1]),
            dict(label="Testing policy",
                 method="relayout",
                 args=["shapes", H2]),
            dict(label="Contact tracing",
                 method="relayout",
                 args=["shapes", H3]),
            dict(label="All",
                 method="relayout",
                 args=["shapes", C1 + C2 + C3 + C4 + C7 + C8 + E2 + H1 + H2 + H3])
        ]),
        )
    ]
)

fig_5_CA.update_layout(
    annotations=[
        dict(text="Mitigation Type", x=-0.30, xref="paper", y=1.06, yref="paper",
                             align="left", showarrow=False)],
    title_text="Cambodia COVID-19 Trend with Mitigation Dates", showlegend=False,
    xaxis =dict(showticklabels = True, tickangle = 45)
)

fig_5_CA.show()


# In[125]:


#Save the figure as html
pio.write_html(fig_5_CA, file='C:/Users/yeaji/Documents/UMBC/Classes/Data606/Figure/fig_5_CA.html', auto_open=True)


# In[126]:


#Laos case with mitigation dates

fig_5_LA = go.Figure()

fig_5_LA.add_trace(
    go.Scatter(x=df_new_mitig.loc[df_new_mitig['Country'] == 'Laos', 'Date'].tolist(),
               y=df_new_mitig.loc[df_new_mitig['Country'] == 'Laos', 'Total_case'].tolist(),
               name="Laos", line=dict(color="#33CFA5")))

C1 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/17/2020', y0=0,
           x1='03/17/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/19/2020', y0=0,
           x1='03/19/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dash'))]
C2 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/30/2020', y0=0,
           x1='03/30/2020', y1=1,
           line=dict(color="Crimson", dash= 'dash')), 
      dict(type="line",
           xref="x", yref="paper",
           x0='05/04/2020', y0=0,
           x1='05/04/2020', y1=1,
           line=dict(color="Crimson", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/11/2020', y0=0,
           x1='03/11/2020', y1=1,
           line=dict(color="Crimson", dash= 'dot'))]
C3 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/11/2020', y0=0,
           x1='03/11/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/30/2020', y0=0,
           x1='03/30/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dashdot'))]
C4 = [dict(type="line",
           xref="x", yref="paper",
           x0='06/01/2020', y0=0,
           x1='06/01/2020', y1=1,
           line=dict(color="RoyalBlue", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='05/18/2020', y0=0,
           x1='05/18/2020', y1=1,
           line=dict(color="RoyalBlue", dash= 'dash')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/30/2020', y0=0,
           x1='03/30/2020', y1=1,
           line=dict(color="RoyalBlue"))]
C5 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/30/2020', y0=0,
           x1='03/30/2020', y1=1,
           line=dict(color="LightSeaGreen", dash= 'dashdot'))]
C6 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/30/2020', y0=0,
           x1='03/30/2020', y1=1,
           line=dict(color="MediumPurple", dash= 'dashdot'))]
C7 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/30/2020', y0=0,
           x1='03/30/2020', y1=1,
           line=dict(color="LightSkyBlue", dash= 'dashdot'))]
C8 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/26/2020', y0=0,
           x1='03/26/2020', y1=1,
           line=dict(color="Yellowgreen", dash= 'dash')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/15/2020', y0=0,
           x1='03/15/2020', y1=1,
           line=dict(color="Yellowgreen", dash= 'dashdot')),
      dict(type="line",
           xref="x", yref="paper",
           x0='03/30/2020', y0=0,
           x1='03/30/2020', y1=1,
           line=dict(color="Yellowgreen"))]
E1 = [dict(type="line",
           xref="x", yref="paper",
           x0='05/01/2020', y0=0,
           x1='05/01/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dot'))]
H1 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/30/2020', y0=0,
           x1='03/30/2020', y1=1,
           line=dict(color="DarkOrange", dash= 'dashdot'))]
H2 = [dict(type="line",
           xref="x", yref="paper",
           x0='03/17/2020', y0=0,
           x1='03/17/2020', y1=1,
           line=dict(color="Crimson", dash= 'dot'))]
H3 = [dict(type="line",
           xref="x", yref="paper",
           x0='04/06/2020', y0=0,
           x1='04/06/2020', y1=1,
           line=dict(color="RebeccaPurple", dash= 'dashdot'))]

fig_5_LA.update_layout(
    updatemenus=[
        dict(buttons=list([
            dict(label="None",
                 method="relayout",
                 args=["shapes", []]),
            dict(label="Close school",
                 method="relayout",
                 args=["shapes", C1]),
            dict(label="Close workplace",
                 method="relayout",
                 args=["shapes", C2]),
            dict(label="Cancel public events",
                 method="relayout",
                 args=["shapes", C3]),
            dict(label="Restrict gatherings",
                 method="relayout",
                 args=["shapes", C4]),
            dict(label="Close public transport",
                 method="relayout",
                 args=["shapes", C5]),
            dict(label="Stay at home order",
                 method="relayout",
                 args=["shapes", C6]),
            dict(label="Restrict internal move",
                 method="relayout",
                 args=["shapes", C7]),
            dict(label="Control int. travel",
                 method="relayout",
                 args=["shapes", C8]),
            dict(label="Income support",
                 method="relayout",
                 args=["shapes", E1]),
            dict(label="Public info. campaigns",
                 method="relayout",
                 args=["shapes", H1]),
            dict(label="Testing policy",
                 method="relayout",
                 args=["shapes", H2]),
            dict(label="Contact tracing",
                 method="relayout",
                 args=["shapes", H3]),
            dict(label="All",
                 method="relayout",
                 args=["shapes", C1 + C2 + C3 + C4 + C5 + C6 + C7 + C8 + E1 + H1 + H2 + H3])
        ]),
        )
    ]
)

fig_5_LA.update_layout(
    annotations=[
        dict(text="Mitigation Type", x=-0.30, xref="paper", y=1.06, yref="paper",
                             align="left", showarrow=False)],
    title_text="Laos COVID-19 Trend with Mitigation Dates", showlegend=False,
    xaxis =dict(showticklabels = True, tickangle = 45)
)

fig_5_LA.show()


# In[127]:


#Save the figure as html
pio.write_html(fig_5_LA, file='C:/Users/yeaji/Documents/UMBC/Classes/Data606/Figure/fig_5_LA.html', auto_open=True)


# In[128]:


#Load the mobility datasets

df_mobil = pd.read_csv(r"C:\Users\yeaji\Documents\UMBC\Classes\Data606\data_2\Global_Mobility_Report.csv", 
                       dtype={"country_region": "object", "country_region_code": "object", "sub_region_1": "object",
                             "sub_region_2": "object", "date": "string"})
df_mobil.head(-5)


# In[129]:


#Check the data type and null value numbers
df_mobil.info()


# In[130]:


#Change country_region to Country, drop country_region_code, sub_regions, 
#drop percent change from baseline from column names and change date format

df_mobil.rename(columns={'country_region': 'Country', 'date': 'Date', 
                         'retail_and_recreation_percent_change_from_baseline': 'retail_recreation', 
                         'grocery_and_pharmacy_percent_change_from_baseline': 'grocery_pharmacy', 
                         'parks_percent_change_from_baseline': 'parks', 'transit_stations_percent_change_from_baseline': 
                         'transit_stations', 'workplaces_percent_change_from_baseline': 'workplaces', 
                         'residential_percent_change_from_baseline': 'residential',}, inplace=True)

df_mobil = df_mobil.drop(['country_region_code'], axis=1)
df_mobil = df_mobil.drop(['sub_region_2'], axis=1)
df_mobil = df_mobil.drop(['iso_3166_2_code'], axis=1)
df_mobil = df_mobil.drop(['census_fips_code'], axis=1)

df_mobil


# In[131]:


#Check how many countries are in mitigation dataset

df_mobil.Country.nunique()


# In[132]:


#Drop the rows that have sub_region_1 since those are another entries in countries under that region

df_mobil = df_mobil[pd.isnull(df_mobil['sub_region_1'])]
df_mobil


# In[133]:


#Drop other countries other than 23 countries on country_25 list and drop sub_region_1
#Change Date format
 
df_mobil = df_mobil.loc[df_mobil.Country.isin(country_25)]
df_mobil = df_mobil.drop(['sub_region_1'], axis=1)
df_mobil['Date'] = pd.to_datetime(df_mobil['Date']).dt.strftime('%m/%d/%Y')
df_mobil


# In[134]:


#Check how many countries are in mitigation dataset

df_mobil.Country.nunique()


# In[135]:


#Change Names in df_mobil to match names in df_new_melt in 3 countries and get total case from df_new_melt

df_mobil = df_mobil.replace({'Country' : {'South Korea':'Korea, South', 'Taiwan':'Taiwan*', 'United States':'US'}})

df_mobil = pd.merge(df_mobil,df_new_mitig[['Country', 'Date','Total_case']],on=['Country', 'Date'], how='left')

df_mobil


# In[ ]:


#Pairplot to see the correlation of numeric columns

sns.set (style="ticks")
fig_6 = sns.pairplot(df_mobil, hue = 'Country')
plt.subplots_adjust(top=1.0)
fig_6.fig.suptitle('Correlation between mobility and COVID-19', y=1.05, fontsize=24) 


# In[407]:


#Save the figure for P3
fig_6.savefig("C:/Users/yeaji/Documents/UMBC/Classes/Data606/Figure/fig_6.png")


# In[136]:


#Make new column of New_case

df_mobil['New_case'] = df_mobil.groupby(['Country'])['Total_case'].diff().fillna(0)

df_mobil


# In[137]:


#Convert New_case values from float to int

df_mobil['New_case'] = df_mobil['New_case'].astype(int)
df_mobil


# In[138]:


#save this as csv

df_mobil.to_csv(r"C:\Users\yeaji\Documents\UMBC\Classes\Data606\mobil.csv")


# In[139]:


#Check negative numbers in New_case

df_mobil['New_case'][df_mobil['New_case'] < 0].count()


# In[140]:


#Print them to see where they are and how much the values are

df_mobil.loc[df_mobil['New_case'] < 0]


# In[141]:


#Will make the negative values to 0 in New_case since it doesn't make sense to have negative cases
#Probably some counting error or correction from data source

a = np.array(df_mobil['New_case'].values.tolist())
df_mobil['New_case'] = np.where(a < 0, 0, a).tolist()
df_mobil.loc[df_mobil['New_case'] < 0].count()


# In[142]:


#Make a graph that overlay New cases in US with different mitigations as dropdown menu

fig_6_US = go.Figure()

fig_6_US.add_trace(
    go.Bar(x=df_mobil.loc[df_mobil['Country'] == 'US', 'Date'].tolist(), 
           y=df_mobil.loc[df_mobil['Country'] == 'US', 'New_case'].tolist(), 
           name="New cases"))

fig_6_US.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'US', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'US', 'retail_recreation'].tolist(), 
               name="Retail & Recreation", line=dict(color="#33CFA5"), yaxis='y2'))

fig_6_US.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'US', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'US', 'grocery_pharmacy'].tolist(), 
               name="Grocery & Pharmacy", line=dict(color="#ffc60a"), yaxis='y2'))

fig_6_US.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'US', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'US', 'parks'].tolist(), 
               name="Parks", line=dict(color="#F06A6A"), yaxis='y2'))

fig_6_US.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'US', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'US', 'transit_stations'].tolist(), 
               name="Transit stations", line=dict(color="#3366cc"), yaxis='y2'))

fig_6_US.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'US', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'US', 'workplaces'].tolist(), 
               name="Workplaces", line=dict(color="#0FDCF7"), yaxis='y2'))

fig_6_US.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'US', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'US', 'residential'].tolist(), 
               name="Residential", line=dict(color="#9acd32"), yaxis='y2'))

fig_6_US.update_layout(
    updatemenus=[
        dict(
            active=0,
            buttons=list([
                dict(label="None",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, False, False]},
                           {"title": "US COVID-19 New cases with No mobility data",
                            "annotations": []}]),         
                
                dict(label="Retail & Recreation",
                     method="update",
                     args=[{"visible": [True, True, False, False, False, False, False]},
                           {"title": "US COVID-19 New cases with mobility data in retail recreation",
                            "annotations": []}]),
                
                dict(label="Grocery & Pharmacy",
                     method="update",
                     args=[{"visible": [True, False, True, False, False, False, False]},
                           {"title": "US COVID-19 New cases with mobility data in grocery pharmacy",
                            "annotations": []}]),
                dict(label="Parks",
                     method="update",
                     args=[{"visible": [True, False, False, True, False, False, False]},
                           {"title": "US COVID-19 New cases with mobility data in parks",
                            "annotations": []}]),

                dict(label="Transit stations",
                     method="update",
                     args=[{"visible": [True, False, False, False, True, False, False]},
                           {"title": "US COVID-19 New cases with mobility data in transit stations",
                            "annotations": []}]),
                
                dict(label="Workplaces",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, True, False]},
                           {"title": "US COVID-19 New cases with mobility data in workplaces",
                            "annotations": []}]),
                
                dict(label="Residential",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, False, True]},
                           {"title": "US COVID-19 New cases with mobility data in residential",
                            "annotations": []}])

            ]),
        )
    ])

fig_6_US.update_layout(
    annotations=[
        dict(text="Location", x=-0.30, xref="paper", y=1.06, yref="paper",
                             align="left", showarrow=False)],
    title='US COVID-19 New Case Trend with Mobility',
    xaxis =dict(showticklabels = True, tickangle = 45), 
    yaxis=dict(title="COVID-19 New Cases", titlefont=dict(color="#1f77b4"), tickfont=dict(color="#1f77b4")), 
    yaxis2=dict(title="Mobility Trend", titlefont=dict(color="#ff7f0e"), tickfont=dict(color="#ff7f0e"), 
                anchor="x", overlaying="y", side="right"))


fig_6_US.show()


# In[143]:


#Save the fig_6_US as html
pio.write_html(fig_6_US, file='C:/Users/yeaji/Documents/UMBC/Classes/Data606/Figure/fig_6_US.html', auto_open=True)


# In[144]:


#Save the figure for P3
fig_6_US.write_image("C:/Users/yeaji/Documents/UMBC/Classes/Data606/Figure/fig_6_US.png")


# In[145]:


#Make a graph that overlay New cases in UK with different mitigations as dropdown menu

fig_6_UK = go.Figure()

fig_6_UK.add_trace(
    go.Bar(x=df_mobil.loc[df_mobil['Country'] == 'United Kingdom', 'Date'].tolist(), 
           y=df_mobil.loc[df_mobil['Country'] == 'United Kingdom', 'New_case'].tolist(), 
           name="New cases"))

fig_6_UK.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'United Kingdom', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'United Kingdom', 'retail_recreation'].tolist(), 
               name="Retail & Recreation", line=dict(color="#33CFA5"), yaxis='y2'))

fig_6_UK.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'United Kingdom', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'United Kingdom', 'grocery_pharmacy'].tolist(), 
               name="Grocery & Pharmacy", line=dict(color="#ffc60a"), yaxis='y2'))

fig_6_UK.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'United Kingdom', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'United Kingdom', 'parks'].tolist(), 
               name="Parks", line=dict(color="#F06A6A"), yaxis='y2'))

fig_6_UK.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'United Kingdom', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'United Kingdom', 'transit_stations'].tolist(), 
               name="Transit stations", line=dict(color="#3366cc"), yaxis='y2'))

fig_6_UK.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'United Kingdom', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'United Kingdom', 'workplaces'].tolist(), 
               name="Workplaces", line=dict(color="#0FDCF7"), yaxis='y2'))

fig_6_UK.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'United Kingdom', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'United Kingdom', 'residential'].tolist(), 
               name="Residential", line=dict(color="#9acd32"), yaxis='y2'))

fig_6_UK.update_layout(
    updatemenus=[
        dict(
            active=0,
            buttons=list([
                dict(label="None",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, False, False]},
                           {"title": "UK COVID-19 New cases with No mobility data",
                            "annotations": []}]),         
                
                dict(label="Retail & Recreation",
                     method="update",
                     args=[{"visible": [True, True, False, False, False, False, False]},
                           {"title": "UK COVID-19 New cases with mobility data in retail recreation",
                            "annotations": []}]),
                
                dict(label="Grocery & Pharmacy",
                     method="update",
                     args=[{"visible": [True, False, True, False, False, False, False]},
                           {"title": "UK COVID-19 New cases with mobility data in grocery pharmacy",
                            "annotations": []}]),
                dict(label="Parks",
                     method="update",
                     args=[{"visible": [True, False, False, True, False, False, False]},
                           {"title": "UK COVID-19 New cases with mobility data in parks",
                            "annotations": []}]),

                dict(label="Transit stations",
                     method="update",
                     args=[{"visible": [True, False, False, False, True, False, False]},
                           {"title": "UK COVID-19 New cases with mobility data in transit stations",
                            "annotations": []}]),
                
                dict(label="Workplaces",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, True, False]},
                           {"title": "UK COVID-19 New cases with mobility data in workplaces",
                            "annotations": []}]),
                
                dict(label="Residential",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, False, True]},
                           {"title": "UK COVID-19 New cases with mobility data in residential",
                            "annotations": []}])

            ]),
        )
    ])

fig_6_UK.update_layout(
    annotations=[
        dict(text="Location", x=-0.30, xref="paper", y=1.06, yref="paper",
                             align="left", showarrow=False)],
    title='UK COVID-19 New Case Trend with Mobility',
    xaxis =dict(showticklabels = True, tickangle = 45), 
    yaxis=dict(title="COVID-19 New Cases", titlefont=dict(color="#1f77b4"), tickfont=dict(color="#1f77b4")), 
    yaxis2=dict(title="Mobility Trend", titlefont=dict(color="#ff7f0e"), tickfont=dict(color="#ff7f0e"), 
                anchor="x", overlaying="y", side="right"))


fig_6_UK.show()


# In[146]:


#Save the fig_6_UK as html
pio.write_html(fig_6_UK, file='C:/Users/yeaji/Documents/UMBC/Classes/Data606/Figure/fig_6_UK.html', auto_open=True)


# In[147]:


#Make a graph that overlay New cases in NZ with different mitigations as dropdown menu

fig_6_NZ = go.Figure()

fig_6_NZ.add_trace(
    go.Bar(x=df_mobil.loc[df_mobil['Country'] == 'New Zealand', 'Date'].tolist(), 
           y=df_mobil.loc[df_mobil['Country'] == 'New Zealand', 'New_case'].tolist(), 
           name="New cases"))

fig_6_NZ.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'New Zealand', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'New Zealand', 'retail_recreation'].tolist(), 
               name="Retail & Recreation", line=dict(color="#33CFA5"), yaxis='y2'))

fig_6_NZ.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'New Zealand', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'New Zealand', 'grocery_pharmacy'].tolist(), 
               name="Grocery & Pharmacy", line=dict(color="#ffc60a"), yaxis='y2'))

fig_6_NZ.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'New Zealand', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'New Zealand', 'parks'].tolist(), 
               name="Parks", line=dict(color="#F06A6A"), yaxis='y2'))

fig_6_NZ.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'New Zealand', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'New Zealand', 'transit_stations'].tolist(), 
               name="Transit stations", line=dict(color="#3366cc"), yaxis='y2'))

fig_6_NZ.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'New Zealand', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'New Zealand', 'workplaces'].tolist(), 
               name="Workplaces", line=dict(color="#0FDCF7"), yaxis='y2'))

fig_6_NZ.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'New Zealand', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'New Zealand', 'residential'].tolist(), 
               name="Residential", line=dict(color="#9acd32"), yaxis='y2'))

fig_6_NZ.update_layout(
    updatemenus=[
        dict(
            active=0,
            buttons=list([
                dict(label="None",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, False, False]},
                           {"title": "New Zealand COVID-19 New cases with No mobility data",
                            "annotations": []}]),         
                
                dict(label="Retail & Recreation",
                     method="update",
                     args=[{"visible": [True, True, False, False, False, False, False]},
                           {"title": "New Zealand COVID-19 New cases with mobility data in retail recreation",
                            "annotations": []}]),
                
                dict(label="Grocery & Pharmacy",
                     method="update",
                     args=[{"visible": [True, False, True, False, False, False, False]},
                           {"title": "New Zealand COVID-19 New cases with mobility data in grocery pharmacy",
                            "annotations": []}]),
                dict(label="Parks",
                     method="update",
                     args=[{"visible": [True, False, False, True, False, False, False]},
                           {"title": "New Zealand COVID-19 New cases with mobility data in parks",
                            "annotations": []}]),

                dict(label="Transit stations",
                     method="update",
                     args=[{"visible": [True, False, False, False, True, False, False]},
                           {"title": "New Zealand COVID-19 New cases with mobility data in transit stations",
                            "annotations": []}]),
                
                dict(label="Workplaces",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, True, False]},
                           {"title": "New Zealand COVID-19 New cases with mobility data in workplaces",
                            "annotations": []}]),
                
                dict(label="Residential",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, False, True]},
                           {"title": "New Zealand COVID-19 New cases with mobility data in residential",
                            "annotations": []}])

            ]),
        )
    ])

fig_6_NZ.update_layout(
    annotations=[
        dict(text="Location", x=-0.30, xref="paper", y=1.06, yref="paper",
                             align="left", showarrow=False)],
    title='New Zealand COVID-19 New Case Trend with Mobility',
    xaxis =dict(showticklabels = True, tickangle = 45), 
    yaxis=dict(title="COVID-19 New Cases", titlefont=dict(color="#1f77b4"), tickfont=dict(color="#1f77b4")), 
    yaxis2=dict(title="Mobility Trend", titlefont=dict(color="#ff7f0e"), tickfont=dict(color="#ff7f0e"), 
                anchor="x", overlaying="y", side="right"))


fig_6_NZ.show()


# In[148]:


#Save the fig_6_NZ as html
pio.write_html(fig_6_NZ, file='C:/Users/yeaji/Documents/UMBC/Classes/Data606/Figure/fig_6_NZ.html', auto_open=True)


# In[149]:


#Make a graph that overlay New cases in Brazil with different mitigations as dropdown menu

fig_6_BR = go.Figure()

fig_6_BR.add_trace(
    go.Bar(x=df_mobil.loc[df_mobil['Country'] == 'Brazil', 'Date'].tolist(), 
           y=df_mobil.loc[df_mobil['Country'] == 'Brazil', 'New_case'].tolist(), 
           name="New cases"))

fig_6_BR.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Brazil', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Brazil', 'retail_recreation'].tolist(), 
               name="Retail & Recreation", line=dict(color="#33CFA5"), yaxis='y2'))

fig_6_BR.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Brazil', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Brazil', 'grocery_pharmacy'].tolist(), 
               name="Grocery & Pharmacy", line=dict(color="#ffc60a"), yaxis='y2'))

fig_6_BR.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Brazil', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Brazil', 'parks'].tolist(), 
               name="Parks", line=dict(color="#F06A6A"), yaxis='y2'))

fig_6_BR.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Brazil', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Brazil', 'transit_stations'].tolist(), 
               name="Transit stations", line=dict(color="#3366cc"), yaxis='y2'))

fig_6_BR.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Brazil', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Brazil', 'workplaces'].tolist(), 
               name="Workplaces", line=dict(color="#0FDCF7"), yaxis='y2'))

fig_6_BR.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Brazil', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Brazil', 'residential'].tolist(), 
               name="Residential", line=dict(color="#9acd32"), yaxis='y2'))

fig_6_BR.update_layout(
    updatemenus=[
        dict(
            active=0,
            buttons=list([
                dict(label="None",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, False, False]},
                           {"title": "Brazil COVID-19 New cases with No mobility data",
                            "annotations": []}]),         
                
                dict(label="Retail & Recreation",
                     method="update",
                     args=[{"visible": [True, True, False, False, False, False, False]},
                           {"title": "Brazil COVID-19 New cases with mobility data in retail recreation",
                            "annotations": []}]),
                
                dict(label="Grocery & Pharmacy",
                     method="update",
                     args=[{"visible": [True, False, True, False, False, False, False]},
                           {"title": "Brazil COVID-19 New cases with mobility data in grocery pharmacy",
                            "annotations": []}]),
                dict(label="Parks",
                     method="update",
                     args=[{"visible": [True, False, False, True, False, False, False]},
                           {"title": "Brazil COVID-19 New cases with mobility data in parks",
                            "annotations": []}]),

                dict(label="Transit stations",
                     method="update",
                     args=[{"visible": [True, False, False, False, True, False, False]},
                           {"title": "Brazil COVID-19 New cases with mobility data in transit stations",
                            "annotations": []}]),
                
                dict(label="Workplaces",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, True, False]},
                           {"title": "Brazil COVID-19 New cases with mobility data in workplaces",
                            "annotations": []}]),
                
                dict(label="Residential",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, False, True]},
                           {"title": "Brazil COVID-19 New cases with mobility data in residential",
                            "annotations": []}])

            ]),
        )
    ])

fig_6_BR.update_layout(
    annotations=[
        dict(text="Location", x=-0.30, xref="paper", y=1.06, yref="paper",
                             align="left", showarrow=False)],
    title='Brazil COVID-19 New Case Trend with Mobility',
    xaxis =dict(showticklabels = True, tickangle = 45), 
    yaxis=dict(title="COVID-19 New Cases", titlefont=dict(color="#1f77b4"), tickfont=dict(color="#1f77b4")), 
    yaxis2=dict(title="Mobility Trend", titlefont=dict(color="#ff7f0e"), tickfont=dict(color="#ff7f0e"), 
                anchor="x", overlaying="y", side="right"))


fig_6_BR.show()


# In[150]:


#Save the fig_6_BR as html
pio.write_html(fig_6_BR, file='C:/Users/yeaji/Documents/UMBC/Classes/Data606/Figure/fig_6_BR.html', auto_open=True)


# In[151]:


#Make a graph that overlay New cases in Russia with different mitigations as dropdown menu

fig_6_RU = go.Figure()

fig_6_RU.add_trace(
    go.Bar(x=df_mobil.loc[df_mobil['Country'] == 'Russia', 'Date'].tolist(), 
           y=df_mobil.loc[df_mobil['Country'] == 'Russia', 'New_case'].tolist(), 
           name="New cases"))

fig_6_RU.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Russia', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Russia', 'retail_recreation'].tolist(), 
               name="Retail & Recreation", line=dict(color="#33CFA5"), yaxis='y2'))

fig_6_RU.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Russia', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Russia', 'grocery_pharmacy'].tolist(), 
               name="Grocery & Pharmacy", line=dict(color="#ffc60a"), yaxis='y2'))

fig_6_RU.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Russia', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Russia', 'parks'].tolist(), 
               name="Parks", line=dict(color="#F06A6A"), yaxis='y2'))

fig_6_RU.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Russia', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Russia', 'transit_stations'].tolist(), 
               name="Transit stations", line=dict(color="#3366cc"), yaxis='y2'))

fig_6_RU.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Russia', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Russia', 'workplaces'].tolist(), 
               name="Workplaces", line=dict(color="#0FDCF7"), yaxis='y2'))

fig_6_RU.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Russia', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Russia', 'residential'].tolist(), 
               name="Residential", line=dict(color="#9acd32"), yaxis='y2'))

fig_6_RU.update_layout(
    updatemenus=[
        dict(
            active=0,
            buttons=list([
                dict(label="None",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, False, False]},
                           {"title": "Russia COVID-19 New cases with No mobility data",
                            "annotations": []}]),         
                
                dict(label="Retail & Recreation",
                     method="update",
                     args=[{"visible": [True, True, False, False, False, False, False]},
                           {"title": "Russia COVID-19 New cases with mobility data in retail recreation",
                            "annotations": []}]),
                
                dict(label="Grocery & Pharmacy",
                     method="update",
                     args=[{"visible": [True, False, True, False, False, False, False]},
                           {"title": "Russia COVID-19 New cases with mobility data in grocery pharmacy",
                            "annotations": []}]),
                dict(label="Parks",
                     method="update",
                     args=[{"visible": [True, False, False, True, False, False, False]},
                           {"title": "Russia COVID-19 New cases with mobility data in parks",
                            "annotations": []}]),

                dict(label="Transit stations",
                     method="update",
                     args=[{"visible": [True, False, False, False, True, False, False]},
                           {"title": "Russia COVID-19 New cases with mobility data in transit stations",
                            "annotations": []}]),
                
                dict(label="Workplaces",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, True, False]},
                           {"title": "Russia COVID-19 New cases with mobility data in workplaces",
                            "annotations": []}]),
                
                dict(label="Residential",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, False, True]},
                           {"title": "Russia COVID-19 New cases with mobility data in residential",
                            "annotations": []}])

            ]),
        )
    ])

fig_6_RU.update_layout(
    annotations=[
        dict(text="Location", x=-0.30, xref="paper", y=1.06, yref="paper",
                             align="left", showarrow=False)],
    title='Russia COVID-19 New Case Trend with Mobility',
    xaxis =dict(showticklabels = True, tickangle = 45), 
    yaxis=dict(title="COVID-19 New Cases", titlefont=dict(color="#1f77b4"), tickfont=dict(color="#1f77b4")), 
    yaxis2=dict(title="Mobility Trend", titlefont=dict(color="#ff7f0e"), tickfont=dict(color="#ff7f0e"), 
                anchor="x", overlaying="y", side="right"))


fig_6_RU.show()


# In[152]:


#Save the fig_6_RU as html
pio.write_html(fig_6_RU, file='C:/Users/yeaji/Documents/UMBC/Classes/Data606/Figure/fig_6_RU.html', auto_open=True)


# In[153]:


#Make a graph that overlay New cases in India with different mitigations as dropdown menu

fig_6_IN = go.Figure()

fig_6_IN.add_trace(
    go.Bar(x=df_mobil.loc[df_mobil['Country'] == 'India', 'Date'].tolist(), 
           y=df_mobil.loc[df_mobil['Country'] == 'India', 'New_case'].tolist(), 
           name="New cases"))

fig_6_IN.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'India', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'India', 'retail_recreation'].tolist(), 
               name="Retail & Recreation", line=dict(color="#33CFA5"), yaxis='y2'))

fig_6_IN.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'India', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'India', 'grocery_pharmacy'].tolist(), 
               name="Grocery & Pharmacy", line=dict(color="#ffc60a"), yaxis='y2'))

fig_6_IN.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'India', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'India', 'parks'].tolist(), 
               name="Parks", line=dict(color="#F06A6A"), yaxis='y2'))

fig_6_IN.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'India', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'India', 'transit_stations'].tolist(), 
               name="Transit stations", line=dict(color="#3366cc"), yaxis='y2'))

fig_6_IN.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'India', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'India', 'workplaces'].tolist(), 
               name="Workplaces", line=dict(color="#0FDCF7"), yaxis='y2'))

fig_6_IN.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'India', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'India', 'residential'].tolist(), 
               name="Residential", line=dict(color="#9acd32"), yaxis='y2'))

fig_6_IN.update_layout(
    updatemenus=[
        dict(
            active=0,
            buttons=list([
                dict(label="None",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, False, False]},
                           {"title": "India COVID-19 New cases with No mobility data",
                            "annotations": []}]),         
                
                dict(label="Retail & Recreation",
                     method="update",
                     args=[{"visible": [True, True, False, False, False, False, False]},
                           {"title": "India COVID-19 New cases with mobility data in retail recreation",
                            "annotations": []}]),
                
                dict(label="Grocery & Pharmacy",
                     method="update",
                     args=[{"visible": [True, False, True, False, False, False, False]},
                           {"title": "India COVID-19 New cases with mobility data in grocery pharmacy",
                            "annotations": []}]),
                dict(label="Parks",
                     method="update",
                     args=[{"visible": [True, False, False, True, False, False, False]},
                           {"title": "India COVID-19 New cases with mobility data in parks",
                            "annotations": []}]),

                dict(label="Transit stations",
                     method="update",
                     args=[{"visible": [True, False, False, False, True, False, False]},
                           {"title": "India COVID-19 New cases with mobility data in transit stations",
                            "annotations": []}]),
                
                dict(label="Workplaces",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, True, False]},
                           {"title": "India COVID-19 New cases with mobility data in workplaces",
                            "annotations": []}]),
                
                dict(label="Residential",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, False, True]},
                           {"title": "India COVID-19 New cases with mobility data in residential",
                            "annotations": []}])

            ]),
        )
    ])

fig_6_IN.update_layout(
    annotations=[
        dict(text="Location", x=-0.30, xref="paper", y=1.06, yref="paper",
                             align="left", showarrow=False)],
    title='India COVID-19 New Case Trend with Mobility',
    xaxis =dict(showticklabels = True, tickangle = 45), 
    yaxis=dict(title="COVID-19 New Cases", titlefont=dict(color="#1f77b4"), tickfont=dict(color="#1f77b4")), 
    yaxis2=dict(title="Mobility Trend", titlefont=dict(color="#ff7f0e"), tickfont=dict(color="#ff7f0e"), 
                anchor="x", overlaying="y", side="right"))


fig_6_IN.show()


# In[154]:


#Save the fig_6_IN as html
pio.write_html(fig_6_IN, file='C:/Users/yeaji/Documents/UMBC/Classes/Data606/Figure/fig_6_IN.html', auto_open=True)


# In[155]:


#Make a graph that overlay New cases in Peru with different mitigations as dropdown menu

fig_6_PE = go.Figure()

fig_6_PE.add_trace(
    go.Bar(x=df_mobil.loc[df_mobil['Country'] == 'Peru', 'Date'].tolist(), 
           y=df_mobil.loc[df_mobil['Country'] == 'Peru', 'New_case'].tolist(), 
           name="New cases"))

fig_6_PE.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Peru', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Peru', 'retail_recreation'].tolist(), 
               name="Retail & Recreation", line=dict(color="#33CFA5"), yaxis='y2'))

fig_6_PE.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Peru', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Peru', 'grocery_pharmacy'].tolist(), 
               name="Grocery & Pharmacy", line=dict(color="#ffc60a"), yaxis='y2'))

fig_6_PE.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Peru', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Peru', 'parks'].tolist(), 
               name="Parks", line=dict(color="#F06A6A"), yaxis='y2'))

fig_6_PE.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Peru', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Peru', 'transit_stations'].tolist(), 
               name="Transit stations", line=dict(color="#3366cc"), yaxis='y2'))

fig_6_PE.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Peru', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Peru', 'workplaces'].tolist(), 
               name="Workplaces", line=dict(color="#0FDCF7"), yaxis='y2'))

fig_6_PE.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Peru', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Peru', 'residential'].tolist(), 
               name="Residential", line=dict(color="#9acd32"), yaxis='y2'))

fig_6_PE.update_layout(
    updatemenus=[
        dict(
            active=0,
            buttons=list([
                dict(label="None",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, False, False]},
                           {"title": "Peru COVID-19 New cases with No mobility data",
                            "annotations": []}]),         
                
                dict(label="Retail & Recreation",
                     method="update",
                     args=[{"visible": [True, True, False, False, False, False, False]},
                           {"title": "Peru COVID-19 New cases with mobility data in retail recreation",
                            "annotations": []}]),
                
                dict(label="Grocery & Pharmacy",
                     method="update",
                     args=[{"visible": [True, False, True, False, False, False, False]},
                           {"title": "Peru COVID-19 New cases with mobility data in grocery pharmacy",
                            "annotations": []}]),
                dict(label="Parks",
                     method="update",
                     args=[{"visible": [True, False, False, True, False, False, False]},
                           {"title": "Peru COVID-19 New cases with mobility data in parks",
                            "annotations": []}]),

                dict(label="Transit stations",
                     method="update",
                     args=[{"visible": [True, False, False, False, True, False, False]},
                           {"title": "Peru COVID-19 New cases with mobility data in transit stations",
                            "annotations": []}]),
                
                dict(label="Workplaces",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, True, False]},
                           {"title": "Peru COVID-19 New cases with mobility data in workplaces",
                            "annotations": []}]),
                
                dict(label="Residential",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, False, True]},
                           {"title": "Peru COVID-19 New cases with mobility data in residential",
                            "annotations": []}])

            ]),
        )
    ])

fig_6_PE.update_layout(
    annotations=[
        dict(text="Location", x=-0.30, xref="paper", y=1.06, yref="paper",
                             align="left", showarrow=False)],
    title='Peru COVID-19 New Case Trend with Mobility',
    xaxis =dict(showticklabels = True, tickangle = 45), 
    yaxis=dict(title="COVID-19 New Cases", titlefont=dict(color="#1f77b4"), tickfont=dict(color="#1f77b4")), 
    yaxis2=dict(title="Mobility Trend", titlefont=dict(color="#ff7f0e"), tickfont=dict(color="#ff7f0e"), 
                anchor="x", overlaying="y", side="right"))


fig_6_PE.show()


# In[156]:


#Save the fig_6_PE as html
pio.write_html(fig_6_PE, file='C:/Users/yeaji/Documents/UMBC/Classes/Data606/Figure/fig_6_PE.html', auto_open=True)


# In[157]:


#Make a graph that overlay New cases in Chile with different mitigations as dropdown menu

fig_6_CHL = go.Figure()

fig_6_CHL.add_trace(
    go.Bar(x=df_mobil.loc[df_mobil['Country'] == 'Chile', 'Date'].tolist(), 
           y=df_mobil.loc[df_mobil['Country'] == 'Chile', 'New_case'].tolist(), 
           name="New cases"))

fig_6_CHL.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Chile', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Chile', 'retail_recreation'].tolist(), 
               name="Retail & Recreation", line=dict(color="#33CFA5"), yaxis='y2'))

fig_6_CHL.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Chile', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Chile', 'grocery_pharmacy'].tolist(), 
               name="Grocery & Pharmacy", line=dict(color="#ffc60a"), yaxis='y2'))

fig_6_CHL.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Chile', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Chile', 'parks'].tolist(), 
               name="Parks", line=dict(color="#F06A6A"), yaxis='y2'))

fig_6_CHL.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Chile', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Chile', 'transit_stations'].tolist(), 
               name="Transit stations", line=dict(color="#3366cc"), yaxis='y2'))

fig_6_CHL.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Chile', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Chile', 'workplaces'].tolist(), 
               name="Workplaces", line=dict(color="#0FDCF7"), yaxis='y2'))

fig_6_CHL.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Chile', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Chile', 'residential'].tolist(), 
               name="Residential", line=dict(color="#9acd32"), yaxis='y2'))

fig_6_CHL.update_layout(
    updatemenus=[
        dict(
            active=0,
            buttons=list([
                dict(label="None",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, False, False]},
                           {"title": "Chile COVID-19 New cases with No mobility data",
                            "annotations": []}]),         
                
                dict(label="Retail & Recreation",
                     method="update",
                     args=[{"visible": [True, True, False, False, False, False, False]},
                           {"title": "Chile COVID-19 New cases with mobility data in retail recreation",
                            "annotations": []}]),
                
                dict(label="Grocery & Pharmacy",
                     method="update",
                     args=[{"visible": [True, False, True, False, False, False, False]},
                           {"title": "Chile COVID-19 New cases with mobility data in grocery pharmacy",
                            "annotations": []}]),
                dict(label="Parks",
                     method="update",
                     args=[{"visible": [True, False, False, True, False, False, False]},
                           {"title": "Chile COVID-19 New cases with mobility data in parks",
                            "annotations": []}]),

                dict(label="Transit stations",
                     method="update",
                     args=[{"visible": [True, False, False, False, True, False, False]},
                           {"title": "Chile COVID-19 New cases with mobility data in transit stations",
                            "annotations": []}]),
                
                dict(label="Workplaces",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, True, False]},
                           {"title": "Chile COVID-19 New cases with mobility data in workplaces",
                            "annotations": []}]),
                
                dict(label="Residential",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, False, True]},
                           {"title": "Chile COVID-19 New cases with mobility data in residential",
                            "annotations": []}])

            ]),
        )
    ])

fig_6_CHL.update_layout(
    annotations=[
        dict(text="Location", x=-0.30, xref="paper", y=1.06, yref="paper",
                             align="left", showarrow=False)],
    title='Chile COVID-19 New Case Trend with Mobility',
    xaxis =dict(showticklabels = True, tickangle = 45), 
    yaxis=dict(title="COVID-19 New Cases", titlefont=dict(color="#1f77b4"), tickfont=dict(color="#1f77b4")), 
    yaxis2=dict(title="Mobility Trend", titlefont=dict(color="#ff7f0e"), tickfont=dict(color="#ff7f0e"), 
                anchor="x", overlaying="y", side="right"))


fig_6_CHL.show()


# In[158]:


#Save the fig_6_CHL as html
pio.write_html(fig_6_CHL, file='C:/Users/yeaji/Documents/UMBC/Classes/Data606/Figure/fig_6_CHL.html', auto_open=True)


# In[159]:


#Make a graph that overlay New cases in Spain with different mitigations as dropdown menu

fig_6_SP = go.Figure()

fig_6_SP.add_trace(
    go.Bar(x=df_mobil.loc[df_mobil['Country'] == 'Spain', 'Date'].tolist(), 
           y=df_mobil.loc[df_mobil['Country'] == 'Spain', 'New_case'].tolist(), 
           name="New cases"))

fig_6_SP.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Spain', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Spain', 'retail_recreation'].tolist(), 
               name="Retail & Recreation", line=dict(color="#33CFA5"), yaxis='y2'))

fig_6_SP.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Spain', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Spain', 'grocery_pharmacy'].tolist(), 
               name="Grocery & Pharmacy", line=dict(color="#ffc60a"), yaxis='y2'))

fig_6_SP.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Spain', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Spain', 'parks'].tolist(), 
               name="Parks", line=dict(color="#F06A6A"), yaxis='y2'))

fig_6_SP.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Spain', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Spain', 'transit_stations'].tolist(), 
               name="Transit stations", line=dict(color="#3366cc"), yaxis='y2'))

fig_6_SP.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Spain', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Spain', 'workplaces'].tolist(), 
               name="Workplaces", line=dict(color="#0FDCF7"), yaxis='y2'))

fig_6_SP.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Spain', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Spain', 'residential'].tolist(), 
               name="Residential", line=dict(color="#9acd32"), yaxis='y2'))

fig_6_SP.update_layout(
    updatemenus=[
        dict(
            active=0,
            buttons=list([
                dict(label="None",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, False, False]},
                           {"title": "Brazil COVID-19 New cases with No mobility data",
                            "annotations": []}]),         
                
                dict(label="Retail & Recreation",
                     method="update",
                     args=[{"visible": [True, True, False, False, False, False, False]},
                           {"title": "Brazil COVID-19 New cases with mobility data in retail recreation",
                            "annotations": []}]),
                
                dict(label="Grocery & Pharmacy",
                     method="update",
                     args=[{"visible": [True, False, True, False, False, False, False]},
                           {"title": "Brazil COVID-19 New cases with mobility data in grocery pharmacy",
                            "annotations": []}]),
                dict(label="Parks",
                     method="update",
                     args=[{"visible": [True, False, False, True, False, False, False]},
                           {"title": "Brazil COVID-19 New cases with mobility data in parks",
                            "annotations": []}]),

                dict(label="Transit stations",
                     method="update",
                     args=[{"visible": [True, False, False, False, True, False, False]},
                           {"title": "Brazil COVID-19 New cases with mobility data in transit stations",
                            "annotations": []}]),
                
                dict(label="Workplaces",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, True, False]},
                           {"title": "Brazil COVID-19 New cases with mobility data in workplaces",
                            "annotations": []}]),
                
                dict(label="Residential",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, False, True]},
                           {"title": "Brazil COVID-19 New cases with mobility data in residential",
                            "annotations": []}])

            ]),
        )
    ])

fig_6_SP.update_layout(
    annotations=[
        dict(text="Location", x=-0.30, xref="paper", y=1.06, yref="paper",
                             align="left", showarrow=False)],
    title='Spain COVID-19 New Case Trend with Mobility',
    xaxis =dict(showticklabels = True, tickangle = 45), 
    yaxis=dict(title="COVID-19 New Cases", titlefont=dict(color="#1f77b4"), tickfont=dict(color="#1f77b4")), 
    yaxis2=dict(title="Mobility Trend", titlefont=dict(color="#ff7f0e"), tickfont=dict(color="#ff7f0e"), 
                anchor="x", overlaying="y", side="right"))


fig_6_SP.show()


# In[160]:


#Save the fig_6_SP as html
pio.write_html(fig_6_SP, file='C:/Users/yeaji/Documents/UMBC/Classes/Data606/Figure/fig_6_SP.html', auto_open=True)


# In[161]:


#Make a graph that overlay New cases in Italy with different mitigations as dropdown menu

fig_6_IT = go.Figure()

fig_6_IT.add_trace(
    go.Bar(x=df_mobil.loc[df_mobil['Country'] == 'Italy', 'Date'].tolist(), 
           y=df_mobil.loc[df_mobil['Country'] == 'Italy', 'New_case'].tolist(), 
           name="New cases"))

fig_6_IT.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Italy', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Italy', 'retail_recreation'].tolist(), 
               name="Retail & Recreation", line=dict(color="#33CFA5"), yaxis='y2'))

fig_6_IT.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Italy', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Italy', 'grocery_pharmacy'].tolist(), 
               name="Grocery & Pharmacy", line=dict(color="#ffc60a"), yaxis='y2'))

fig_6_IT.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Italy', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Italy', 'parks'].tolist(), 
               name="Parks", line=dict(color="#F06A6A"), yaxis='y2'))

fig_6_IT.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Italy', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Italy', 'transit_stations'].tolist(), 
               name="Transit stations", line=dict(color="#3366cc"), yaxis='y2'))

fig_6_IT.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Italy', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Italy', 'workplaces'].tolist(), 
               name="Workplaces", line=dict(color="#0FDCF7"), yaxis='y2'))

fig_6_IT.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Italy', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Italy', 'residential'].tolist(), 
               name="Residential", line=dict(color="#9acd32"), yaxis='y2'))

fig_6_IT.update_layout(
    updatemenus=[
        dict(
            active=0,
            buttons=list([
                dict(label="None",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, False, False]},
                           {"title": "Italy COVID-19 New cases with No mobility data",
                            "annotations": []}]),         
                
                dict(label="Retail & Recreation",
                     method="update",
                     args=[{"visible": [True, True, False, False, False, False, False]},
                           {"title": "Italy COVID-19 New cases with mobility data in retail recreation",
                            "annotations": []}]),
                
                dict(label="Grocery & Pharmacy",
                     method="update",
                     args=[{"visible": [True, False, True, False, False, False, False]},
                           {"title": "Italy COVID-19 New cases with mobility data in grocery pharmacy",
                            "annotations": []}]),
                dict(label="Parks",
                     method="update",
                     args=[{"visible": [True, False, False, True, False, False, False]},
                           {"title": "Italy COVID-19 New cases with mobility data in parks",
                            "annotations": []}]),

                dict(label="Transit stations",
                     method="update",
                     args=[{"visible": [True, False, False, False, True, False, False]},
                           {"title": "Italy COVID-19 New cases with mobility data in transit stations",
                            "annotations": []}]),
                
                dict(label="Workplaces",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, True, False]},
                           {"title": "Italy COVID-19 New cases with mobility data in workplaces",
                            "annotations": []}]),
                
                dict(label="Residential",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, False, True]},
                           {"title": "Italy COVID-19 New cases with mobility data in residential",
                            "annotations": []}])

            ]),
        )
    ])

fig_6_IT.update_layout(
    annotations=[
        dict(text="Location", x=-0.30, xref="paper", y=1.06, yref="paper",
                             align="left", showarrow=False)],
    title='Italy COVID-19 New Case Trend with Mobility',
    xaxis =dict(showticklabels = True, tickangle = 45), 
    yaxis=dict(title="COVID-19 New Cases", titlefont=dict(color="#1f77b4"), tickfont=dict(color="#1f77b4")), 
    yaxis2=dict(title="Mobility Trend", titlefont=dict(color="#ff7f0e"), tickfont=dict(color="#ff7f0e"), 
                anchor="x", overlaying="y", side="right"))


fig_6_IT.show()


# In[162]:


#Save the fig_6_IT as html
pio.write_html(fig_6_IT, file='C:/Users/yeaji/Documents/UMBC/Classes/Data606/Figure/fig_6_IT.html', auto_open=True)


# In[163]:


#Make a graph that overlay New cases in France with different mitigations as dropdown menu

fig_6_FR = go.Figure()

fig_6_FR.add_trace(
    go.Bar(x=df_mobil.loc[df_mobil['Country'] == 'France', 'Date'].tolist(), 
           y=df_mobil.loc[df_mobil['Country'] == 'France', 'New_case'].tolist(), 
           name="New cases"))

fig_6_FR.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'France', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'France', 'retail_recreation'].tolist(), 
               name="Retail & Recreation", line=dict(color="#33CFA5"), yaxis='y2'))

fig_6_FR.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'France', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'France', 'grocery_pharmacy'].tolist(), 
               name="Grocery & Pharmacy", line=dict(color="#ffc60a"), yaxis='y2'))

fig_6_FR.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'France', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'France', 'parks'].tolist(), 
               name="Parks", line=dict(color="#F06A6A"), yaxis='y2'))

fig_6_FR.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'France', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'France', 'transit_stations'].tolist(), 
               name="Transit stations", line=dict(color="#3366cc"), yaxis='y2'))

fig_6_FR.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'France', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'France', 'workplaces'].tolist(), 
               name="Workplaces", line=dict(color="#0FDCF7"), yaxis='y2'))

fig_6_FR.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'France', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'France', 'residential'].tolist(), 
               name="Residential", line=dict(color="#9acd32"), yaxis='y2'))

fig_6_FR.update_layout(
    updatemenus=[
        dict(
            active=0,
            buttons=list([
                dict(label="None",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, False, False]},
                           {"title": "France COVID-19 New cases with No mobility data",
                            "annotations": []}]),         
                
                dict(label="Retail & Recreation",
                     method="update",
                     args=[{"visible": [True, True, False, False, False, False, False]},
                           {"title": "France COVID-19 New cases with mobility data in retail recreation",
                            "annotations": []}]),
                
                dict(label="Grocery & Pharmacy",
                     method="update",
                     args=[{"visible": [True, False, True, False, False, False, False]},
                           {"title": "France COVID-19 New cases with mobility data in grocery pharmacy",
                            "annotations": []}]),
                dict(label="Parks",
                     method="update",
                     args=[{"visible": [True, False, False, True, False, False, False]},
                           {"title": "France COVID-19 New cases with mobility data in parks",
                            "annotations": []}]),

                dict(label="Transit stations",
                     method="update",
                     args=[{"visible": [True, False, False, False, True, False, False]},
                           {"title": "France COVID-19 New cases with mobility data in transit stations",
                            "annotations": []}]),
                
                dict(label="Workplaces",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, True, False]},
                           {"title": "France COVID-19 New cases with mobility data in workplaces",
                            "annotations": []}]),
                
                dict(label="Residential",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, False, True]},
                           {"title": "France COVID-19 New cases with mobility data in residential",
                            "annotations": []}])

            ]),
        )
    ])

fig_6_FR.update_layout(
    annotations=[
        dict(text="Location", x=-0.30, xref="paper", y=1.06, yref="paper",
                             align="left", showarrow=False)],
    title='France COVID-19 New Case Trend with Mobility',
    xaxis =dict(showticklabels = True, tickangle = 45), 
    yaxis=dict(title="COVID-19 New Cases", titlefont=dict(color="#1f77b4"), tickfont=dict(color="#1f77b4")), 
    yaxis2=dict(title="Mobility Trend", titlefont=dict(color="#ff7f0e"), tickfont=dict(color="#ff7f0e"), 
                anchor="x", overlaying="y", side="right"))


fig_6_FR.show()


# In[164]:


#Save the fig_6_FR as html
pio.write_html(fig_6_FR, file='C:/Users/yeaji/Documents/UMBC/Classes/Data606/Figure/fig_6_FR.html', auto_open=True)


# In[165]:


#Make a graph that overlay New cases in Germany with different mitigations as dropdown menu

fig_6_GE = go.Figure()

fig_6_GE.add_trace(
    go.Bar(x=df_mobil.loc[df_mobil['Country'] == 'Germany', 'Date'].tolist(), 
           y=df_mobil.loc[df_mobil['Country'] == 'Germany', 'New_case'].tolist(), 
           name="New cases"))

fig_6_GE.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Germany', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Germany', 'retail_recreation'].tolist(), 
               name="Retail & Recreation", line=dict(color="#33CFA5"), yaxis='y2'))

fig_6_GE.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Germany', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Germany', 'grocery_pharmacy'].tolist(), 
               name="Grocery & Pharmacy", line=dict(color="#ffc60a"), yaxis='y2'))

fig_6_GE.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Germany', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Germany', 'parks'].tolist(), 
               name="Parks", line=dict(color="#F06A6A"), yaxis='y2'))

fig_6_GE.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Germany', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Germany', 'transit_stations'].tolist(), 
               name="Transit stations", line=dict(color="#3366cc"), yaxis='y2'))

fig_6_GE.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Germany', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Germany', 'workplaces'].tolist(), 
               name="Workplaces", line=dict(color="#0FDCF7"), yaxis='y2'))

fig_6_GE.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Germany', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Germany', 'residential'].tolist(), 
               name="Residential", line=dict(color="#9acd32"), yaxis='y2'))

fig_6_GE.update_layout(
    updatemenus=[
        dict(
            active=0,
            buttons=list([
                dict(label="None",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, False, False]},
                           {"title": "Germany COVID-19 New cases with No mobility data",
                            "annotations": []}]),         
                
                dict(label="Retail & Recreation",
                     method="update",
                     args=[{"visible": [True, True, False, False, False, False, False]},
                           {"title": "Germany COVID-19 New cases with mobility data in retail recreation",
                            "annotations": []}]),
                
                dict(label="Grocery & Pharmacy",
                     method="update",
                     args=[{"visible": [True, False, True, False, False, False, False]},
                           {"title": "Germany COVID-19 New cases with mobility data in grocery pharmacy",
                            "annotations": []}]),
                dict(label="Parks",
                     method="update",
                     args=[{"visible": [True, False, False, True, False, False, False]},
                           {"title": "Germany COVID-19 New cases with mobility data in parks",
                            "annotations": []}]),

                dict(label="Transit stations",
                     method="update",
                     args=[{"visible": [True, False, False, False, True, False, False]},
                           {"title": "Germany COVID-19 New cases with mobility data in transit stations",
                            "annotations": []}]),
                
                dict(label="Workplaces",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, True, False]},
                           {"title": "Germany COVID-19 New cases with mobility data in workplaces",
                            "annotations": []}]),
                
                dict(label="Residential",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, False, True]},
                           {"title": "Germany COVID-19 New cases with mobility data in residential",
                            "annotations": []}])

            ]),
        )
    ])

fig_6_GE.update_layout(
    annotations=[
        dict(text="Location", x=-0.30, xref="paper", y=1.06, yref="paper",
                             align="left", showarrow=False)],
    title='Germany COVID-19 New Case Trend with Mobility',
    xaxis =dict(showticklabels = True, tickangle = 45), 
    yaxis=dict(title="COVID-19 New Cases", titlefont=dict(color="#1f77b4"), tickfont=dict(color="#1f77b4")), 
    yaxis2=dict(title="Mobility Trend", titlefont=dict(color="#ff7f0e"), tickfont=dict(color="#ff7f0e"), 
                anchor="x", overlaying="y", side="right"))


fig_6_GE.show()


# In[166]:


#Save the fig_6_GE as html
pio.write_html(fig_6_GE, file='C:/Users/yeaji/Documents/UMBC/Classes/Data606/Figure/fig_6_GE.html', auto_open=True)


# In[167]:


#Make a graph that overlay New cases in Turkey with different mitigations as dropdown menu

fig_6_TU = go.Figure()

fig_6_TU.add_trace(
    go.Bar(x=df_mobil.loc[df_mobil['Country'] == 'Turkey', 'Date'].tolist(), 
           y=df_mobil.loc[df_mobil['Country'] == 'Turkey', 'New_case'].tolist(), 
           name="New cases"))

fig_6_TU.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Turkey', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Turkey', 'retail_recreation'].tolist(), 
               name="Retail & Recreation", line=dict(color="#33CFA5"), yaxis='y2'))

fig_6_TU.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Turkey', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Turkey', 'grocery_pharmacy'].tolist(), 
               name="Grocery & Pharmacy", line=dict(color="#ffc60a"), yaxis='y2'))

fig_6_TU.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Turkey', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Turkey', 'parks'].tolist(), 
               name="Parks", line=dict(color="#F06A6A"), yaxis='y2'))

fig_6_TU.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Turkey', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Turkey', 'transit_stations'].tolist(), 
               name="Transit stations", line=dict(color="#3366cc"), yaxis='y2'))

fig_6_TU.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Turkey', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Turkey', 'workplaces'].tolist(), 
               name="Workplaces", line=dict(color="#0FDCF7"), yaxis='y2'))

fig_6_TU.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Turkey', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Turkey', 'residential'].tolist(), 
               name="Residential", line=dict(color="#9acd32"), yaxis='y2'))

fig_6_TU.update_layout(
    updatemenus=[
        dict(
            active=0,
            buttons=list([
                dict(label="None",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, False, False]},
                           {"title": "Turkey COVID-19 New cases with No mobility data",
                            "annotations": []}]),         
                
                dict(label="Retail & Recreation",
                     method="update",
                     args=[{"visible": [True, True, False, False, False, False, False]},
                           {"title": "Turkey COVID-19 New cases with mobility data in retail recreation",
                            "annotations": []}]),
                
                dict(label="Grocery & Pharmacy",
                     method="update",
                     args=[{"visible": [True, False, True, False, False, False, False]},
                           {"title": "Turkey COVID-19 New cases with mobility data in grocery pharmacy",
                            "annotations": []}]),
                dict(label="Parks",
                     method="update",
                     args=[{"visible": [True, False, False, True, False, False, False]},
                           {"title": "Turkey COVID-19 New cases with mobility data in parks",
                            "annotations": []}]),

                dict(label="Transit stations",
                     method="update",
                     args=[{"visible": [True, False, False, False, True, False, False]},
                           {"title": "Turkey COVID-19 New cases with mobility data in transit stations",
                            "annotations": []}]),
                
                dict(label="Workplaces",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, True, False]},
                           {"title": "Turkey COVID-19 New cases with mobility data in workplaces",
                            "annotations": []}]),
                
                dict(label="Residential",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, False, True]},
                           {"title": "Turkey COVID-19 New cases with mobility data in residential",
                            "annotations": []}])

            ]),
        )
    ])

fig_6_TU.update_layout(
    annotations=[
        dict(text="Location", x=-0.30, xref="paper", y=1.06, yref="paper",
                             align="left", showarrow=False)],
    title='Turkey COVID-19 New Case Trend with Mobility',
    xaxis =dict(showticklabels = True, tickangle = 45), 
    yaxis=dict(title="COVID-19 New Cases", titlefont=dict(color="#1f77b4"), tickfont=dict(color="#1f77b4")), 
    yaxis2=dict(title="Mobility Trend", titlefont=dict(color="#ff7f0e"), tickfont=dict(color="#ff7f0e"), 
                anchor="x", overlaying="y", side="right"))


fig_6_TU.show()


# In[168]:


#Save the fig_6_TU as html
pio.write_html(fig_6_TU, file='C:/Users/yeaji/Documents/UMBC/Classes/Data606/Figure/fig_6_TU.html', auto_open=True)


# In[169]:


#Make a graph that overlay New cases in Mexico with different mitigations as dropdown menu

fig_6_ME = go.Figure()

fig_6_ME.add_trace(
    go.Bar(x=df_mobil.loc[df_mobil['Country'] == 'Mexico', 'Date'].tolist(), 
           y=df_mobil.loc[df_mobil['Country'] == 'Mexico', 'New_case'].tolist(), 
           name="New cases"))

fig_6_ME.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Mexico', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Mexico', 'retail_recreation'].tolist(), 
               name="Retail & Recreation", line=dict(color="#33CFA5"), yaxis='y2'))

fig_6_ME.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Mexico', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Mexico', 'grocery_pharmacy'].tolist(), 
               name="Grocery & Pharmacy", line=dict(color="#ffc60a"), yaxis='y2'))

fig_6_ME.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Mexico', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Mexico', 'parks'].tolist(), 
               name="Parks", line=dict(color="#F06A6A"), yaxis='y2'))

fig_6_ME.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Mexico', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Mexico', 'transit_stations'].tolist(), 
               name="Transit stations", line=dict(color="#3366cc"), yaxis='y2'))

fig_6_ME.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Mexico', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Mexico', 'workplaces'].tolist(), 
               name="Workplaces", line=dict(color="#0FDCF7"), yaxis='y2'))

fig_6_ME.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Mexico', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Mexico', 'residential'].tolist(), 
               name="Residential", line=dict(color="#9acd32"), yaxis='y2'))

fig_6_ME.update_layout(
    updatemenus=[
        dict(
            active=0,
            buttons=list([
                dict(label="None",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, False, False]},
                           {"title": "Mexico COVID-19 New cases with No mobility data",
                            "annotations": []}]),         
                
                dict(label="Retail & Recreation",
                     method="update",
                     args=[{"visible": [True, True, False, False, False, False, False]},
                           {"title": "Mexico COVID-19 New cases with mobility data in retail recreation",
                            "annotations": []}]),
                
                dict(label="Grocery & Pharmacy",
                     method="update",
                     args=[{"visible": [True, False, True, False, False, False, False]},
                           {"title": "Mexico COVID-19 New cases with mobility data in grocery pharmacy",
                            "annotations": []}]),
                dict(label="Parks",
                     method="update",
                     args=[{"visible": [True, False, False, True, False, False, False]},
                           {"title": "Mexico COVID-19 New cases with mobility data in parks",
                            "annotations": []}]),

                dict(label="Transit stations",
                     method="update",
                     args=[{"visible": [True, False, False, False, True, False, False]},
                           {"title": "Mexico COVID-19 New cases with mobility data in transit stations",
                            "annotations": []}]),
                
                dict(label="Workplaces",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, True, False]},
                           {"title": "Mexico COVID-19 New cases with mobility data in workplaces",
                            "annotations": []}]),
                
                dict(label="Residential",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, False, True]},
                           {"title": "Mexico COVID-19 New cases with mobility data in residential",
                            "annotations": []}])

            ]),
        )
    ])

fig_6_ME.update_layout(
    annotations=[
        dict(text="Location", x=-0.30, xref="paper", y=1.06, yref="paper",
                             align="left", showarrow=False)],
    title='Mexico COVID-19 New Case Trend with Mobility',
    xaxis =dict(showticklabels = True, tickangle = 45), 
    yaxis=dict(title="COVID-19 New Cases", titlefont=dict(color="#1f77b4"), tickfont=dict(color="#1f77b4")), 
    yaxis2=dict(title="Mobility Trend", titlefont=dict(color="#ff7f0e"), tickfont=dict(color="#ff7f0e"), 
                anchor="x", overlaying="y", side="right"))


fig_6_ME.show()


# In[170]:


#Save the fig_6_ME as html
pio.write_html(fig_6_ME, file='C:/Users/yeaji/Documents/UMBC/Classes/Data606/Figure/fig_6_ME.html', auto_open=True)


# In[171]:


#Make a graph that overlay New cases in South Africa with different mitigations as dropdown menu

fig_6_SA = go.Figure()

fig_6_SA.add_trace(
    go.Bar(x=df_mobil.loc[df_mobil['Country'] == 'South Africa', 'Date'].tolist(), 
           y=df_mobil.loc[df_mobil['Country'] == 'South Africa', 'New_case'].tolist(), 
           name="New cases"))

fig_6_SA.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'South Africa', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'South Africa', 'retail_recreation'].tolist(), 
               name="Retail & Recreation", line=dict(color="#33CFA5"), yaxis='y2'))

fig_6_SA.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'South Africa', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'South Africa', 'grocery_pharmacy'].tolist(), 
               name="Grocery & Pharmacy", line=dict(color="#ffc60a"), yaxis='y2'))

fig_6_SA.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'South Africa', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'South Africa', 'parks'].tolist(), 
               name="Parks", line=dict(color="#F06A6A"), yaxis='y2'))

fig_6_SA.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'South Africa', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'South Africa', 'transit_stations'].tolist(), 
               name="Transit stations", line=dict(color="#3366cc"), yaxis='y2'))

fig_6_SA.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'South Africa', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'South Africa', 'workplaces'].tolist(), 
               name="Workplaces", line=dict(color="#0FDCF7"), yaxis='y2'))

fig_6_SA.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'South Africa', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'South Africa', 'residential'].tolist(), 
               name="Residential", line=dict(color="#9acd32"), yaxis='y2'))

fig_6_SA.update_layout(
    updatemenus=[
        dict(
            active=0,
            buttons=list([
                dict(label="None",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, False, False]},
                           {"title": "South Africa COVID-19 New cases with No mobility data",
                            "annotations": []}]),         
                
                dict(label="Retail & Recreation",
                     method="update",
                     args=[{"visible": [True, True, False, False, False, False, False]},
                           {"title": "South Africa COVID-19 New cases with mobility data in retail recreation",
                            "annotations": []}]),
                
                dict(label="Grocery & Pharmacy",
                     method="update",
                     args=[{"visible": [True, False, True, False, False, False, False]},
                           {"title": "South Africa COVID-19 New cases with mobility data in grocery pharmacy",
                            "annotations": []}]),
                dict(label="Parks",
                     method="update",
                     args=[{"visible": [True, False, False, True, False, False, False]},
                           {"title": "South Africa COVID-19 New cases with mobility data in parks",
                            "annotations": []}]),

                dict(label="Transit stations",
                     method="update",
                     args=[{"visible": [True, False, False, False, True, False, False]},
                           {"title": "South Africa COVID-19 New cases with mobility data in transit stations",
                            "annotations": []}]),
                
                dict(label="Workplaces",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, True, False]},
                           {"title": "South Africa COVID-19 New cases with mobility data in workplaces",
                            "annotations": []}]),
                
                dict(label="Residential",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, False, True]},
                           {"title": "South Africa COVID-19 New cases with mobility data in residential",
                            "annotations": []}])

            ]),
        )
    ])

fig_6_SA.update_layout(
    annotations=[
        dict(text="Location", x=-0.30, xref="paper", y=1.06, yref="paper",
                             align="left", showarrow=False)],
    title='South Africa COVID-19 New Case Trend with Mobility',
    xaxis =dict(showticklabels = True, tickangle = 45), 
    yaxis=dict(title="COVID-19 New Cases", titlefont=dict(color="#1f77b4"), tickfont=dict(color="#1f77b4")), 
    yaxis2=dict(title="Mobility Trend", titlefont=dict(color="#ff7f0e"), tickfont=dict(color="#ff7f0e"), 
                anchor="x", overlaying="y", side="right"))


fig_6_SA.show()


# In[172]:


#Save the fig_6_SA as html
pio.write_html(fig_6_SA, file='C:/Users/yeaji/Documents/UMBC/Classes/Data606/Figure/fig_6_SA.html', auto_open=True)


# In[173]:


#Make a graph that overlay New cases in Sweden with different mitigations as dropdown menu

fig_6_SW = go.Figure()

fig_6_SW.add_trace(
    go.Bar(x=df_mobil.loc[df_mobil['Country'] == 'Sweden', 'Date'].tolist(), 
           y=df_mobil.loc[df_mobil['Country'] == 'Sweden', 'New_case'].tolist(), 
           name="New cases"))

fig_6_SW.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Sweden', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Sweden', 'retail_recreation'].tolist(), 
               name="Retail & Recreation", line=dict(color="#33CFA5"), yaxis='y2'))

fig_6_SW.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Sweden', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Sweden', 'grocery_pharmacy'].tolist(), 
               name="Grocery & Pharmacy", line=dict(color="#ffc60a"), yaxis='y2'))

fig_6_SW.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Sweden', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Sweden', 'parks'].tolist(), 
               name="Parks", line=dict(color="#F06A6A"), yaxis='y2'))

fig_6_SW.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Sweden', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Sweden', 'transit_stations'].tolist(), 
               name="Transit stations", line=dict(color="#3366cc"), yaxis='y2'))

fig_6_SW.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Sweden', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Sweden', 'workplaces'].tolist(), 
               name="Workplaces", line=dict(color="#0FDCF7"), yaxis='y2'))

fig_6_SW.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Sweden', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Sweden', 'residential'].tolist(), 
               name="Residential", line=dict(color="#9acd32"), yaxis='y2'))

fig_6_SW.update_layout(
    updatemenus=[
        dict(
            active=0,
            buttons=list([
                dict(label="None",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, False, False]},
                           {"title": "Sweden COVID-19 New cases with No mobility data",
                            "annotations": []}]),         
                
                dict(label="Retail & Recreation",
                     method="update",
                     args=[{"visible": [True, True, False, False, False, False, False]},
                           {"title": "Sweden COVID-19 New cases with mobility data in retail recreation",
                            "annotations": []}]),
                
                dict(label="Grocery & Pharmacy",
                     method="update",
                     args=[{"visible": [True, False, True, False, False, False, False]},
                           {"title": "Sweden COVID-19 New cases with mobility data in grocery pharmacy",
                            "annotations": []}]),
                dict(label="Parks",
                     method="update",
                     args=[{"visible": [True, False, False, True, False, False, False]},
                           {"title": "Sweden COVID-19 New cases with mobility data in parks",
                            "annotations": []}]),

                dict(label="Transit stations",
                     method="update",
                     args=[{"visible": [True, False, False, False, True, False, False]},
                           {"title": "Sweden COVID-19 New cases with mobility data in transit stations",
                            "annotations": []}]),
                
                dict(label="Workplaces",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, True, False]},
                           {"title": "Sweden COVID-19 New cases with mobility data in workplaces",
                            "annotations": []}]),
                
                dict(label="Residential",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, False, True]},
                           {"title": "Sweden COVID-19 New cases with mobility data in residential",
                            "annotations": []}])

            ]),
        )
    ])

fig_6_SW.update_layout(
    annotations=[
        dict(text="Location", x=-0.30, xref="paper", y=1.06, yref="paper",
                             align="left", showarrow=False)],
    title='Sweden COVID-19 New Case Trend with Mobility',
    xaxis =dict(showticklabels = True, tickangle = 45), 
    yaxis=dict(title="COVID-19 New Cases", titlefont=dict(color="#1f77b4"), tickfont=dict(color="#1f77b4")), 
    yaxis2=dict(title="Mobility Trend", titlefont=dict(color="#ff7f0e"), tickfont=dict(color="#ff7f0e"), 
                anchor="x", overlaying="y", side="right"))


fig_6_SW.show()


# In[174]:


#Save the fig_6_SW as html
pio.write_html(fig_6_SW, file='C:/Users/yeaji/Documents/UMBC/Classes/Data606/Figure/fig_6_SW.html', auto_open=True)


# In[175]:


#Make a graph that overlay New cases in Singapore with different mitigations as dropdown menu

fig_6_SI = go.Figure()

fig_6_SI.add_trace(
    go.Bar(x=df_mobil.loc[df_mobil['Country'] == 'Singapore', 'Date'].tolist(), 
           y=df_mobil.loc[df_mobil['Country'] == 'Singapore', 'New_case'].tolist(), 
           name="New cases"))

fig_6_SI.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Singapore', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Singapore', 'retail_recreation'].tolist(), 
               name="Retail & Recreation", line=dict(color="#33CFA5"), yaxis='y2'))

fig_6_SI.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Singapore', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Singapore', 'grocery_pharmacy'].tolist(), 
               name="Grocery & Pharmacy", line=dict(color="#ffc60a"), yaxis='y2'))

fig_6_SI.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Singapore', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Singapore', 'parks'].tolist(), 
               name="Parks", line=dict(color="#F06A6A"), yaxis='y2'))

fig_6_SI.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Singapore', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Singapore', 'transit_stations'].tolist(), 
               name="Transit stations", line=dict(color="#3366cc"), yaxis='y2'))

fig_6_SI.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Singapore', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Singapore', 'workplaces'].tolist(), 
               name="Workplaces", line=dict(color="#0FDCF7"), yaxis='y2'))

fig_6_SI.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Singapore', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Singapore', 'residential'].tolist(), 
               name="Residential", line=dict(color="#9acd32"), yaxis='y2'))

fig_6_SI.update_layout(
    updatemenus=[
        dict(
            active=0,
            buttons=list([
                dict(label="None",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, False, False]},
                           {"title": "Singapore COVID-19 New cases with No mobility data",
                            "annotations": []}]),         
                
                dict(label="Retail & Recreation",
                     method="update",
                     args=[{"visible": [True, True, False, False, False, False, False]},
                           {"title": "Singapore COVID-19 New cases with mobility data in retail recreation",
                            "annotations": []}]),
                
                dict(label="Grocery & Pharmacy",
                     method="update",
                     args=[{"visible": [True, False, True, False, False, False, False]},
                           {"title": "Singapore COVID-19 New cases with mobility data in grocery pharmacy",
                            "annotations": []}]),
                dict(label="Parks",
                     method="update",
                     args=[{"visible": [True, False, False, True, False, False, False]},
                           {"title": "Singapore COVID-19 New cases with mobility data in parks",
                            "annotations": []}]),

                dict(label="Transit stations",
                     method="update",
                     args=[{"visible": [True, False, False, False, True, False, False]},
                           {"title": "Singapore COVID-19 New cases with mobility data in transit stations",
                            "annotations": []}]),
                
                dict(label="Workplaces",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, True, False]},
                           {"title": "Singapore COVID-19 New cases with mobility data in workplaces",
                            "annotations": []}]),
                
                dict(label="Residential",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, False, True]},
                           {"title": "Singapore COVID-19 New cases with mobility data in residential",
                            "annotations": []}])

            ]),
        )
    ])

fig_6_SI.update_layout(
    annotations=[
        dict(text="Location", x=-0.30, xref="paper", y=1.06, yref="paper",
                             align="left", showarrow=False)],
    title='Singapore COVID-19 New Case Trend with Mobility',
    xaxis =dict(showticklabels = True, tickangle = 45), 
    yaxis=dict(title="COVID-19 New Cases", titlefont=dict(color="#1f77b4"), tickfont=dict(color="#1f77b4")), 
    yaxis2=dict(title="Mobility Trend", titlefont=dict(color="#ff7f0e"), tickfont=dict(color="#ff7f0e"), 
                anchor="x", overlaying="y", side="right"))


fig_6_SI.show()


# In[176]:


#Save the fig_6_SI as html
pio.write_html(fig_6_SI, file='C:/Users/yeaji/Documents/UMBC/Classes/Data606/Figure/fig_6_SI.html', auto_open=True)


# In[177]:


#Make a graph that overlay New cases in South Korea with different mitigations as dropdown menu

fig_6_SK = go.Figure()

fig_6_SK.add_trace(
    go.Bar(x=df_mobil.loc[df_mobil['Country'] == 'Korea, South', 'Date'].tolist(), 
           y=df_mobil.loc[df_mobil['Country'] == 'Korea, South', 'New_case'].tolist(), 
           name="New cases"))

fig_6_SK.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Korea, South', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Korea, South', 'retail_recreation'].tolist(), 
               name="Retail & Recreation", line=dict(color="#33CFA5"), yaxis='y2'))

fig_6_SK.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Korea, South', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Korea, South', 'grocery_pharmacy'].tolist(), 
               name="Grocery & Pharmacy", line=dict(color="#ffc60a"), yaxis='y2'))

fig_6_SK.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Korea, South', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Korea, South', 'parks'].tolist(), 
               name="Parks", line=dict(color="#F06A6A"), yaxis='y2'))

fig_6_SK.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Korea, South', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Korea, South', 'transit_stations'].tolist(), 
               name="Transit stations", line=dict(color="#3366cc"), yaxis='y2'))

fig_6_SK.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Korea, South', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Korea, South', 'workplaces'].tolist(), 
               name="Workplaces", line=dict(color="#0FDCF7"), yaxis='y2'))

fig_6_SK.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Korea, South', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Korea, South', 'residential'].tolist(), 
               name="Residential", line=dict(color="#9acd32"), yaxis='y2'))

fig_6_SK.update_layout(
    updatemenus=[
        dict(
            active=0,
            buttons=list([
                dict(label="None",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, False, False]},
                           {"title": "South Korea COVID-19 New cases with No mobility data",
                            "annotations": []}]),         
                
                dict(label="Retail & Recreation",
                     method="update",
                     args=[{"visible": [True, True, False, False, False, False, False]},
                           {"title": "South Korea COVID-19 New cases with mobility data in retail recreation",
                            "annotations": []}]),
                
                dict(label="Grocery & Pharmacy",
                     method="update",
                     args=[{"visible": [True, False, True, False, False, False, False]},
                           {"title": "South Korea COVID-19 New cases with mobility data in grocery pharmacy",
                            "annotations": []}]),
                dict(label="Parks",
                     method="update",
                     args=[{"visible": [True, False, False, True, False, False, False]},
                           {"title": "South Korea COVID-19 New cases with mobility data in parks",
                            "annotations": []}]),

                dict(label="Transit stations",
                     method="update",
                     args=[{"visible": [True, False, False, False, True, False, False]},
                           {"title": "South Korea COVID-19 New cases with mobility data in transit stations",
                            "annotations": []}]),
                
                dict(label="Workplaces",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, True, False]},
                           {"title": "South Korea COVID-19 New cases with mobility data in workplaces",
                            "annotations": []}]),
                
                dict(label="Residential",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, False, True]},
                           {"title": "South Korea COVID-19 New cases with mobility data in residential",
                            "annotations": []}])

            ]),
        )
    ])

fig_6_SK.update_layout(
    annotations=[
        dict(text="Location", x=-0.30, xref="paper", y=1.06, yref="paper",
                             align="left", showarrow=False)],
    title='South Korea COVID-19 New Case Trend with Mobility',
    xaxis =dict(showticklabels = True, tickangle = 45), 
    yaxis=dict(title="COVID-19 New Cases", titlefont=dict(color="#1f77b4"), tickfont=dict(color="#1f77b4")), 
    yaxis2=dict(title="Mobility Trend", titlefont=dict(color="#ff7f0e"), tickfont=dict(color="#ff7f0e"), 
                anchor="x", overlaying="y", side="right"))


fig_6_SK.show()


# In[178]:


#Save the fig_6_SK as html
pio.write_html(fig_6_SK, file='C:/Users/yeaji/Documents/UMBC/Classes/Data606/Figure/fig_6_SK.html', auto_open=True)


# In[179]:


#Make a graph that overlay New cases in Slovenia with different mitigations as dropdown menu

fig_6_SL = go.Figure()

fig_6_SL.add_trace(
    go.Bar(x=df_mobil.loc[df_mobil['Country'] == 'Slovenia', 'Date'].tolist(), 
           y=df_mobil.loc[df_mobil['Country'] == 'Slovenia', 'New_case'].tolist(), 
           name="New cases"))

fig_6_SL.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Slovenia', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Slovenia', 'retail_recreation'].tolist(), 
               name="Retail & Recreation", line=dict(color="#33CFA5"), yaxis='y2'))

fig_6_SL.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Slovenia', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Slovenia', 'grocery_pharmacy'].tolist(), 
               name="Grocery & Pharmacy", line=dict(color="#ffc60a"), yaxis='y2'))

fig_6_SL.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Slovenia', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Slovenia', 'parks'].tolist(), 
               name="Parks", line=dict(color="#F06A6A"), yaxis='y2'))

fig_6_SL.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Slovenia', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Slovenia', 'transit_stations'].tolist(), 
               name="Transit stations", line=dict(color="#3366cc"), yaxis='y2'))

fig_6_SL.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Slovenia', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Slovenia', 'workplaces'].tolist(), 
               name="Workplaces", line=dict(color="#0FDCF7"), yaxis='y2'))

fig_6_SL.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Slovenia', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Slovenia', 'residential'].tolist(), 
               name="Residential", line=dict(color="#9acd32"), yaxis='y2'))

fig_6_SL.update_layout(
    updatemenus=[
        dict(
            active=0,
            buttons=list([
                dict(label="None",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, False, False]},
                           {"title": "Slovenia COVID-19 New cases with No mobility data",
                            "annotations": []}]),         
                
                dict(label="Retail & Recreation",
                     method="update",
                     args=[{"visible": [True, True, False, False, False, False, False]},
                           {"title": "Slovenia COVID-19 New cases with mobility data in retail recreation",
                            "annotations": []}]),
                
                dict(label="Grocery & Pharmacy",
                     method="update",
                     args=[{"visible": [True, False, True, False, False, False, False]},
                           {"title": "Slovenia COVID-19 New cases with mobility data in grocery pharmacy",
                            "annotations": []}]),
                dict(label="Parks",
                     method="update",
                     args=[{"visible": [True, False, False, True, False, False, False]},
                           {"title": "Slovenia COVID-19 New cases with mobility data in parks",
                            "annotations": []}]),

                dict(label="Transit stations",
                     method="update",
                     args=[{"visible": [True, False, False, False, True, False, False]},
                           {"title": "Slovenia COVID-19 New cases with mobility data in transit stations",
                            "annotations": []}]),
                
                dict(label="Workplaces",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, True, False]},
                           {"title": "Slovenia COVID-19 New cases with mobility data in workplaces",
                            "annotations": []}]),
                
                dict(label="Residential",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, False, True]},
                           {"title": "Slovenia COVID-19 New cases with mobility data in residential",
                            "annotations": []}])

            ]),
        )
    ])

fig_6_SL.update_layout(
    annotations=[
        dict(text="Location", x=-0.30, xref="paper", y=1.06, yref="paper",
                             align="left", showarrow=False)],
    title='Slovenia COVID-19 New Case Trend with Mobility',
    xaxis =dict(showticklabels = True, tickangle = 45), 
    yaxis=dict(title="COVID-19 New Cases", titlefont=dict(color="#1f77b4"), tickfont=dict(color="#1f77b4")), 
    yaxis2=dict(title="Mobility Trend", titlefont=dict(color="#ff7f0e"), tickfont=dict(color="#ff7f0e"), 
                anchor="x", overlaying="y", side="right"))


fig_6_SL.show()


# In[180]:


#Save the fig_6_SL as html
pio.write_html(fig_6_SL, file='C:/Users/yeaji/Documents/UMBC/Classes/Data606/Figure/fig_6_SL.html', auto_open=True)


# In[181]:


#Make a graph that overlay New cases in Taiwan with different mitigations as dropdown menu

fig_6_TA = go.Figure()

fig_6_TA.add_trace(
    go.Bar(x=df_mobil.loc[df_mobil['Country'] == 'Taiwan*', 'Date'].tolist(), 
           y=df_mobil.loc[df_mobil['Country'] == 'Taiwan*', 'New_case'].tolist(), 
           name="New cases"))

fig_6_TA.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Taiwan*', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Taiwan*', 'retail_recreation'].tolist(), 
               name="Retail & Recreation", line=dict(color="#33CFA5"), yaxis='y2'))

fig_6_TA.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Taiwan*', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Taiwan*', 'grocery_pharmacy'].tolist(), 
               name="Grocery & Pharmacy", line=dict(color="#ffc60a"), yaxis='y2'))

fig_6_TA.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Taiwan*', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Taiwan*', 'parks'].tolist(), 
               name="Parks", line=dict(color="#F06A6A"), yaxis='y2'))

fig_6_TA.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Taiwan*', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Taiwan*', 'transit_stations'].tolist(), 
               name="Transit stations", line=dict(color="#3366cc"), yaxis='y2'))

fig_6_TA.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Taiwan*', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Taiwan*', 'workplaces'].tolist(), 
               name="Workplaces", line=dict(color="#0FDCF7"), yaxis='y2'))

fig_6_TA.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Taiwan*', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Taiwan*', 'residential'].tolist(), 
               name="Residential", line=dict(color="#9acd32"), yaxis='y2'))

fig_6_TA.update_layout(
    updatemenus=[
        dict(
            active=0,
            buttons=list([
                dict(label="None",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, False, False]},
                           {"title": "Taiwan COVID-19 New cases with No mobility data",
                            "annotations": []}]),         
                
                dict(label="Retail & Recreation",
                     method="update",
                     args=[{"visible": [True, True, False, False, False, False, False]},
                           {"title": "Taiwan COVID-19 New cases with mobility data in retail recreation",
                            "annotations": []}]),
                
                dict(label="Grocery & Pharmacy",
                     method="update",
                     args=[{"visible": [True, False, True, False, False, False, False]},
                           {"title": "Taiwan COVID-19 New cases with mobility data in grocery pharmacy",
                            "annotations": []}]),
                dict(label="Parks",
                     method="update",
                     args=[{"visible": [True, False, False, True, False, False, False]},
                           {"title": "Taiwan COVID-19 New cases with mobility data in parks",
                            "annotations": []}]),

                dict(label="Transit stations",
                     method="update",
                     args=[{"visible": [True, False, False, False, True, False, False]},
                           {"title": "Taiwan COVID-19 New cases with mobility data in transit stations",
                            "annotations": []}]),
                
                dict(label="Workplaces",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, True, False]},
                           {"title": "Taiwan COVID-19 New cases with mobility data in workplaces",
                            "annotations": []}]),
                
                dict(label="Residential",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, False, True]},
                           {"title": "Taiwan COVID-19 New cases with mobility data in residential",
                            "annotations": []}])

            ]),
        )
    ])

fig_6_TA.update_layout(
    annotations=[
        dict(text="Location", x=-0.30, xref="paper", y=1.06, yref="paper",
                             align="left", showarrow=False)],
    title='Taiwan COVID-19 New Case Trend with Mobility',
    xaxis =dict(showticklabels = True, tickangle = 45), 
    yaxis=dict(title="COVID-19 New Cases", titlefont=dict(color="#1f77b4"), tickfont=dict(color="#1f77b4")), 
    yaxis2=dict(title="Mobility Trend", titlefont=dict(color="#ff7f0e"), tickfont=dict(color="#ff7f0e"), 
                anchor="x", overlaying="y", side="right"))


fig_6_TA.show()


# In[182]:


#Save the fig_6_TA as html
pio.write_html(fig_6_TA, file='C:/Users/yeaji/Documents/UMBC/Classes/Data606/Figure/fig_6_TA.html', auto_open=True)


# In[183]:


#Make a graph that overlay New cases in Vietnam with different mitigations as dropdown menu

fig_6_VI = go.Figure()

fig_6_VI.add_trace(
    go.Bar(x=df_mobil.loc[df_mobil['Country'] == 'Vietnam', 'Date'].tolist(), 
           y=df_mobil.loc[df_mobil['Country'] == 'Vietnam', 'New_case'].tolist(), 
           name="New cases"))

fig_6_VI.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Vietnam', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Vietnam', 'retail_recreation'].tolist(), 
               name="Retail & Recreation", line=dict(color="#33CFA5"), yaxis='y2'))

fig_6_VI.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Vietnam', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Vietnam', 'grocery_pharmacy'].tolist(), 
               name="Grocery & Pharmacy", line=dict(color="#ffc60a"), yaxis='y2'))

fig_6_VI.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Vietnam', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Vietnam', 'parks'].tolist(), 
               name="Parks", line=dict(color="#F06A6A"), yaxis='y2'))

fig_6_VI.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Vietnam', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Vietnam', 'transit_stations'].tolist(), 
               name="Transit stations", line=dict(color="#3366cc"), yaxis='y2'))

fig_6_VI.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Vietnam', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Vietnam', 'workplaces'].tolist(), 
               name="Workplaces", line=dict(color="#0FDCF7"), yaxis='y2'))

fig_6_VI.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Vietnam', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Vietnam', 'residential'].tolist(), 
               name="Residential", line=dict(color="#9acd32"), yaxis='y2'))

fig_6_VI.update_layout(
    updatemenus=[
        dict(
            active=0,
            buttons=list([
                dict(label="None",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, False, False]},
                           {"title": "Vietnam COVID-19 New cases with No mobility data",
                            "annotations": []}]),         
                
                dict(label="Retail & Recreation",
                     method="update",
                     args=[{"visible": [True, True, False, False, False, False, False]},
                           {"title": "Vietnam COVID-19 New cases with mobility data in retail recreation",
                            "annotations": []}]),
                
                dict(label="Grocery & Pharmacy",
                     method="update",
                     args=[{"visible": [True, False, True, False, False, False, False]},
                           {"title": "Vietnam COVID-19 New cases with mobility data in grocery pharmacy",
                            "annotations": []}]),
                dict(label="Parks",
                     method="update",
                     args=[{"visible": [True, False, False, True, False, False, False]},
                           {"title": "Vietnam COVID-19 New cases with mobility data in parks",
                            "annotations": []}]),

                dict(label="Transit stations",
                     method="update",
                     args=[{"visible": [True, False, False, False, True, False, False]},
                           {"title": "Vietnam COVID-19 New cases with mobility data in transit stations",
                            "annotations": []}]),
                
                dict(label="Workplaces",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, True, False]},
                           {"title": "Vietnam COVID-19 New cases with mobility data in workplaces",
                            "annotations": []}]),
                
                dict(label="Residential",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, False, True]},
                           {"title": "Vietnam COVID-19 New cases with mobility data in residential",
                            "annotations": []}])

            ]),
        )
    ])

fig_6_VI.update_layout(
    annotations=[
        dict(text="Location", x=-0.30, xref="paper", y=1.06, yref="paper",
                             align="left", showarrow=False)],
    title='Vietnam COVID-19 New Case Trend with Mobility',
    xaxis =dict(showticklabels = True, tickangle = 45), 
    yaxis=dict(title="COVID-19 New Cases", titlefont=dict(color="#1f77b4"), tickfont=dict(color="#1f77b4")), 
    yaxis2=dict(title="Mobility Trend", titlefont=dict(color="#ff7f0e"), tickfont=dict(color="#ff7f0e"), 
                anchor="x", overlaying="y", side="right"))


fig_6_VI.show()


# In[184]:


#Save the fig_6_VI as html
pio.write_html(fig_6_VI, file='C:/Users/yeaji/Documents/UMBC/Classes/Data606/Figure/fig_6_VI.html', auto_open=True)


# In[185]:


#Make a graph that overlay New cases in Cambodia with different mitigations as dropdown menu

fig_6_CA = go.Figure()

fig_6_CA.add_trace(
    go.Bar(x=df_mobil.loc[df_mobil['Country'] == 'Cambodia', 'Date'].tolist(), 
           y=df_mobil.loc[df_mobil['Country'] == 'Cambodia', 'New_case'].tolist(), 
           name="New cases"))

fig_6_CA.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Cambodia', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Cambodia', 'retail_recreation'].tolist(), 
               name="Retail & Recreation", line=dict(color="#33CFA5"), yaxis='y2'))

fig_6_CA.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Cambodia', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Cambodia', 'grocery_pharmacy'].tolist(), 
               name="Grocery & Pharmacy", line=dict(color="#ffc60a"), yaxis='y2'))

fig_6_CA.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Cambodia', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Cambodia', 'parks'].tolist(), 
               name="Parks", line=dict(color="#F06A6A"), yaxis='y2'))

fig_6_CA.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Cambodia', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Cambodia', 'transit_stations'].tolist(), 
               name="Transit stations", line=dict(color="#3366cc"), yaxis='y2'))

fig_6_CA.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Cambodia', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Cambodia', 'workplaces'].tolist(), 
               name="Workplaces", line=dict(color="#0FDCF7"), yaxis='y2'))

fig_6_CA.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Cambodia', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Cambodia', 'residential'].tolist(), 
               name="Residential", line=dict(color="#9acd32"), yaxis='y2'))

fig_6_CA.update_layout(
    updatemenus=[
        dict(
            active=0,
            buttons=list([
                dict(label="None",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, False, False]},
                           {"title": "Cambodia COVID-19 New cases with No mobility data",
                            "annotations": []}]),         
                
                dict(label="Retail & Recreation",
                     method="update",
                     args=[{"visible": [True, True, False, False, False, False, False]},
                           {"title": "Cambodia COVID-19 New cases with mobility data in retail recreation",
                            "annotations": []}]),
                
                dict(label="Grocery & Pharmacy",
                     method="update",
                     args=[{"visible": [True, False, True, False, False, False, False]},
                           {"title": "Cambodia COVID-19 New cases with mobility data in grocery pharmacy",
                            "annotations": []}]),
                dict(label="Parks",
                     method="update",
                     args=[{"visible": [True, False, False, True, False, False, False]},
                           {"title": "Cambodia COVID-19 New cases with mobility data in parks",
                            "annotations": []}]),

                dict(label="Transit stations",
                     method="update",
                     args=[{"visible": [True, False, False, False, True, False, False]},
                           {"title": "Cambodia COVID-19 New cases with mobility data in transit stations",
                            "annotations": []}]),
                
                dict(label="Workplaces",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, True, False]},
                           {"title": "Cambodia COVID-19 New cases with mobility data in workplaces",
                            "annotations": []}]),
                
                dict(label="Residential",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, False, True]},
                           {"title": "Cambodia COVID-19 New cases with mobility data in residential",
                            "annotations": []}])

            ]),
        )
    ])

fig_6_CA.update_layout(
    annotations=[
        dict(text="Location", x=-0.30, xref="paper", y=1.06, yref="paper",
                             align="left", showarrow=False)],
    title='Cambodia COVID-19 New Case Trend with Mobility',
    xaxis =dict(showticklabels = True, tickangle = 45), 
    yaxis=dict(title="COVID-19 New Cases", titlefont=dict(color="#1f77b4"), tickfont=dict(color="#1f77b4")), 
    yaxis2=dict(title="Mobility Trend", titlefont=dict(color="#ff7f0e"), tickfont=dict(color="#ff7f0e"), 
                anchor="x", overlaying="y", side="right"))


fig_6_CA.show()


# In[186]:


#Save the fig_6_CA as html
pio.write_html(fig_6_CA, file='C:/Users/yeaji/Documents/UMBC/Classes/Data606/Figure/fig_6_CA.html', auto_open=True)


# In[187]:


#Make a graph that overlay New cases in Laos with different mitigations as dropdown menu

fig_6_LA = go.Figure()

fig_6_LA.add_trace(
    go.Bar(x=df_mobil.loc[df_mobil['Country'] == 'Laos', 'Date'].tolist(), 
           y=df_mobil.loc[df_mobil['Country'] == 'Laos', 'New_case'].tolist(), 
           name="New cases"))

fig_6_LA.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Laos', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Laos', 'retail_recreation'].tolist(), 
               name="Retail & Recreation", line=dict(color="#33CFA5"), yaxis='y2'))

fig_6_LA.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Laos', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Laos', 'grocery_pharmacy'].tolist(), 
               name="Grocery & Pharmacy", line=dict(color="#ffc60a"), yaxis='y2'))

fig_6_LA.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Laos', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Laos', 'parks'].tolist(), 
               name="Parks", line=dict(color="#F06A6A"), yaxis='y2'))

fig_6_LA.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Laos', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Laos', 'transit_stations'].tolist(), 
               name="Transit stations", line=dict(color="#3366cc"), yaxis='y2'))

fig_6_LA.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Laos', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Laos', 'workplaces'].tolist(), 
               name="Workplaces", line=dict(color="#0FDCF7"), yaxis='y2'))

fig_6_LA.add_trace(
    go.Scatter(x=df_mobil.loc[df_mobil['Country'] == 'Laos', 'Date'].tolist(), 
               y=df_mobil.loc[df_mobil['Country'] == 'Laos', 'residential'].tolist(), 
               name="Residential", line=dict(color="#9acd32"), yaxis='y2'))

fig_6_LA.update_layout(
    updatemenus=[
        dict(
            active=0,
            buttons=list([
                dict(label="None",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, False, False]},
                           {"title": "Laos COVID-19 New cases with No mobility data",
                            "annotations": []}]),         
                
                dict(label="Retail & Recreation",
                     method="update",
                     args=[{"visible": [True, True, False, False, False, False, False]},
                           {"title": "Laos COVID-19 New cases with mobility data in retail recreation",
                            "annotations": []}]),
                
                dict(label="Grocery & Pharmacy",
                     method="update",
                     args=[{"visible": [True, False, True, False, False, False, False]},
                           {"title": "Laos COVID-19 New cases with mobility data in grocery pharmacy",
                            "annotations": []}]),
                dict(label="Parks",
                     method="update",
                     args=[{"visible": [True, False, False, True, False, False, False]},
                           {"title": "Laos COVID-19 New cases with mobility data in parks",
                            "annotations": []}]),

                dict(label="Transit stations",
                     method="update",
                     args=[{"visible": [True, False, False, False, True, False, False]},
                           {"title": "Laos COVID-19 New cases with mobility data in transit stations",
                            "annotations": []}]),
                
                dict(label="Workplaces",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, True, False]},
                           {"title": "Laos COVID-19 New cases with mobility data in workplaces",
                            "annotations": []}]),
                
                dict(label="Residential",
                     method="update",
                     args=[{"visible": [True, False, False, False, False, False, True]},
                           {"title": "Laos COVID-19 New cases with mobility data in residential",
                            "annotations": []}])

            ]),
        )
    ])

fig_6_LA.update_layout(
    annotations=[
        dict(text="Location", x=-0.30, xref="paper", y=1.06, yref="paper",
                             align="left", showarrow=False)],
    title='Laos COVID-19 New Case Trend with Mobility',
    xaxis =dict(showticklabels = True, tickangle = 45), 
    yaxis=dict(title="COVID-19 New Cases", titlefont=dict(color="#1f77b4"), tickfont=dict(color="#1f77b4")), 
    yaxis2=dict(title="Mobility Trend", titlefont=dict(color="#ff7f0e"), tickfont=dict(color="#ff7f0e"), 
                anchor="x", overlaying="y", side="right"))


fig_6_LA.show()


# In[188]:


#Save the fig_6_LA as html
pio.write_html(fig_6_LA, file='C:/Users/yeaji/Documents/UMBC/Classes/Data606/Figure/fig_6_LA.html', auto_open=True)

